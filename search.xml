<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[ror-deploy-with-puma-and-nginx]]></title>
      <url>/2018/11/28/ror-deploy-with-puma-and-nginx/</url>
      <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这个过程基本上我花了三个星期，才弄好，其中的有些部署文件还是我直接从项目复制粘贴过来的。现在一整理，发现并没有那么难，那为什么会花费三个星期呢？大部分可能是因为我的无知和对centos的不了解。</p>
<p>例如，我在启动数据库的时候，它告诉我不能以root身份启动，等我切换到普通账户，又告诉我，对文件夹没有写入权限，看得我真的很矛盾。</p>
<p>例如，我在安装pg这个gem的时候，告诉我缺乏依赖，我找到答案<code>yum install libs-devel</code>，又告诉我ruby的版本太低了，很纳闷，我明明装的是最新的ruby版本，之后就一直在缺乏依赖着转圈，等到现在才知道是因为找不到<code>pg_config</code>， <code>pg_config</code>这个文件一般是在<code>/usr/bin</code>文件夹下，但是我安装完没有在这….</p>
<h4 id="安装ruby"><a href="#安装ruby" class="headerlink" title="安装ruby"></a>安装ruby</h4><p>如果使用yum安装ruby，版本太低，为了管理ruby版本，我使用rbenv来管理<br><a href="https://linuxize.com/post/how-to-install-ruby-on-centos-7/" target="_blank" rel="noopener">安装参考链接</a></p>
<h4 id="安装postgresql"><a href="#安装postgresql" class="headerlink" title="安装postgresql"></a>安装postgresql</h4><p>修改<code>/etc/yum.repos.d/CentOS-Base.repo</code>文件</p>
<pre class="line-numbers language-js"><code class="language-js">sudo vi <span class="token regex">/etc/yum</span><span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token operator">/</span>CentOS<span class="token operator">-</span>Base<span class="token punctuation">.</span>repo
exclude<span class="token operator">=</span>postgresql<span class="token operator">*</span>    <span class="token comment" spellcheck="true">// 在[base]和[updates]块中加上这一行</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>安装postgresql</p>
<pre class="line-numbers language-js"><code class="language-js">sudo rpm <span class="token operator">-</span>Uvh http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>yum<span class="token punctuation">.</span>postgresql<span class="token punctuation">.</span>org<span class="token operator">/</span><span class="token number">9.5</span><span class="token operator">/</span>redhat<span class="token operator">/</span>rhel<span class="token number">-6</span><span class="token operator">-</span>x86_64<span class="token operator">/</span>pgdg<span class="token operator">-</span>centos95<span class="token number">-9.5</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>noarch<span class="token punctuation">.</span>rpm
sudo yum install postgresql95 postgresql95<span class="token operator">-</span>devel postgresql95<span class="token operator">-</span>server postgresql95<span class="token operator">-</span>libs postgresql95<span class="token operator">-</span>contrib
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>初始化数据库<br>找到psql的安装目录(xxxx)的bin文件夹，</p>
<pre class="line-numbers language-js"><code class="language-js">xxxx<span class="token operator">/</span>bin<span class="token operator">/</span>pg_ctl <span class="token operator">-</span>D xxxx<span class="token operator">/</span>data initdb <span class="token comment" spellcheck="true">//初始化数据库</span>
xxxx<span class="token operator">/</span>bin<span class="token operator">/</span>pg_ctl <span class="token operator">-</span>D xxxx<span class="token operator">/</span>data start  <span class="token comment" spellcheck="true">// 启动数据库</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>在initdb，可能会出现权限不够的情况，这个时候，查看一下<code>data</code>的权限，发现你应该将用户切换成<code>postgres</code></p>
<pre class="line-numbers language-js"><code class="language-js">sudo su postgres
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在这一步，会提示你输入密码，如果你不知道密码，就使用以下命令去修改密码</p>
<pre class="line-numbers language-js"><code class="language-js">passwd postgres
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>将用户切换成<code>postgres</code>就可以初始化和启动数据库，也可以使用以下命令</p>
<pre class="line-numbers language-js"><code class="language-js">sudo service postgresql<span class="token number">-9.5</span> start               <span class="token comment" spellcheck="true">// 启动数据库</span>
sudo chkconfig <span class="token operator">--</span>levels <span class="token number">235</span> postgresql<span class="token number">-9.5</span> on   <span class="token comment" spellcheck="true">// psql开机自启动</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>创建psql的链接用户名和密码</p>
<pre class="line-numbers language-js"><code class="language-js">sudo su postgres
psql
alter user username <span class="token keyword">with</span> password <span class="token string">'password'</span><span class="token punctuation">;</span>
create database testdb owner<span class="token operator">=</span>username<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="为puma增加代理"><a href="#为puma增加代理" class="headerlink" title="为puma增加代理"></a>为puma增加代理</h4><pre class="line-numbers language-js"><code class="language-js">cap production puma<span class="token punctuation">:</span>restar
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个时候访问端口，发现无法访问，查一下puma的log，发现<code>puma</code>在<code>production</code>环境下是使用<code>socket</code>链接，只能使用nginx做代理了，编辑<code>/etc/nginx/conf.d/default.conf</code>文件，替换下面代码中的<code>username</code>和<code>deploy_path</code></p>
<pre class="line-numbers language-js"><code class="language-js">upstream app <span class="token punctuation">{</span>
    # Path to Puma SOCK file<span class="token punctuation">,</span> <span class="token keyword">as</span> defined previously
    server unix<span class="token punctuation">:</span><span class="token operator">/</span><span class="token comment" spellcheck="true">//home/username/deploy_path/shared/sockets/puma.sock fail_timeout=0;</span>
<span class="token punctuation">}</span>

server <span class="token punctuation">{</span>
    listen <span class="token number">80</span><span class="token punctuation">;</span>
    server_name localhost<span class="token punctuation">;</span>

    root <span class="token operator">/</span>home<span class="token operator">/</span>username<span class="token operator">/</span>deploy_path<span class="token operator">/</span>current<span class="token operator">/</span><span class="token keyword">public</span><span class="token punctuation">;</span>

    try_files $uri<span class="token operator">/</span>index<span class="token punctuation">.</span>html $uri @app<span class="token punctuation">;</span>

    location @app <span class="token punctuation">{</span>
        proxy_pass http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>app<span class="token punctuation">;</span>
        proxy_set_header X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For $proxy_add_x_forwarded_for<span class="token punctuation">;</span>
        proxy_set_header Host $http_host<span class="token punctuation">;</span>
        proxy_redirect off<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    error_page <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> <span class="token operator">/</span><span class="token number">500</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>
    client_max_body_size 4G<span class="token punctuation">;</span>
    keepalive_timeout <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>关于<code>puma</code>的<code>sock</code>的地址，你查一下<code>puma</code>的<code>log</code>确认一下</p>
<h4 id="你可能遇到的问题"><a href="#你可能遇到的问题" class="headerlink" title="你可能遇到的问题"></a>你可能遇到的问题</h4><ol>
<li><p>在安装pg这个gem的时候，可能会报缺少依赖，或者找不到pg_config文件<br>答：<code>gem install pg --with-pg-config=psql的安装目录/bin/pg_config</code></p>
</li>
<li><p>报错：ActiveRecord::StatementInvalid: PG::InsufficientPrivilege: 错误:  创建扩展 “uuid-ossp” 权限不够<br>答：需要为psql中的新建username设置super权限</p>
</li>
<li><p>即使你添加了nginx代理，你发现，网站还是无法访问<br>答：可以查一下<code>/var/log/nginx/nginx_error.log</code>，我遇到的原因是权限不够，修改<code>nginx</code>的config，将<code>user</code>由<code>nginx</code>改成<code>root</code></p>
</li>
</ol>
<h4 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h4><p>如果遇到瓶颈，不要再继续下去，放下来，明天再来尝试….</p>
]]></content>
      
        <categories>
            
            <category> rails </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rails </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos-server-1]]></title>
      <url>/2018/11/20/centos-server-1/</url>
      <content type="html"><![CDATA[<h4 id="目前的想法"><a href="#目前的想法" class="headerlink" title="目前的想法"></a>目前的想法</h4><p>需要了解一下服务器的端的知识，才可以在使用过程中不崩溃。<br>使用中最让我崩溃的是，我在启动pg的时候，使用root身份启动，告诉我不可以使用root身份，使用普通用户启动，告诉我没有文件的读写权限😵</p>
<p>虽然还是没有安装上pg这个gem</p>
<h4 id="1-新建用户"><a href="#1-新建用户" class="headerlink" title="1. 新建用户"></a>1. 新建用户</h4><ol>
<li>新建用户，创建密码<pre class="line-numbers language-js"><code class="language-js"># adduser tony
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>赋予root权限<br>找到三个方法：<br>2.1. 修改 /etc/sudoers 文件，找到下面一行，在root下面添加一行</p>
<pre class="line-numbers language-js"><code class="language-js">## Allow root to run any commands anywhere
root    ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>     ALL
tommy   ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>     ALL
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>2.2. 修改 /etc/sudoers 文件，找到下面一行，把前面的注释（#）去掉</p>
<pre class="line-numbers language-js"><code class="language-js">## Allows people <span class="token keyword">in</span> group wheel to run all commands
<span class="token operator">%</span>wheel    ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>    ALL
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>修改用户，使其属于root组:</p>
<pre class="line-numbers language-js"><code class="language-js"># usermod <span class="token operator">-</span>g root tony
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>2.3. 修改 /etc/passwd 文件，找到如下行，把用户ID修改为 0</p>
<pre class="line-numbers language-js"><code class="language-js">tony<span class="token punctuation">:</span>x<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">:</span>tony<span class="token punctuation">:</span><span class="token operator">/</span>data<span class="token operator">/</span>webroot<span class="token punctuation">:</span><span class="token operator">/</span>bin<span class="token operator">/</span>bash
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>上传ssh-key，关闭密码登录</p>
<pre class="line-numbers language-js"><code class="language-js"># ssh<span class="token operator">-</span>copy<span class="token operator">-</span>id tony@服务器ip
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>编辑/etc/ssh/sshd_config</p>
<pre class="line-numbers language-js"><code class="language-js">#PasswordAuthentication yes 改为
PasswordAuthentication no
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ol>
<h4 id="2-安装软件"><a href="#2-安装软件" class="headerlink" title="2. 安装软件"></a>2. 安装软件</h4><p>不同系统管理软件的软件不同，对于这个我也是乱乱的，找了一圈，才发现是使用yum安装的….</p>
<h4 id="3-启动服务"><a href="#3-启动服务" class="headerlink" title="3. 启动服务"></a>3. 启动服务</h4><p>启动的服务的命令（是这样叫吗，或者启动服务的包）大部分在/etc/init.d/文件夹下….</p>
]]></content>
      
        <categories>
            
            <category> server </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pm2-second]]></title>
      <url>/2018/11/10/pm2-second/</url>
      <content type="html"><![CDATA[<p>时间可以给人沉淀，现在再解决一年前的问题，比之前省力✌️。<br>之前尝试过<a href="https://wukong1995.github.io/2017/09/13/pm2/">pm2</a>，但是以失败告终。</p>
<p>不知到之前为什么会报nvm的错误，这次使用yum安装node，还算顺利。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"># yum install node

# pm2 deploy ecosystem<span class="token punctuation">.</span>json production setup

# pm2 deploy ecosystem<span class="token punctuation">.</span>json production
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>过程中，虽然start了，但是还是无法访问，这个时候，我尝试在服务器上使用node start,发现端口被占用，但是pm2显示还是启动了(因为项目是一年前写的，不知道是不是因为版本太低了还是什么原因)。。。更换端口，可以访问了….</p>
<p>之前我是想使用ror，但是pg那个gem死活装不上，就还是转用node+mongodb</p>
<h3 id="mongodb的安装"><a href="#mongodb的安装" class="headerlink" title="mongodb的安装"></a>mongodb的安装</h3><pre class="line-numbers language-javascript"><code class="language-javascript"># yum <span class="token operator">-</span>y install mongodb<span class="token operator">-</span>org
# rpm <span class="token operator">-</span>qa <span class="token operator">|</span>grep mongodb              <span class="token comment" spellcheck="true">// 验证安装</span>
# rpm <span class="token operator">-</span>ql mongodb<span class="token operator">-</span>org<span class="token operator">-</span>server         <span class="token comment" spellcheck="true">// 验证安装</span>
# <span class="token operator">/</span>etc<span class="token operator">/</span>init<span class="token punctuation">.</span>d<span class="token operator">/</span>mongod start           <span class="token comment" spellcheck="true">// 启动服务</span>
# netstat <span class="token operator">-</span>nltp<span class="token operator">|</span>grep mongo           <span class="token comment" spellcheck="true">// 查看占用端口</span>
# mongo                              <span class="token comment" spellcheck="true">// 进入数据库</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[refuse-to-overuse-react]]></title>
      <url>/2018/11/05/refuse-to-overuse-react/</url>
      <content type="html"><![CDATA[<p>对于目前三大潮流框架，我先使用的是Angular，用它写了一个购物车，感觉非常好。工作之后，使用的react，用顺手之后，第一解决办法就是想到react，导致有很多过度使用的地方。</p>
<p>这个在原来的基础上，需要做一套和之前的东西功能上完全不一样的东西，于是我暗暗下定决心，尽量不使用react和其它的package…</p>
<p>对于搜索这一块，之前使用react做的，这一次我想要尝试一下使用js去实现…缕了一下，我需要做的</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 请求数据（改变“查看更多”按钮的状态）</span>
<span class="token comment" spellcheck="true">// 处理数据（根据数据生成html片段）</span>
<span class="token comment" spellcheck="true">// 渲染dom（将html插入target dom）</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h4><p>在react 中，通过改变state的状态，js中需要操作button</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// react</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  isFetch<span class="token punctuation">:</span> status
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span><span class="token operator">></span><span class="token punctuation">{</span>status <span class="token operator">?</span> <span class="token string">'加载中'</span> <span class="token punctuation">:</span> <span class="token string">'查看更多'</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// js</span>
$button<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token function">getButtonHTML</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> getButtonHTML <span class="token operator">=</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> status <span class="token operator">?</span> <span class="token string">'加载中'</span> <span class="token punctuation">:</span> <span class="token string">'查看更多'</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h4><p>在react中通过改变state去实现dom的动态插入，react中是写一个组件，js中为了清晰期间，我将每个html片段分成一个文件</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// react</span>
<span class="token keyword">const</span> List <span class="token operator">=</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// js</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>acc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;p></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;p>`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="渲染dom"><a href="#渲染dom" class="headerlink" title="渲染dom"></a>渲染dom</h4><p>react是通过改变status，js是将生成的html fragment插入</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// react</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>oldList<span class="token punctuation">,</span> <span class="token operator">...</span>newList<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// js</span>
$container<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>htmlFragment<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>使用react给我带来的最大感受就是一切组件化，一个问题大变小，是非常容易解决的，组件化可以代码更smart…大胆的去除code的bad smell</p>
<p>明天也是元气满满的一天加油:)</p>
]]></content>
      
        <categories>
            
            <category> react </category>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[get-current-page-qrcode]]></title>
      <url>/2018/10/31/get-current-page-qrcode/</url>
      <content type="html"><![CDATA[<p>小程序中，获得小程序中的某一篇文章的分享图片，识别图片中的小程序码进去当前文章的详情页， 问题是如何获得当前页面的小程序码呢？</p>
<p>微信给提供了三个接口：</p>
<blockquote>
<p>接口 A: 适用于需要的码数量较少的业务场景<br> 生成小程序码，可接受 path 参数较长，生成个数受限，数量限制见 注意事项，请谨慎使用。<br>接口 B：适用于需要的码数量极多的业务场景<br> 生成小程序码，可接受页面参数较短，生成个数不受限。<br>接口 C：适用于需要的码数量较少的业务场景<br> 生成二维码，可接受 path 参数较长，生成个数受限，数量限制见 注意事项。</p>
</blockquote>
<p>其中，第二个接口的中的其中参数最多接受32个字符。第一和第三的生成个数最多是十万张</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>通过小程序的appid和密钥去获得access_token(有效期两个小时)</li>
<li>通过access_token和相应的参数去获得图片的二进制流</li>
<li>将图片的二进制流转换成base64就可以显示了</li>
</ol>
<p>因为需要canvas将小程序码画出来，调试工具上可以画出来base64的图片，但是在android和iPhone都显示不出来…所以前端去获得小程序是不能完成想要的功能的。和后端沟通的结果是：后端去获得图片返回给前端图片的临时地址…</p>
<p>附上代码：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=appid&amp;secret=secret`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      page<span class="token punctuation">:</span> <span class="token string">'你的page'</span><span class="token punctuation">,</span>
      scene<span class="token punctuation">:</span> <span class="token string">'id=2'</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// arrayBufferToBase64</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> 小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[canvas-in-weapp]]></title>
      <url>/2018/10/29/canvas-in-weapp/</url>
      <content type="html"><![CDATA[<p>今天的主要任务是画一个分享的海报，基于之前的一次经验，这次遇到的坑比较少，也更有耐心了🙂️</p>
<ol>
<li><p>canvas中绘制网络图片<br>canvas中的drawImage中的第一个参数是图片的地址，但是不能是网络图片，解决的办法是：先下载下来，再去绘制</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">wx<span class="token punctuation">.</span><span class="token function">downloadFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
url<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>article<span class="token punctuation">.</span>cover_image_url<span class="token punctuation">,</span>
success<span class="token punctuation">:</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>statusCode <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true">// cover</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>tempFilePath<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>给图片来再来个遮罩</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">setFillStyle</span><span class="token punctuation">(</span><span class="token string">'rgba(40, 40, 40, 0.3)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>基于canvas在小程序中的是原生组件实现的，层级高于普通元素，怎么将它隐藏？</p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">opcity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>测试了一下是不可以的….</p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
<span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">10000</span>rpx<span class="token punctuation">;</span> // 给它一个巨大的偏移
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>之前是做了一个切换，需要绘制canvas的时候就显示出来，但是这样会有一个闪烁的效果，所以想着有没有一个能让canvas看不见又能导出图片的方法，方法一在虚拟机上是可行的，但是在真机上canvas是能显示出来的…plan A pass，幸运的是plan B可行….赞</p>
</li>
<li><p>canvas中的最重要是获得canvas的实际高度<br>之前试过直接拿着dom的高度去设置canvas的高度，但是每个手机上的表现是不一样的，有的可能过长，有的可能过短，总之很难预测…canva中排版字体的时候，由于不能自动换行，只能去手动的计算，可能导致的后果是符号显示在行首，正常使用dom的话，通过设置可以避免符号在行首，这样以来，两者对于文字的排版是不一样的，从而高度也是不一样的</p>
</li>
<li><p>补充：在setFillStyle后使用drawImage绘制图片<br>我的图片本来是白的，但是看起来却是灰的，原因竟是我在前面的setFillStyle的操作！！！</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css-rem]]></title>
      <url>/2018/10/25/css-rem/</url>
      <content type="html"><![CDATA[<p>今天在使用rem中发现了一个之前没注意的点</p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">html </span><span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.title</span> </span><span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1.6</span>rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">2.4</span>rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中title的字体大小为16px，但是container的宽度却是28.8px，我算了一下28.8/2.4=1.2，想到浏览器的最小字体是12px，所以我想着可能和最小字体的大小有关系。</p>
<p>于是我尝试将chrome的最小字体设置为最小（比12px还小），发现container的宽度是24px。</p>
<p>去查资料没有找到相应的资料，可以了解的是rem最好使用在font-size上，使用在margin和padding上也会出现和期望不用的值。</p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[two-select-change-one]]></title>
      <url>/2018/10/22/two-select-change-one/</url>
      <content type="html"><![CDATA[<p>今天写了一个方法，被问到这两个查询能改成一个查询吗？</p>
<pre class="line-numbers language-ruby"><code class="language-ruby"><span class="token keyword">def</span> get_producer_name
  str <span class="token operator">=</span> producers<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">{</span> <span class="token operator">|</span>producer<span class="token operator">|</span> producer<span class="token punctuation">.</span>name <span class="token punctuation">}</span>
  str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'等'</span> <span class="token keyword">if</span> producers<span class="token punctuation">.</span>count <span class="token operator">></span> <span class="token number">3</span>
<span class="token keyword">end</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>在上面的代码中，<code>producers.limit(3)</code>和<code>producer.count</code>会进行两次查询，要变成一个查询，肿么办？</p>
<pre class="line-numbers language-ruby"><code class="language-ruby"><span class="token keyword">def</span> get_producer_name
  pros <span class="token operator">=</span> producers<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
  str <span class="token operator">=</span> pros<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">{</span> <span class="token operator">|</span>producer<span class="token operator">|</span> producer<span class="token punctuation">.</span>name <span class="token punctuation">}</span>
  str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'等'</span> <span class="token keyword">if</span> pros<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">3</span>
<span class="token keyword">end</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一次性查出来前四条！这个方式真的很赞👍！是否给了你新的idea🤔️</p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[stimulus-begin]]></title>
      <url>/2018/10/22/stimulus-begin/</url>
      <content type="html"><![CDATA[<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p><a href="https://github.com/stimulusjs/stimulus" target="_blank" rel="noopener">stimulus</a><br>ts作为js的超集，应用率也是非常广泛，在github上看到一个有趣的框架，于是想着从hello word走起，看完栗子有，我尝试写一个列表…</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-controller</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-loader<span class="token punctuation">"</span></span> <span class="token attr-name">data-content-loader-url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/message.html<span class="token punctuation">"</span></span> <span class="token attr-name">data-content-loader-refresh-interval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>list controller<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-controller</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">data-list-initial</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>[<span class="token punctuation">"</span>name<span class="token punctuation">"</span>]<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">data-target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list.text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">data-action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>click-<span class="token punctuation">></span>list#add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list.items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Controller <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'stimulus'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Controller <span class="token punctuation">{</span>
  <span class="token keyword">static</span> targets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token string">'items'</span><span class="token punctuation">,</span> <span class="token string">'item'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInitialItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">get</span> <span class="token function">items</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">set</span> <span class="token function">items</span><span class="token punctuation">(</span>newItems<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> newItems<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>newItems<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">get</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>textTarget<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">getInitialItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'initial'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>itemsTarget<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> acc <span class="token operator">+</span> <span class="token template-string"><span class="token string">`&lt;p data-target="list.item">&lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>&lt;button data-id="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" data-action="click->list#deleteItem">delete&lt;/button>&lt;/p>`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">deleteItem</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> targetIndex <span class="token operator">=</span> event<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token keyword">const</span> newItems <span class="token operator">=</span> <span class="token punctuation">[</span>
      <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> targetIndex<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>targetIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> newItems<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>看起来非常good，于是开始运行，发现死循环了，检查了代码没发现错误，尝试debugger发现程序一直在执行set操作，很纳闷，没执行set呀。找机会问了哟哟，他告诉我，在set中尝试给this.item意味着你在set调用set本身，于是乎，死循环了…</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">get</span> <span class="token function">items</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_items<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">set</span> <span class="token function">items</span><span class="token punctuation">(</span>newItems<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_items <span class="token operator">=</span> newItems<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>newItems<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改成以上代码可以正常工作。</p>
<h4 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h4><p>1、如果以上面的方式进行，我觉得还不如做成面向对象中的set/get….这只是我个人的想法</p>
<ol>
<li>将html写在js中一点都不优雅，我找到了一个<a href="https://github.com/stimulusjs/stimulus/issues/41" target="_blank" rel="noopener">demo</a>，它提供一个更好的方式。</li>
<li>使用stimulus，思维方式和传统的js相似</li>
<li>在stimulus中，数据和元素不是一一对应的，所以在deleteItem中直接删除元素并且改变items的方式会不会比通过数据去改变dom更好一点？虽然二随一变会容易出bug，但是考虑到列表可能会很多，删除一个元素比重新渲染整个列表代价小很多吧…..</li>
</ol>
]]></content>
      
        <categories>
            
            <category> typescript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[whether-to-use-react]]></title>
      <url>/2018/10/14/whether-to-use-react/</url>
      <content type="html"><![CDATA[<p>最近在重构项目中，发现了很多过度使用react的地方，现在想想原因是：1. 时间紧迫 2.被react的状态管理迷花了眼睛，总之是没磨好刀就砍柴了…</p>
<p>又一个左右布局三七分的页面，左边是一堆可以switch check的条件，右边的上部是checked的条件，中间是筛选结果列表，下部是分页。</p>
<p>使用react实现，总之要注意的是对状态的管理。但如果是使用jq实现，我仔细的想了一下，啊，左边和右边上部的数据的一致性可以通过元素选择器来保证，总之，使用jq，没有了一个全局状态，右边需要获得checked的条件，只能通过元素的不同来得到，假如选择的条件改变了，我需要先去获得选择的条件，然后再去改变右边的dom，我该如何去渲染dom，写一个函数，输入变量，输出为html string，咦，这不相当于react component嘛。</p>
<p>总之，使用react去实现是维护的一个全局状态变量，使用jq，是通过dom去得到状态变量…这是我对两种实现方式的认知….至于使用哪一个，还需要了解一下需求…</p>
<p>PS：总之，离开了react，使用js不是一个困难的事情，磨刀呀…</p>
]]></content>
      
        <categories>
            
            <category> react </category>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[reference-equality-and-value-equality]]></title>
      <url>/2018/09/26/reference-equality-and-value-equality/</url>
      <content type="html"><![CDATA[<p>在编程语言世界中通常有两种类型的相等：</p>
<ul>
<li>reference equality</li>
<li>value equality</li>
</ul>
<h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>思考下面的代码：</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span>
    y <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> object2 <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>正如你看到的，<code>object</code>和<code>object2</code>有相同的值。如果你看一下<code>object</code>和<code>object2</code>中的每个键以及它们对应的值，它们是相同的。在object和object2中，<code>x</code>的值是1，<code>y</code>的值是2。</p>
<p>但是当你想要在你的程序中检查object和object2是否相等，你会发现：这两个对象是不一样的。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">object <span class="token operator">==</span> object2 <span class="token comment" spellcheck="true">// false</span>
object <span class="token operator">===</span> object2 <span class="token comment" spellcheck="true">// false</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这是为什么呢？</p>
<h4 id="reference-equality"><a href="#reference-equality" class="headerlink" title="reference equality"></a>reference equality</h4><p>Objects是灰常复杂的数据结构。它们可以有很多key，这些key可以执行不同的值。这些值也可以是objects，所以<strong>objects是可以嵌套的</strong>。</p>
<p>如果你考虑事物的相等行，事实上你需要考虑两件事情：</p>
<ul>
<li>一个事物是否意味着与另一个事物相同？</li>
<li>一个事物与其它东西完全一样？</li>
</ul>
<p>如果我从现实世界中举一个例子：想象一下你有一个红色的跑车，你的邻居也有和你的车一样的车，相同的颜色，相同的发动机，相同的牌子。如果陌生人经过你的家，他们会说：嘿，这些人有相同的车。</p>
<p>但是，你邻居的车不是你的。你不会坐上邻居车，认为这是你的，对吧，或者至少你不应该。如果你撞坏了邻居的车，你可能会有一个不快乐的邻居，当然还有一些法律问题:)</p>
<p>区分你的车和邻居的车的最明显的地方是车牌。</p>
<p>事实上， JavaScript objects的内置了这种“牌照”，每个object的独特特性称为<code>reference</code>（引用）。<br>当你在js中比较object时，它们通过reference比较</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">object <span class="token operator">==</span> object2<span class="token punctuation">;</span>
object <span class="token operator">===</span> object2<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>问题：object和object2是相等吗？实际上你分配变量的时候，也分配了reference。<br>你可以很容易的检查这个：</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">object <span class="token operator">=</span> object2<span class="token punctuation">;</span>
object <span class="token operator">==</span> object2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
object <span class="token operator">===</span> object2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>也会有一些有趣的结果，代码如下：</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">object <span class="token operator">=</span> object2<span class="token punctuation">;</span>
object<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>

object<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 12</span>
object2<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 12</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在这个例子中，你做了一次将<code>x</code>这个key分配给object这个对象。object和object2指向<strong>相同的引用</strong>，所以只要一个变量更改，另一个变量也会更改。</p>
<p>JavaScript中的复杂的数据结构都遵循<code>reference equality</code>的原则，这包括<strong>arrays</strong>和objetcs，实际上通过typeof查看array的类型，得到的结果也是object。</p>
<p><strong>还有一些值像：numbers, strings, booleans or null / undefined，它们都遵循一种相等：value equality。</strong></p>
<h4 id="value-equality"><a href="#value-equality" class="headerlink" title="value equality"></a>value equality</h4><p>像前面说的，reference equality回答的是object1和object2是否一样？这种检查很简单，它们非常有效。</p>
<p>说到Javascript中的<strong>primitives</strong>（这个我也不知道怎么翻译，指的是上面的numbers等，它们是不可以嵌套的。这种不能嵌套其它结构的结构称为<strong>shallow data structures</strong>（浅数据结构）。在这样的结构中，你可以以有效的方式执行value equality。</p>
<p>但是什么是value equality？思考下面的代码：</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span>
    y <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>在相等方面，数字是最简单的。你可以清楚的说x变量的值等于y变量的值（12在数学中等于12）但是如果这些变量遵循reference equality，它们是不一样的，因为它们是在不同的地方创建的。所以它们的引用是不同的。x的12可能是和y的12是不一样的。这真是太乱了。</p>
<p>幸运的是，members在JavaScript中是primitives，primitives在javascri中使用的是value equality进行比较。<br>所以看到这是不奇怪的：</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">x <span class="token operator">==</span> y<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
x <span class="token operator">===</span> y<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>value equality回答的是这个疑问：一个事物是否意味着与另一个事物相同？</p>
<p>嵌套的数据结构是的相等更加难以比较。Objects有任意的key和value，它可以包含其他的objects。为了比较两个objects的相等，你可能需要下面的算法：</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">/</span> Input<span class="token punctuation">:</span> an object1 and object2
<span class="token comment" spellcheck="true">// Output: true if an object1 is equal in terms of values to object2</span>

<span class="token function">valueEqual</span><span class="token punctuation">(</span>object1<span class="token punctuation">,</span> object2<span class="token punctuation">)</span><span class="token punctuation">:</span>
  object1keys <span class="token operator">=</span> <span class="token operator">&lt;</span>list <span class="token keyword">of</span> keys <span class="token keyword">of</span> object1<span class="token operator">></span>
  object2keys <span class="token operator">=</span> <span class="token operator">&lt;</span>list <span class="token keyword">of</span> keys <span class="token keyword">of</span> object2<span class="token operator">></span>

  <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token keyword">if</span> <span class="token function">length</span><span class="token punctuation">(</span>object1keys<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">length</span><span class="token punctuation">(</span>object2keys<span class="token punctuation">)</span>

  <span class="token keyword">for</span> each key <span class="token keyword">in</span> object1keys<span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token keyword">if</span> key not <span class="token keyword">in</span> object2keys
    <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token keyword">if</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>object1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>object2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> object1<span class="token punctuation">[</span>key<span class="token punctuation">]</span> is an object<span class="token punctuation">:</span>
      keyEqual <span class="token operator">=</span> <span class="token function">valueEqual</span><span class="token punctuation">(</span>object1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> object2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token keyword">if</span> keyEqual <span class="token operator">!=</span> <span class="token boolean">false</span>

    <span class="token keyword">if</span> object1<span class="token punctuation">[</span>key<span class="token punctuation">]</span> is a primitive<span class="token punctuation">:</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token keyword">if</span> object1<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!=</span> object2<span class="token punctuation">[</span>key<span class="token punctuation">]</span>

  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>呼，这里面有好多相等检查，这是一个递归算法。它在比较两个object是会执行上千次相等检查，这样的相等检查通常被称作 <strong>deep equality checks</strong>（深比较）。<br>更糟糕的是，这个算法是不会完成的。这是因为你可能创建了<strong>循环的引用对象</strong>。</p>
<p>PS：<a href="http://reactkungfu.com/2015/08/pros-and-cons-of-using-immutability-with-react-js/" target="_blank" rel="noopener">参考链接</a></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[immutable-data]]></title>
      <url>/2018/09/25/immutable-data/</url>
      <content type="html"><![CDATA[<p>项目中的apollo主要是用的分页这个功能，但是我在check代码的时候，发现了每次我向列表中push了一个数据，整个列表是全部re-render!!!假如每个是十条数据，等我滑到第十页的时候，100个item是全部re-render的…我去查apollo fetch updata 没有找到结果，我向react-apollo提了issue，感谢G友captDaylight给我的回复。</p>
<blockquote>
<p>When you update an item in a list with immutablility helper its returning a brand new array, so it’ll have a new reference. So that list in React’s eyes is completely new, even if structurally most of the items in the array are the same. Thus each item will be re-rendered.</p>
</blockquote>
<p>开始，我的重点是放在immutablility-helper，但是查了好久也没找到why</p>
<p>这个时候，我查了项目中使用state的列表，发现它只会re-render新增的数据，于是我使用redux来渲染list，发现它也是全部re-render所有item。state和redux的差异在哪？redux中使用的是immutable data，于是我去查文档。</p>
<h5 id="1-What-are-the-benefits-of-immutability"><a href="#1-What-are-the-benefits-of-immutability" class="headerlink" title="1. What are the benefits of immutability"></a>1. What are the benefits of immutability</h5><p>immutability可以为你的应用程序带来更高的性能，并且可以简化变成和调试。在整个应用程序中，从不会更改的数据比可以随意更改的数据更容易理解。</p>
<p>特别的，Web应用程序环境中的不变性可以使复杂的变更检测变得更简单和廉价，确保计算成本高昂的DOM更新过程只发生在绝对必要的时候（这是React相对于其他库性能改进的基石）。</p>
<h5 id="2-Why-is-immutability-required-by-Redux"><a href="#2-Why-is-immutability-required-by-Redux" class="headerlink" title="2. Why is immutability required by Redux?"></a>2. Why is immutability required by Redux?</h5><ul>
<li>Redux和React-Redux都使用浅等式检查。尤其是：<ul>
<li>Redux的combineReducers实用程序浅层检查由它调用的reducer引起的引用变化。</li>
<li>React-Redux的connect方法生成的组件浅层地检查对根状态的引用更改，以及来自mapStateToProps函数的返回值，以查看包装的组件是否实际需要re-render</li>
</ul>
</li>
<li>immutable data的管理最终使数据更安全</li>
<li>Time-travel debugging要求reducers是没有副作用的纯函数，因此你可以在不同的状态之间正确跳转。</li>
</ul>
<h5 id="3-Why-does-Redux’s-use-of-shallow-equality-checking-require-immutability"><a href="#3-Why-does-Redux’s-use-of-shallow-equality-checking-require-immutability" class="headerlink" title="3. Why does Redux’s use of shallow equality checking require immutability?"></a>3. Why does Redux’s use of shallow equality checking require immutability?</h5><p>如果要正确的更新任何connected组件，Redux使用 shallow equality checking（浅检查），要了解原因，我们需要了解 shallow equality checking和deep equality checking（深检查）之前的区别。<br>两者的区别是：shallow equality checking只是简单的检查两个不同的变量是否是相同的引用；相反，deep equality checking必须检查两个对象属性的每个值。</p>
<h5 id="4-How-does-Redux-use-shallow-equality-checking？"><a href="#4-How-does-Redux-use-shallow-equality-checking？" class="headerlink" title="4. How does Redux use shallow equality checking？"></a>4. How does Redux use shallow equality checking？</h5><p>Redux在combineReducers函数中使用浅等式检查来返回根状态对象的新变异副本，或者，如果没有进行任何突变，则返回当前根状态对象。</p>
<h5 id="5-How-does-React-Redux-use-shallow-equality-checking"><a href="#5-How-does-React-Redux-use-shallow-equality-checking" class="headerlink" title="5.How does React-Redux use shallow equality checking?"></a>5.How does React-Redux use shallow equality checking?</h5><p>当根状态对象的引用改变时，对于有mapStateToProps的组件，检查mapStateToProps的返回值，如果返回值不变，则组件不会re-render。</p>
<p>对于下面这个组件，如果state.todos和getVisibleTodos返回的值不变时，这个组件不会re-render</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">mapStateToProps</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    todos<span class="token punctuation">:</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// prop value</span>
    visibleTodos<span class="token punctuation">:</span> <span class="token function">getVisibleTodos</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// selector</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
​
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>TodoApp<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于下面这个组件，始终会re-render，因为todos的值始终是新对象，无论它的值是否更改</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// AVOID - will always cause a re-render</span>
<span class="token keyword">function</span> <span class="token function">mapStateToProps</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// todos always references a newly-created object</span>
    todos<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      all<span class="token punctuation">:</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">,</span>
      visibleTodos<span class="token punctuation">:</span> <span class="token function">getVisibleTodos</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
​
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>TodoApp<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="6-如何避免不必要的render？"><a href="#6-如何避免不必要的render？" class="headerlink" title="6. 如何避免不必要的render？"></a>6. 如何避免不必要的render？</h5><p>和shouldComponentUpdate搭配使用，PS:shouldComponentUpdate返回的值是建议性的，所以在组件中你返回false，组件有可能re-render。</p>
]]></content>
      
        <categories>
            
            <category> react </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[high-oreder-component-tip]]></title>
      <url>/2018/09/20/high-oreder-component-tip/</url>
      <content type="html"><![CDATA[<h4 id="question"><a href="#question" class="headerlink" title="question"></a>question</h4><p>今天遇到了一个问题：写了一个高阶组件，使用的时候竟然告诉我props is required, but it is undefined???</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// FormWrapper.jsx</span>
<span class="token keyword">const</span> FormWrapper <span class="token operator">=</span> initialState <span class="token operator">=</span><span class="token operator">></span> Component <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">class</span> <span class="token class-name">FormInnerWrapper</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    state <span class="token operator">=</span> initialState

    checkFeildValid <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// ...</span>
    <span class="token punctuation">}</span>

    changeValue <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// ...</span>
    <span class="token punctuation">}</span>

    isFormValidate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// ...</span>
    <span class="token punctuation">}</span>

    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token operator">&lt;</span>Component data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">}</span> changeValue<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeValue<span class="token punctuation">}</span> isFormValidate<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>isFormValidate<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> FormInnerWrapper<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

FormWrapper<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
  initialState<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>object<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> FormWrapper<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// MyForm.jsx</span>
@<span class="token function">FormWrapper</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  xxx<span class="token punctuation">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span>
  xxxx<span class="token punctuation">:</span> <span class="token string">'xxx'</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">MyForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span>

MyForm<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
  isFormValidate<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>
  data<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>object<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>
  changeValue<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> MyForm<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>react给我三个warning：</p>
<pre class="line-numbers language-js"><code class="language-js">The prop <span class="token template-string"><span class="token string">`data`</span></span> is marked <span class="token keyword">as</span> required <span class="token keyword">in</span> FormInnerWrapper<span class="token punctuation">,</span> but it is undefined<span class="token punctuation">.</span>
The prop <span class="token template-string"><span class="token string">`isFormValidate`</span></span> is marked <span class="token keyword">as</span> required <span class="token keyword">in</span> FormInnerWrapper<span class="token punctuation">,</span> but it is undefined<span class="token punctuation">.</span>
The prop <span class="token template-string"><span class="token string">`changeValue`</span></span> is marked <span class="token keyword">as</span> required <span class="token keyword">in</span> FormInnerWrapper<span class="token punctuation">,</span> but it is undefined<span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h4><p>我检查了代码，发现我没有对FormInnerWrapper定义propTypes， 我只对MyForm进行了propTypes定义。我尝试给MyForm加上defaultProps,其中data的default值为null，在调试的时候发现data的值永远为null, 不会去改变🤔️。发生了什么？</p>
<h4 id="plan-B"><a href="#plan-B" class="headerlink" title="plan B"></a>plan B</h4><p>于是我尝试了下面的格式：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// MyForm.jsx</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">FormWrapper</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  xxx<span class="token punctuation">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span>
  xxxx<span class="token punctuation">:</span> <span class="token string">'xxx'</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>MyForm<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>发现没有warning。</p>
<h4 id="why"><a href="#why" class="headerlink" title="why"></a>why</h4><p>装饰器的写法是从左到右执行？？？<br>第二种写法比较符合正常的调用顺序？？<br>我需要再去查decorator与HOC的具体区别…<br>PS: 上次的immutable data疑问，在今天终于得到了解决，下一篇见～</p>
]]></content>
      
        <categories>
            
            <category> react </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[stateless-component-vs-pure-component]]></title>
      <url>/2018/09/13/stateless-component-vs-pure-component/</url>
      <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="1-stateless-component"><a href="#1-stateless-component" class="headerlink" title="1. stateless component"></a>1. stateless component</h4><p><strong>stateless component</strong>声明为一个没有<code>state</code>的function</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> Article <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token comment" spellcheck="true">// ...</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>react的文档中这样说到：</p>
<blockquote>
<p>These components must not retain internal state, do not have backing instances, and do not have the component lifecycle methods. They are pure functional transforms of their input, with zero boilerplate. However, you may still specify .propTypes and .defaultProps by setting them as properties on the function, just as you would set them on an ES6 class.</p>
</blockquote>
<h4 id="2-pure-component"><a href="#2-pure-component" class="headerlink" title="2. pure component"></a>2. pure component</h4><p><strong>pure component</strong>是最大的意义是优化React应用的性能。使用PureComponent可以大大的提高性能，因为它减少<code>render</code>的次数。</p>
<h4 id="3-对比两者的性能"><a href="#3-对比两者的性能" class="headerlink" title="3. 对比两者的性能"></a>3. 对比两者的性能</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Welcome</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Welcome<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Hello <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上例子是一个非常简单的<code>Welcome</code>(Pure Component)和<code>Hello</code>(Stateless Component)。<strong>当你在父组件中使用它们，你会发现当父组件<code>re-render</code>时，<code>Hello</code>就会<code>re-render</code>，但是<code>Welcome</code>就不会</strong>。</p>
<p>这是因为<strong>PureComponent</strong>改变了生命周期中的<strong>shouldComponentUpdate</strong>方法，并且添加了一些逻辑用来自动检查组件是否需要<code>re-render</code>。这允许<code>PureComponent</code>仅仅在检测到<code>state</code>或者<code>props</code>改变时，才会调用render方法。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="1-什么时候使用Pure-Component"><a href="#1-什么时候使用Pure-Component" class="headerlink" title="1. 什么时候使用Pure Component"></a>1. 什么时候使用Pure Component</h4><p>假如你创建一个字典的页面，在该页面中显示所有以A开头的单词的含义。这个时候，你可以写一个接收props为heading和meaning并返回视图的组件。假如你使用分页每次只显示10个单词，当滚动时，再去请求另外10个单词并且在父组件中更新<code>state</code>。在这种情况下，应该使用Pure Component，它将会避免render之前请求到的所有单词。</p>
<p>此外，在你要使用Component的生命周期函数时，你必须使用<code>Pure Components</code>，因为<code>stateless components</code>没有生命周期函数。</p>
<h4 id="2-什么时候使用Stateless-Component"><a href="#2-什么时候使用Stateless-Component" class="headerlink" title="2. 什么时候使用Stateless Component"></a>2. 什么时候使用Stateless Component</h4><p>假如你想要创建一个漂亮UI的lable用来评估个人资料的可信度，例如初学者，中级，高级。由于它是一个很小的组件，其重新渲染几乎没有任何区别，并为这种small case创建一个新的组件将是耗时的。如果你继续为很小很小的view创建组件，很快，你将会遇到更多的组件，在一个大型项目中，它们会变得很难管理。同时应该牢记Pure Component具有<strong>shallowEqual</strong>（浅比较）的特性。</p>
<h4 id="3-结论"><a href="#3-结论" class="headerlink" title="3. 结论"></a>3. 结论</h4><p>Pure Components会使性能大幅提升，因为它减少了应用中render的次数。这对于一份复杂的UI是个巨大的胜利，因此建议尽可能的使用。此外还有一些情况需要使用生命周期函数，在这种情况下，我们不能使用stateless components。</p>
<p>Stateless Components可以简单而快速的实现。这对于一个re-render代价小的非常小的UI视图是很好的。它们提供更清晰的代码和更少的文件来处理。它最好的使用场景应该是在父组件为Pure Component或者HOC中使用。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>项目中使用的<code>Apollo</code>，我尝试将stateless component改为pure component，但是组件还是会re-render。Apollo中数据是<code>immutiable</code>，并且每个item在list中都有key，但是不知道为什么还是会重新渲染，十分纳闷啊。我已经提了issue，期待有答复～如果找不到好的方法来解决，我只能为每个pure comoponent增加shouldComponentUpdate了…</p>
<p><a href="https://medium.com/groww-engineering/stateless-component-vs-pure-component-d2af88a1200b" target="_blank" rel="noopener">参考链接</a></p>
]]></content>
      
        <categories>
            
            <category> react </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react-blog]]></title>
      <url>/2018/09/08/react-blog/</url>
      <content type="html"><![CDATA[<h4 id="react的生命周期"><a href="#react的生命周期" class="headerlink" title="react的生命周期"></a>react的生命周期</h4><p><img src="http://res.cloudinary.com/dwudaridr/image/upload/v1536418494/react%E7%BB%84%E4%BB%B6%E5%91%A8%E6%9C%9F_jwteiz.png" alt="image"></p>
<h4 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h4><ol>
<li><p>ajax为什么不在componentWillMount进行，而在componentDidMount中进行？<br>ajax是一个异步操作，在render调用之前，不会在一步操作中返回数据，这意味着组件将使用default数据呈现至少一次；同时，在异步操作的callback中更新state不会触发re-render。另外，没有办法在等到返回数据后再去掉用render。<br>react文档建议到：componentDidMount会在组件挂载后立即调用，需要dom节点的初始化应放在这里。如果你想远程获得数据，这是实例化网络请求的好地方。在这个方法中，调用setState这个方法会触发额外的render，它保证会在同一时间刷新，意为：即使你在这个情况下中调用render两次，用户不会看到中间的状态。</p>
</li>
<li><p>componentWillReceiveProps会执行一次还是多次？<br>多次，所以你在这个使用这个方法时，需要比较current props和 next props。</p>
</li>
<li><p>setState是同步的还是异步的？<br>异步。setState会触发re-render，如果是同步的话，可能会导致浏览器无反应。异步是为了获得更好的UI体验和性能。</p>
</li>
<li><p>Component和PureComponent的区别？<br>PureComponent在shouldComponentUpdate中对props进行浅比较，而Component则进行深比较。</p>
</li>
<li><p>react的事件机制<br>react中的事件在真实DOM中是全部挂在以事件代理的方式挂在document上面，事件代理的机制是事件冒泡。这是在react的事件中使用原生的阻止事件冒泡不起作用的原因。</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> react </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[weapp-tip]]></title>
      <url>/2018/09/01/weapp-tip/</url>
      <content type="html"><![CDATA[<ol>
<li><p>如果你使用了<code>canvas</code> 、<code>map</code>类的组件，因为小程序是使用原生控件，无论你是怎样调整<code>z-index</code>，都不可能覆盖到这类组件上。网传的<code>z-index</code>设置为<code>1000</code>以上，经过实践是不起作用的。请使用<code>cover-view</code>。但是<code>cover-view</code>无法增加shadow和border。border可以通过使用<code>cover-view</code>的背景色来代替。shadow可以使用<code>cover-image</code>来代替。</p>
</li>
<li><p>正确的选择<code>scroll-view</code>和<code>page</code>。两者都能实现下拉刷新，上拉加载。通过业务，选择最适合的方案。</p>
</li>
<li><p>自定义导航栏时，通过<code>getSystemInfo</code>得到<code>statusBarHeight</code>在页面上使用px定义，而不是rpx来定义。</p>
</li>
<li><p>自定义导航栏时，如果有监控page的滚动的需求，请选择<code>scroll-view</code>来实现。在使用<code>onPageScroll</code>时，在iphonex上会导致上方自定义的导航栏抖动。测试的时候，会看到页面滚动时，iphonex上方有1px的空隙….</p>
</li>
<li><p>小程序在<code>iphonex</code>的下方的安全边距为<code>68rpx</code></p>
</li>
<li><p>ios上会有自带的橡皮筋效果，记得保证页面下部的颜色与page的背景色相同</p>
</li>
<li><p>如果想实现保存图片的功能，需要通过canvas去画出图片，canvas的高度需要按照实际的内容计算出来。</p>
</li>
<li><p>待续…</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[joker-weapp]]></title>
      <url>/2018/08/28/joker-weapp-4/</url>
      <content type="html"><![CDATA[<p>今天遇到的一个问题是：在页面滚动过程中，可能会导致fixed的元素被遮盖住（偶尔），这个bug早在17年就被提及，但是到现在还没有修复…</p>
<p>键盘弹起对于页面有两个选择，是否推起页面，尴尬的是推起页面，页面会滑动；不推起页面，动态改变fixed的元素的bottom，也很尴尬；不知道有没有好的办法；</p>
<p>建议小程序出一个设计趋势，很多坑的出现是因为在小程序中使用和app等同的效果，生态局限性对开发者是一个很大的挑战，也是一个巨浪费时间的开发过程…</p>
]]></content>
      
        <categories>
            
            <category> 小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mixed-talk-1]]></title>
      <url>/2018/08/26/mixed-talk-1/</url>
      <content type="html"><![CDATA[<p>今天读到一本书，其中有一句话很有感触：</p>
<blockquote>
<p>我们很容易沉浸在技术里，而忽略了生命的真谛。</p>
</blockquote>
<p>当然这不是一本讲技术的书，但它成功的引起了我的注意。</p>
<p>人生处处是矛盾，人以主观意识来认识别人，但主观意识又会影响你对对方现在的感觉。士别三日刮目相看，即是处理矛盾的一种方式，以主观并且发展的眼光看待别人。</p>
<p>大一大二的课程最主要的是学习语言与算法。大三的课程是来学习关于产品和测试的。由于大三的可能比较偏重于理论，所以对待起来不是太看重。如此一来，等到毕业答辩的时候，矛盾就凸显出来了。</p>
<p>对待毕业项目来说，我是抱着一定要用到最新的技术来的。我使用express搭了一个框架，使用mongodb作为数据库。继而，手机端适应inoic做了一个webapp，当时觉得自己的目的已经达到了，我尝试使用了比较流行的技术做出来了一个还能看的demo（那时候的整体逻辑很是简单，现在一看到处是bug，看上去比较无组织无纪律）。在小组答辩，老师会注重看你的demo，进入大组后，评委就注重论文了。在我答辩完，评委问我：有人在用吗？我说没有。之所以我把它叫做demo，我就没把它当作一个产品来对待。但是评委们要的是一个产品，他们不会care你用了什么技术，他们只是要一个结果：成熟的产品。这是一个很矛盾的事情，究其原因，就是二者的关注点不同，我关注的是技术，对方关注的是一个成熟的产品，关注点不同，最后出现矛盾是一个再正常不过的是事情。总之，这是我遇到的第一件充满矛盾的事情。</p>
<p>最近遇到的一件事是，黑发（暂且这么叫吧，因为他的头发真的好多啊）问了我一切基础的问题。虽然自身没有为这些问题做任何准备，但是想着应该也能答上来吧。印象最深刻的问题是时间委托的机制，emmm，当时对这个问题手足无措，我最先想到的是设计模式。我说的是一塌糊涂，现在想想是在瞎扯。接着又问我委托的原理，依然一脸懵逼，我问了答案：事件冒泡。啊，我怎么把这么基础的给忘了呢。。。总之给我带来的冲击很大。结果又问我jsonp的机制，我又是一脸懵逼，黑发很震惊：你是真不知道还是假不知道…我排斥跨域，所以就没有了解过…黑发告诉我跨域这种场景还是很常见的，即使你排斥，但也需要了解它…</p>
<p>经过这次交谈，我不仅想，我到底做了些什么…</p>
<p>想了想大部分的工作时间都在写业务，业余的时间，自己就捣鼓一些小东西或者看一些书，拓展思维。大部分的时间，都在想着解决问题。例如事件委托，我是把它当作一个解决方法来看，当我遇到类似的问题，我会想到用这个方法来解决…我仅仅把它当作一个答案来看…渐渐的，我忘了本质。这个时候忽然想到在大学的时候，有位院长给我们上课，讲的内容也很是高深，根本就听不懂啊。我把这种现象称之为：title越高，就渐渐的忽略了最基础的东西。这与我现在的状况，不谋而合。</p>
<p>在技术的长河中，不仅需要积极的寻找解决问题的方法，还需要了解技术的本质。</p>
<p>这是今天的杂谈，明天也是元气满满的一天哦，不对，已经明天了，今天也是元气满满的一天哦😄</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[joker-xiaochengxu-3]]></title>
      <url>/2018/08/24/joker-weapp-3/</url>
      <content type="html"><![CDATA[<p>如何自定义导航栏？</p>
<p>这个需求的来源是：我向朋友转发了小程序中的页面，对方打开后，左上角是没有返回按钮的，这时候，右上角有一个去主页的标志是很合适的…</p>
<ol>
<li><p>app.json中设置属性: navigationStyle<br>这意味着你的小程序是全屏显示的，title，还有左上角的路由状态需要自己去处理</p>
</li>
<li><p>每个设备的上面的statusbar的高度是不一样的，自制的导航栏的高度就是未知的，这个只能通过getSystemInfo去获得</p>
</li>
<li><p>需要对之前的fixed做一下处理，还是需要statusbar的值，设置margin-top</p>
</li>
</ol>
<p>目前是这样的一个思路，暂时没发现其它的问题…<br>顺便吐槽一句，小程序的开发者是经历过从C++转到python嘛….</p>
]]></content>
      
        <categories>
            
            <category> 小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[joker-xiaochengxu-2]]></title>
      <url>/2018/08/24/joker-weapp-2/</url>
      <content type="html"><![CDATA[<p>如何在小程序里面保存图片？</p>
<h4 id="plan"><a href="#plan" class="headerlink" title="plan"></a>plan</h4><p>小程序可以将canvas保存成一张图片。现在主要的任务是将canvas中的内容画出来<br>web端有一个叫做html2canvas，对于小程序，暂时没有找到相似的工具库…只能自己来画了<br>目前，需要画出来的是：</p>
<ol>
<li>背景纹理</li>
<li>title</li>
<li>图片</li>
</ol>
<h4 id="progress"><a href="#progress" class="headerlink" title="progress"></a>progress</h4><h5 id="设置画布的大小"><a href="#设置画布的大小" class="headerlink" title="设置画布的大小"></a>设置画布的大小</h5><pre class="line-numbers language-javascript"><code class="language-javascript">ctx<span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里的遇到的问题，如何得到画布的高度…<del>我先用html写出来结构，得到内容的高度</del>，另一种方法是先去计算，emmm…这种方法还没想好思路</p>
<p><strong>8-27更新</strong>：使用html的高度，和canvas画出来的排版不一样，不同的手机上的排版还不一样，最后导致的问题是在不同的手机上导出的图片要不是过短要不就是下面长出一截，最好还是一个一个元素的计算吧，确定每个元素的起点的y坐标</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">heightInfo<span class="token punctuation">.</span>hrTop <span class="token operator">=</span> heightInfo<span class="token punctuation">.</span>xxxxxTop <span class="token operator">+</span> titleInfo<span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">;</span>
heightInfo<span class="token punctuation">.</span>xxxxTop <span class="token operator">=</span> heightInfo<span class="token punctuation">.</span>hrTop <span class="token operator">+</span> <span class="token number">24</span><span class="token punctuation">;</span>
heightInfo<span class="token punctuation">.</span>xxxTop <span class="token operator">=</span> heightInfo<span class="token punctuation">.</span>xxxxTop <span class="token operator">+</span> <span class="token number">14</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">;</span>
heightInfo<span class="token punctuation">.</span>xxxxTop <span class="token operator">=</span> heightInfo<span class="token punctuation">.</span>xxxTop <span class="token operator">+</span> xxxInfo<span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token number">36</span><span class="token punctuation">;</span>
heightInfo<span class="token punctuation">.</span>xxxxTop <span class="token operator">=</span> heightInfo<span class="token punctuation">.</span>xxxxTop <span class="token operator">+</span> <span class="token number">90</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> heightInfo<span class="token punctuation">.</span>xxxxTop <span class="token operator">+</span> <span class="token number">14</span> <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在这个过程中可以直接将多行字符串分割….还有一个将数字定义成常量</p>
<hr>
<h5 id="画背景纹理，每隔10画一条横线，竖线"><a href="#画背景纹理，每隔10画一条横线，竖线" class="headerlink" title="画背景纹理，每隔10画一条横线，竖线"></a>画背景纹理，每隔10画一条横线，竖线</h5><p>这个是重复画线的一个过程</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">drawLine<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fromX<span class="token punctuation">,</span> fromY<span class="token punctuation">,</span> toX<span class="token punctuation">,</span> toY<span class="token punctuation">,</span> lineWidth <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">setLineWidth</span><span class="token punctuation">(</span>lineWidth<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>fromX<span class="token punctuation">,</span> fromY<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>toX<span class="token punctuation">,</span> toY<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>

<span class="token comment" spellcheck="true">// ....</span>
<span class="token keyword">const</span> step <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> countX <span class="token operator">=</span> width <span class="token operator">/</span> step<span class="token punctuation">;</span>
<span class="token keyword">const</span> countY <span class="token operator">=</span> height <span class="token operator">/</span> step<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> countX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">drawLine</span><span class="token punctuation">(</span>i <span class="token operator">*</span> step<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">*</span> step<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> countY<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">*</span> step<span class="token punctuation">,</span> width<span class="token punctuation">,</span> i <span class="token operator">*</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="title"><a href="#title" class="headerlink" title="title"></a>title</h5><p>涉及到文字换行，canvas不能主动对超出的文字做换行处理，处理的方法是拿到字符片段长度与最大宽度依次比较</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arrText <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> line <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> arrText<span class="token punctuation">.</span>length<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> testLine <span class="token operator">=</span> line <span class="token operator">+</span> arrText<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> metrics <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">measureText</span><span class="token punctuation">(</span>testLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> testWidth <span class="token operator">=</span> metrics<span class="token punctuation">.</span>width<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>testWidth <span class="token operator">></span> maxWidth <span class="token operator">&amp;&amp;</span> n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 超出一行，打印</span>
    ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    line <span class="token operator">=</span> arrText<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    y <span class="token operator">+</span><span class="token operator">=</span> lineHeight<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    line <span class="token operator">=</span> testLine<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h5><p>这个涉及到居中显示</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 计算出图片的起始点即可</span>
<span class="token comment" spellcheck="true">// use drawImage</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="过程中遇到的问题"><a href="#过程中遇到的问题" class="headerlink" title="过程中遇到的问题"></a>过程中遇到的问题</h4><p>canvas的层级过高，会遮盖view元素，解决办法是使用：croll-view<br>另一个问题是：croll-view设置border或者box-shadow不起作用，次而求之，再用一个croll-view假装边框吧….</p>
]]></content>
      
        <categories>
            
            <category> 小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[joker-xiaochengxu]]></title>
      <url>/2018/08/17/joker-xiaochengxu/</url>
      <content type="html"><![CDATA[<p>在这个可爱的节日里，让我来说说，写小程序的坑～</p>
<p>对小程序的期待就像对vue的期待一样，看着文档就能写…可是，我踩了一个又一个的坑…</p>
<h4 id="textarea的padding问题"><a href="#textarea的padding问题" class="headerlink" title="textarea的padding问题"></a>textarea的padding问题</h4><p>为<code>textarea</code>设定了上下12rpx的内边距，在安卓机上十分完美，但是从测试那边反馈的结果是：框太高了…于是就去看看网上的讨论，在这吐槽一下，度娘真的是用中文都检索不出来结果…查了结果之后，发现textarea的内边距在安卓和iOS上的差别很大…我有以下方案：</p>
<ol>
<li>不使用<code>textarea</code>的内边距，外面套一层view，为view添加内边距。实践的结果是：不行。看到有答案说：<code>textarea</code>使用的原生组件，任何<code>padding</code>、<code>line-height</code>都对此不起作用</li>
<li>为<code>view</code>设置<code>box-sizing: border-box</code>，这么一设置，<code>textarea</code>的<code>auto-height</code>都不起作用了，扎心…</li>
<li>没办法了，我只能去区别手机系统了：<pre class="line-numbers language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">getSystemInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
success<span class="token punctuation">:</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>model<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">'iPhone X'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>isIphoneX <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>platform <span class="token operator">===</span> <span class="token string">'ios'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>isAndroid <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
view层通过判断<code>getApp().globalData.isAndroid</code>的值，如果为<code>true</code>，则加padding，否则，不加 padding。</li>
</ol>
<h4 id="iphone的橡皮筋效果"><a href="#iphone的橡皮筋效果" class="headerlink" title="iphone的橡皮筋效果"></a>iphone的橡皮筋效果</h4><p>如果你的页面有header、body、footer，header是白色，body是灰色，footer是白色，page本身是灰色，那么你在iphone上上拉页面，会看到灰中一块白，如何去调整，当然是遮盖再遮盖…这个效果，体验特别差…</p>
<h4 id="iphone-X的安全边距"><a href="#iphone-X的安全边距" class="headerlink" title="iphone X的安全边距"></a>iphone X的安全边距</h4><p>找到的资料是安全边距是<code>68rpx</code>，这个时候，如果你有一个固定到下方的<code>footer</code>，和出现上面的问题，那么一定得好好想想如何去遮遮遮…</p>
<h4 id="input和textarea的选择"><a href="#input和textarea的选择" class="headerlink" title="input和textarea的选择"></a>input和textarea的选择</h4><p><code>textarea</code>有一个<code>auto-height</code>的属性，可以自动根据内容去改变高度；但是<code>input</code>有手机键盘会有完成而不是回车的键，同时也会有一个点击完成键盘不收起的选项；总之你可以根据这两个特性去选择你需要的组件，加入需要<code>input</code>的属性，又需要<code>textarea</code>的属性，<code>input</code>是最好的选择…以我的经验来说</p>
<h4 id="页面即有上拉加载又有下拉刷新"><a href="#页面即有上拉加载又有下拉刷新" class="headerlink" title="页面即有上拉加载又有下拉刷新"></a>页面即有上拉加载又有下拉刷新</h4><p>一定要选用<code>Page</code>的特性，而不是<code>scroll-view</code></p>
<h4 id="打开键盘是否推起页面"><a href="#打开键盘是否推起页面" class="headerlink" title="打开键盘是否推起页面"></a>打开键盘是否推起页面</h4><p>先考虑不推起页面，再考虑推起页面…因为推起页面显得特别不自然….</p>
<h4 id="得到globalData中的值"><a href="#得到globalData中的值" class="headerlink" title="得到globalData中的值"></a>得到globalData中的值</h4><p>如果你想以下面的格式来得到<code>globalData</code>的值，可能会出乎你的意料</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    isIphoneX<span class="token punctuation">:</span> app<span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>isIphoneX<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 同步得到，可以得到正确的值</span>
    isLogin<span class="token punctuation">:</span> app<span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>isLogin<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 异步得到，得不到正确的值</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>没办法，我只能在<code>page</code>的<code>onload</code>中再重新赋值一次….</p>
<p>8-17，先写到这…</p>
]]></content>
      
        <categories>
            
            <category> 小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[joker-xiaochengxu]]></title>
      <url>/2018/08/17/joker-weapp/</url>
      <content type="html"><![CDATA[<p>在这个可爱的节日里，让我来说说，写小程序的坑～</p>
<p>对小程序的期待就像对vue的期待一样，看着文档就能写…可是，我踩了一个又一个的坑…</p>
<h4 id="textarea的padding问题"><a href="#textarea的padding问题" class="headerlink" title="textarea的padding问题"></a>textarea的padding问题</h4><p>为<code>textarea</code>设定了上下12rpx的内边距，在安卓机上十分完美，但是从测试那边反馈的结果是：框太高了…于是就去看看网上的讨论，在这吐槽一下，度娘真的是用中文都检索不出来结果…查了结果之后，发现textarea的内边距在安卓和iOS上的差别很大…我有以下方案：</p>
<ol>
<li>不使用<code>textarea</code>的内边距，外面套一层view，为view添加内边距。实践的结果是：不行。看到有答案说：<code>textarea</code>使用的原生组件，任何<code>padding</code>、<code>line-height</code>都对此不起作用</li>
<li>为<code>view</code>设置<code>box-sizing: border-box</code>，这么一设置，<code>textarea</code>的<code>auto-height</code>都不起作用了，扎心…</li>
<li>没办法了，我只能去区别手机系统了：<pre class="line-numbers language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">getSystemInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
success<span class="token punctuation">:</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>model<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">'iPhone X'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>isIphoneX <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>platform <span class="token operator">===</span> <span class="token string">'ios'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>isAndroid <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
view层通过判断<code>getApp().globalData.isAndroid</code>的值，如果为<code>true</code>，则加padding，否则，不加 padding。</li>
</ol>
<h4 id="iphone的橡皮筋效果"><a href="#iphone的橡皮筋效果" class="headerlink" title="iphone的橡皮筋效果"></a>iphone的橡皮筋效果</h4><p>如果你的页面有header、body、footer，header是白色，body是灰色，footer是白色，page本身是灰色，那么你在iphone上上拉页面，会看到灰中一块白，如何去调整，当然是遮盖再遮盖…这个效果，体验特别差…</p>
<h4 id="iphone-X的安全边距"><a href="#iphone-X的安全边距" class="headerlink" title="iphone X的安全边距"></a>iphone X的安全边距</h4><p>找到的资料是安全边距是<code>68rpx</code>，这个时候，如果你有一个固定到下方的<code>footer</code>，和出现上面的问题，那么一定得好好想想如何去遮遮遮…</p>
<h4 id="input和textarea的选择"><a href="#input和textarea的选择" class="headerlink" title="input和textarea的选择"></a>input和textarea的选择</h4><p><code>textarea</code>有一个<code>auto-height</code>的属性，可以自动根据内容去改变高度；但是<code>input</code>有手机键盘会有完成而不是回车的键，同时也会有一个点击完成键盘不收起的选项；总之你可以根据这两个特性去选择你需要的组件，加入需要<code>input</code>的属性，又需要<code>textarea</code>的属性，<code>input</code>是最好的选择…以我的经验来说</p>
<h4 id="页面即有上拉加载又有下拉刷新"><a href="#页面即有上拉加载又有下拉刷新" class="headerlink" title="页面即有上拉加载又有下拉刷新"></a>页面即有上拉加载又有下拉刷新</h4><p>一定要选用<code>Page</code>的特性，而不是<code>scroll-view</code></p>
<h4 id="打开键盘是否推起页面"><a href="#打开键盘是否推起页面" class="headerlink" title="打开键盘是否推起页面"></a>打开键盘是否推起页面</h4><p>先考虑不推起页面，再考虑推起页面…因为推起页面显得特别不自然….</p>
<h4 id="得到globalData中的值"><a href="#得到globalData中的值" class="headerlink" title="得到globalData中的值"></a>得到globalData中的值</h4><p>如果你想以下面的格式来得到<code>globalData</code>的值，可能会出乎你的意料</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    isIphoneX<span class="token punctuation">:</span> app<span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>isIphoneX<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 同步得到，可以得到正确的值</span>
    isLogin<span class="token punctuation">:</span> app<span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>isLogin<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 异步得到，得不到正确的值</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>没办法，我只能在<code>page</code>的<code>onload</code>中再重新赋值一次….</p>
<p>8-17，先写到这…</p>
]]></content>
      
        <categories>
            
            <category> 小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[websocket-push]]></title>
      <url>/2018/08/15/websocket-push/</url>
      <content type="html"><![CDATA[<p>刚听到这个需求的时候，好慌…之前没做过，该怎么办？</p>
<h3 id="plan-A"><a href="#plan-A" class="headerlink" title="plan A"></a>plan A</h3><p>我的大脑迅速闪过一个方案：收到信息就在右上方弹出消息块，然后过个五秒，就把自己删除。接着我去查：react如何把自己删除，得到的答案是：移除组件必须是父组件去移除。此计划不行，怎么办？</p>
<p>接着我继续想，不行啊，我得记录之前的消息，要是两秒内来个三条消息，新的就把旧的遮住了…</p>
<h3 id="plan-A-over了，plan-B"><a href="#plan-A-over了，plan-B" class="headerlink" title="plan A over了，plan B"></a>plan A over了，plan B</h3><p>此时，我想到了一个package：<a href="https://github.com/juliancwirko/react-s-alert" target="_blank" rel="noopener"><code>react-s-alert</code></a>，这个组件可以满足我的需求呢，但是，我如何自定义我的消息块，只有一个message的选项，可是我的消息块类型有好几种呢，我难道要去拼接字符串？仔细想想，不可以呀，都用react了，得用组件啊，但是看了参数，好像没找到解决办法。仔细想了想，嗯，我要的核心是和它一样的，这样我改改view层，就可以用了，此方法可行。于是我<code>fork</code>、<code>clone</code>，开始仔细看源码….</p>
<p>哇，这个组件内部实现了一个迷你的<code>redux</code>，好酷，看不懂呢，我查的时候，看到了一个叫<code>React小书</code>，里面有一部分是主要讲这个的，看了讲解，能稍微看懂了。于是我知道这个组件的内部的大概逻辑。仔细想了想，我是写一个插件块呢还是拼接字符串快呢？目前的阶段先用拼接字符串吧。</p>
<p>项目内部已经使用<code>salert</code>来作为全局的弹框了，我要是还用它来显示消息块，这个组件是使用一个<code>store</code>，这会影响我的消息块的显示！！这个时候，我还在认真的想着怎么去解决这个问题….</p>
<h3 id="终极解决方案"><a href="#终极解决方案" class="headerlink" title="终极解决方案"></a>终极解决方案</h3><p>忽然灵机一动，这不就是把东西存到<code>store</code>里面，展示成一个列表嘛！！！唯一多出的东西就是在每个item内部加一个<code>timeout</code>，显示几秒后，移除。这个时候忽然想到这个终极的解决办法的我，真的是！！！</p>
<h3 id="为什么是这样的一个心理活动"><a href="#为什么是这样的一个心理活动" class="headerlink" title="为什么是这样的一个心理活动"></a>为什么是这样的一个心理活动</h3><p>仔细分析了我的全部心理活动，为什么这个解决方案如此常见，我没有想到呢！！刚开始一听到实时推送，没听过，听起来很高级呢，很难吧…于是自己把自己吓住了，人在不清醒的状况下，无法正常的思考问题…<br>于是我开始了一系列的plan，绕了一圈才想到正常的方法。只是当我想到最后的方案时，但是带给我的冲击太大了，就是 乱花渐欲迷人眼， 我的眼睛被迷住了，当清醒的那一刻….</p>
<p>过程还是不错的，我学到了如何构建一个mini的<code>redux</code>，现在需要努力的是：如何在大脑不清醒的状态下进行思考…多玩玩恐怖的密室逃脱</p>
<p>PS: 炒鸡推荐一款游戏 <code>human resource machine</code>，希望我没写错吧，这款的游戏对于我来说是锻炼算法和逻辑能力的，仔细画流程图还是能找到解决办法…解可能不是最优解，去搜搜最优解， 有对比才有爱❤️</p>
]]></content>
      
        <categories>
            
            <category> react </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[angular_1_source_code]]></title>
      <url>/2018/08/13/angular-1-source-code/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[translate-mindset-lessons-from-a-year-with-react]]></title>
      <url>/2018/08/10/translate-mindset-lessons-from-a-year-with-react/</url>
      <content type="html"><![CDATA[<h3 id="前"><a href="#前" class="headerlink" title="前"></a>前</h3><p><a href="https://medium.freecodecamp.org/mindset-lessons-from-a-year-with-react-1de862421981" target="_blank" rel="noopener">原文链接</a><br>在M站经常能看到优秀的文章，昨天看到的一篇文章今天在看公众号推荐的文章中，就看到了这篇文章的译文。我看英文文章也是边看边翻译，阅读后的记忆不深，有时候还需要再看一遍，萌发了翻译的念头，先尝试一下！</p>
<h3 id="使用react工作一年后，我学到了最重要的一课"><a href="#使用react工作一年后，我学到了最重要的一课" class="headerlink" title="使用react工作一年后，我学到了最重要的一课"></a>使用react工作一年后，我学到了最重要的一课</h3><p><img src="http://res.cloudinary.com/dwudaridr/image/upload/v1533801204/blog/translate-1.png" alt="image"><br>我不想加这张图片，但是我知道它会引起你的注意(hhh 确实很引人注意)🔪</p>
<p>从一门新技术开始可能会得常麻烦，你经常发现你自己处于教程和文章的海洋中，后面是数以百万计的个人观点，每一个人都说他们找到了正确而完美的解决办法。</p>
<p>这些会让我们纠结我们选择的教程是否是浪费时间。</p>
<p>在去知识的海洋中之前，我们必须理解技术的基本概念。接着我们需要开发一种基于技术的思维模式。如果我们开始学习react，我们首先对react进行思考。只有在以后我们才开始将各种心态融合成一体。</p>
<p>在这篇文章中，我将从我个人使用react的经历中介绍我从这方面学到一些经验教训。我们在白天工作，晚上写个人的项目，甚至会谈一些我在本地JavaScript活动。</p>
<p>那么，就让我们开始吧！</p>
<h4 id="react正在发展，你必须是更新到最新版本"><a href="#react正在发展，你必须是更新到最新版本" class="headerlink" title="react正在发展，你必须是更新到最新版本"></a>react正在发展，你必须是更新到最新版本</h4><p>如果你还记得版本16.3.0的初始公告，你会记得每个人对此都很兴奋。</p>
<p>这是新版的的一些变化和改进：</p>
<ul>
<li>Official Context API</li>
<li>createRef API</li>
<li>forwardRef API</li>
<li>StrictMode</li>
<li>Component Lifecycle Changes</li>
</ul>
<p>react core团队和所有的贡献者都在你鼓励的改进我们喜欢的技术。 在版本16.4.0中，我们看到了Pointer Events。</p>
<p>肯定还有更近一步的改变，这只是时间的问题，异步渲染、缓存 版本17.0.0 以及其他很多不知道的改变。</p>
<p>因此，如果你想成为最棒的专家，你必须了解社区中发生的事情。</p>
<p>了解它们是怎么工作的以及它们为何被开发出来。学习正在解决的问题以及如何使开发更容易。这些真的对你很有帮助。</p>
<h4 id="不要害怕将代码分成更小的块"><a href="#不要害怕将代码分成更小的块" class="headerlink" title="不要害怕将代码分成更小的块"></a>不要害怕将代码分成更小的块</h4><p>react是基于组件的。所以你应该利用这个概念，不必害怕将更大的部分分成更小的部分。有时候一个简单的组件可能只是4-5行代码，在某些情况下，它完全没问题。这样做，如果来一个新人，他们将不需要几天去了解一切是如果运作的。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// isn't this easy to understand?</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
   <span class="token operator">&lt;</span>ChangeButton
    onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeUserApprovalStatus<span class="token punctuation">}</span>
    text<span class="token operator">=</span><span class="token string">"Let’s switch it!"</span>
   <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>
   <span class="token operator">&lt;</span>UserInformation status<span class="token operator">=</span><span class="token punctuation">{</span>status<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>
  <span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>你不必制作内置复杂的逻辑组件。它们仅仅能看变量名就能理解组件。如果这样可以提高代码的可读性和测试性，并进一步减少更深一步的<a href="https://en.wikipedia.org/wiki/Code_smell" target="_blank" rel="noopener">代码味道</a>，那它对于团队里的每个人都是一个胜利。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> ErrorMessage <span class="token keyword">from</span> <span class="token string">'./ErrorMessage'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> NotFound <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>ErrorMessage
    title<span class="token operator">=</span><span class="token string">"Oops! Page not found."</span>
    message<span class="token operator">=</span><span class="token string">"The page you are looking for does not exist!"</span>
    className<span class="token operator">=</span><span class="token string">"test_404-page"</span>
  <span class="token operator">/</span><span class="token operator">></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在上面的例子中，属性是静态的。所以我们可以有一个负责网站错误信息的pure component：NOTFound，仅此而已。</p>
<p>另外，如果你不喜欢在任何地方都使用css类作为类名，我建议使用样式化组件。这可以提高可读性。</p>
<p>如果害怕创造一个新的组件而污染你的文件夹，请重新思考如果构建代码。我一直在使用<a href="https://hackernoon.com/fractal-a-react-app-structure-for-infinite-scale-4dab943092af" target="_blank" rel="noopener">fractal structure</a>，它很棒。</p>
<h4 id="不要拘泥于基础-要变的先进"><a href="#不要拘泥于基础-要变的先进" class="headerlink" title="不要拘泥于基础-要变的先进"></a>不要拘泥于基础-要变的先进</h4><p>有时你可能认为你不够了解一些东西而转向高级的东西。但通常你不必过于担心：接受挑战并证明自己错误。</p>
<p>通过掌握高级的主题来提高自己，你可以理解更多基础的东西并且如何将它们应用于更大的事情上。</p>
<p>你可以去探索以下很多模式：</p>
<ul>
<li>Compound Components</li>
<li>High Order Components</li>
<li>Render Props</li>
<li>Smart/Dumb Components</li>
<li>many others (try out Profiling)</li>
</ul>
<p>探索他们，你将会知道使用它们的原因和地方。你会对React感到更舒适。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// looks like magic?</span>
<span class="token comment" spellcheck="true">// it's not that hard when you just try</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> children <span class="token operator">=</span> React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span>
   <span class="token punctuation">(</span>child<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">cloneElement</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        onSelect<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onTabSelect</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> children<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>并且，你不要害怕在你的工作中尝试一些新的事物，当然，在某些范围内。不要只限于在私人的项目中试验。别人可能会提问问题，这些都是正常的。你的任务是用强有力的论据来捍卫你的工作和决定。</p>
<p>你的目标应该是解决现有问题，进一步开发，或者只是提高代码质量（原文是：or just clean some pasta in the code. 我找了pasta code的意思，它与以下的名词有关：SpaghettiCode、RavioliCode、LasagnaCode），即使你的建议被拒绝了，你应该回家去了解，而不是沉默。</p>
<h4 id="不要过于复杂"><a href="#不要过于复杂" class="headerlink" title="不要过于复杂"></a>不要过于复杂</h4><p>这个听起来像一个反驳论点，但是它有所不同。在生活中，无处不在，我们必须保持平衡。我们不应该过于炫耀（over-engineer to show off）。我们必须务实。编写容易理解并实现其目的的代码。</p>
<p>如果你不需要redux，但是你想要使用它因为每个人都在不知道它的真正目的而使用它，不要这样，提出意见，如果别人推你，不要害怕站起来。</p>
<p>有时候你也许会想使用最新的技术编写复杂的代码，你就可以向世界说：我不是一个初学者，我正在成为一个中级，看看我能做些什么。</p>
<p>说实话，这是我在开发之旅开始的心态。但是随着时间的推移，你会理解不带有炫耀编写代码，因为‘它能工作’是最容易使用。</p>
<ol>
<li>同事可以处理你的项目，你不是唯一负责开发、修复、测试的人。</li>
<li>团队可以在不参加长时间的会议了解其他人的所作所为。几分钟就足够用来讨论了。</li>
<li>当你的同事出去度假两周时，你可以接管他们的任务，而且你不需要工作8小时，因为它可以在一小时内完成。<br>人们尊重让别人生活更轻松的人。</li>
</ol>
<p>因此，如果您的目标是获得尊重，提升排名并进行改进，则需要为团队而不是自己编写代码。你将成为每个人最喜欢的团队成员。</p>
<h4 id="重构，重构和重构-这是正常的"><a href="#重构，重构和重构-这是正常的" class="headerlink" title="重构，重构和重构 - 这是正常的"></a>重构，重构和重构 - 这是正常的</h4><p>尽管项目经理会经常改变他们的想法，你改变主意十几次。其他人会批评你的工作，你也会批评它。因此，你必须多次改变你的代码。不要担心，这是一个自然的学习过程。没有失败和错误你不能提高。我们倒下的次数越多，恢复起来就越容易。</p>
<p>但这里有一个提示：确保测试当前的软件。 Smoke、unit、integration、snapshot，不要害羞使用它们。</p>
<p>每个人都面临或将面临这个场景：测试可以节省宝贵的时间。如果你像许多人一样认为他们浪费时间，那就试着思考一下。</p>
<ol>
<li>你不必和你的同事一起解释事情是如何运作的。</li>
<li>你不必和你的同事一起解释为什么事情会破裂。</li>
<li>您不必为您的同事修复错误。</li>
<li>您不必修复3周后发现的错误。</li>
<li>你将有时间做你想要的东西。</li>
</ol>
<p>这都是非常有益处的。</p>
<h4 id="如果你喜欢它，你会茁壮成长。"><a href="#如果你喜欢它，你会茁壮成长。" class="headerlink" title="如果你喜欢它，你会茁壮成长。"></a>如果你喜欢它，你会茁壮成长。</h4><p>在过去的一年里，我的目标是在React上做得更好。 我想谈谈它。 我希望别人和我一起享受。我可以不停地坐着整夜编码，看着各种各样的谈话，享受它的每一分钟。</p>
<p>问题是，如果你想要什么，不知怎的，每个人都开始帮助你。上个月，我面对200人发表了我的第一次React演讲。</p>
<p>在这一年期间，我变得更强大，更舒适地面对react的多种模式、范式和内部运作。我可以进行高级讨论并向其他人讲授我不敢触及的话题。而今天我仍然感受到一年前我所感受到的同样的兴奋和享受。</p>
<p>所以我建议每个人都问自己：“你喜欢你做什么吗？”，如果没有，继续寻找你可以谈论几个小时的特殊的一块，每晚学习，变得开心。因为我们必须找到最接近我们心灵的东西。 不能强迫成功，它必须实现。</p>
<p>如果我可以回到一年的时间，那么在我前面的旅程之前，我会为自己做些准备。</p>
<p>谢谢你的阅读！</p>
<p>如果你觉得这篇文章对你有帮助，请鼓掌。</p>
<h3 id="后"><a href="#后" class="headerlink" title="后"></a>后</h3><p>不尝试不知道！翻译过程中，我只能看懂一句话表达的意思，但是翻译出来需要稍微润色一下。对于我看不懂的句子，我尝试google translate，效果还是很好的😂。对于里面的一些通用名词我还是不太了解：例如 <code>pasta code</code>、<code>code smell</code>，需要我再去查一遍，有时候可能自己也是看的懵里懵懂的。<br>第一次翻译之旅真的是太累了，我需要大量的时间去找一些专业名词，进而才会理解作者要表达的意思，但有时候翻译出来还是很晦涩。这次真真正正的感受到翻译者的不易，感谢我曾经看过的翻译文章的作者，也深深了解到我司编辑的压力。</p>
]]></content>
      
        <categories>
            
            <category> 翻译 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bootstrap-modal]]></title>
      <url>/2018/08/08/bootstrap-modal/</url>
      <content type="html"><![CDATA[<p>之前看<code>bootstrap</code>的modal的时候，当modal打开时，动态为<code>body</code>增加<code>padding-right: 15px</code>的style，刚开始时有点疑惑为什么不直接给<code>open-modal</code>增加<code>padding-right: 15px</code>，还非要动态增加呢？</p>
<p><img src="http://res.cloudinary.com/dwudaridr/image/upload/v1533706275/blog/2091533706051_.pic_hd.jpg" alt="image"></p>
<p>由于现在的项目中也有modal，我是采取的第二个方案，通过class给body增加样式。由于我的chrome的滚动条是需要占空间的，emmm，打开modal，样式是ok的，但是测试给我说，打开modal的时候页面整体会移动，很疑惑，看了他的浏览器，发现浏览器的滚动条是不占宽度的，所以当打开modal的时候，给<code>body</code>增加<code>padding-right</code>导致页面右移。</p>
<p>这个时候，我赶紧去看<code>bootstrap</code>的源码：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// modal.js</span>
Modal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>_relatedTarget<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// .....</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkScrollbar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setScrollbar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$body<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'modal-open'</span><span class="token punctuation">)</span>
  <span class="token comment" spellcheck="true">// .....</span>
<span class="token punctuation">}</span>

Modal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>checkScrollbar <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> fullWindowWidth <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fullWindowWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// workaround for missing window.innerWidth in IE8</span>
    <span class="token keyword">var</span> documentElementRect <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fullWindowWidth <span class="token operator">=</span> documentElementRect<span class="token punctuation">.</span>right <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>documentElementRect<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>bodyIsOverflowing <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth <span class="token operator">&lt;</span> fullWindowWidth
  <span class="token keyword">this</span><span class="token punctuation">.</span>scrollbarWidth <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">measureScrollbar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 得到scoll bar的宽度</span>
<span class="token punctuation">}</span>

Modal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>measureScrollbar <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// thx walsh</span>
  <span class="token keyword">var</span> scrollDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>
  scrollDiv<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'modal-scrollbar-measure'</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>scrollDiv<span class="token punctuation">)</span>
  <span class="token keyword">var</span> scrollbarWidth <span class="token operator">=</span> scrollDiv<span class="token punctuation">.</span>offsetWidth <span class="token operator">-</span> scrollDiv<span class="token punctuation">.</span>clientWidth
  <span class="token keyword">this</span><span class="token punctuation">.</span>$body<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>scrollDiv<span class="token punctuation">)</span>
  <span class="token keyword">return</span> scrollbarWidth
<span class="token punctuation">}</span>

Modal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>setScrollbar <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 为body动态增加padding-right</span>
  <span class="token keyword">var</span> bodyPad <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$body<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'padding-right'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>originalBodyPad <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>paddingRight <span class="token operator">||</span> <span class="token string">''</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bodyIsOverflowing<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$body<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'padding-right'</span><span class="token punctuation">,</span> bodyPad <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scrollbarWidth<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 注： 如果没有对body的宽度做设置</span>
<span class="token comment" spellcheck="true">// fullWindowWidth - document.body.clientWidth也可以得到scrollbar的宽度</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>每次打开modal的时候，动态的计算一下scrollbar的宽度，宽度即为<code>padding-right</code>的值。关闭modal的时候清空style的值即可。</p>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><ol>
<li><p>先去增加body的style，再增加class，在写的过程中，我一直得到scrollbar的width为0，我还想着是不是异步的计算，检查了代码以后，发现是先加class再计算才导致每次计算为0。</p>
</li>
<li><p>我测试了Chrome、firefox、safari三个浏览器，scrollbar的width都是15，看的资料说scrollbar的width一般在14-18之间…</p>
</li>
<li><p>我检索了一下：如何隐藏chrome的滚动条，得到的答案是： <code>chrome://flags/#overlay-scrollbars</code>，我去找这个设置的时候，发现已经找不到这个设置了…..</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[data-flow]]></title>
      <url>/2018/08/05/data-flow/</url>
      <content type="html"><![CDATA[<p>前话，我最开始接触的是Angular，再是Vue，工作之后就开始用React，之前习惯了双向数据绑定，刚开始写太顺手，但心中想着框架是相通的，于是抱着这个想法，继续下去，遗憾的是，我把不相通的地方当成了相通….最明显的例子应该就是父子组件因为数据而产生的通信</p>
<h4 id="双向数据流"><a href="#双向数据流" class="headerlink" title="双向数据流"></a>双向数据流</h4><p>对于angular来说，对于同一份数据，我既在父组件中可以进行更改，也可以在子组件中进行更改，通信功能其实很弱化。</p>
<h4 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h4><p>对于父组件中的数据，子组件如果有修改的需求，该怎么办？在查到的资料中，很多解决方案都提到了调用这个词，父组件调用子组件的方法，子组件调用父组件的方法。抱着这样的想法我会写出以下：</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Parent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>MyChild <span class="token punctuation">{</span><span class="token operator">...</span>someFunc<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyChild</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token keyword">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// $.ajax</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">someFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token comment" spellcheck="true">//</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>写了很久的上面的解决方案….<br>即是单向数据流，子组件调用了父组件的方法，我在调试的时候，假如看到数据的变化，我还需要去子组件里面查找，而且最典型的是对于一个数据的处理发生在了两个组件之间。这违背了单向数据流的思想。<br>于是，第二个解决方案来了：</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// babbababa</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> MyChild <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>子组件变成一个纯组件，它如果想要对数据做什么，只是简单的告诉父组件，它本身没有任何的操作逻辑。所有的数据操作都发生在拥有数据的组件中。</p>
<p>结语：特性不相通，和特性有关的操作也不会相通的。</p>
]]></content>
      
        <categories>
            
            <category> react </category>
            
            <category> angularjs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react </tag>
            
            <tag> angularjs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[code-optimization]]></title>
      <url>/2018/08/03/code-optimization/</url>
      <content type="html"><![CDATA[<p>代码需要及时优化，但是什么的优化是恰当的呢？什么优化是不恰当的呢？</p>
<h4 id="这个时候需要优化了"><a href="#这个时候需要优化了" class="headerlink" title="这个时候需要优化了"></a>这个时候需要优化了</h4><p>我有两个container： 一个具有筛选功能、一个不具有筛选功能，但是他们有共同的属性：list为空的时候，都显示没有数据；并且都具有瀑布流的功能。但针对目前只有这两个container的时候，我可以不进行相同功能的提取。但是，第三个container出来了，它与之前的两个container都不相同（数据获取的方式与前两者不同），但是具有相同的特性。<br>在我准备写的时候，我发现再让我写一遍瀑布流的功能很别扭，这个时候，就应该考虑优化代码了。<br>于是，我比较了这三个container的相同性之后，开始进行分层处理。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// fetch 数据层</span>
<span class="token comment" spellcheck="true">// 解析数据层</span>
<span class="token comment" spellcheck="true">// 判断是否与内容以及增加瀑布流功能层</span>
<span class="token comment" spellcheck="true">// 内容显示层</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>分层处理后，代码的重复性减少，代码层级变得更清楚，架构也变得稳定。<br>因为使用React去进行开发的，这样的划分带来的最显著的特点就是组件化，即使以后出现新的数据源，这样的分层也会很灵活。<br>以上是我做的一个我觉得很棒的优化。我放下手头的活，写写画画思考了一会，经过分析得出这是最好的一个处理方式，确定好方案，撸起袖子，开始干活！</p>
<h4 id="以下优化不可取"><a href="#以下优化不可取" class="headerlink" title="以下优化不可取"></a>以下优化不可取</h4><ol>
<li>写了好多组件，都需要用到redux里面的数据，写的mapState那叫一个重复啊，我想着把这一块相同的代码提成一个公用函数。想了就做了，结果当然是得到了反对，并乖乖的改了过去。对方给我的理由是：mapState本来就是标示从Redux里面去了哪些数据，如何命名。如果写到别的地方，阅读者不能一眼看到你想要的数据类型，反而还需要再去查别的文件，这种做法是不恰当的。</li>
</ol>
<p>2.技术栈现在用的graphql + apollo，所以大部分组件都是以这样的格式开头的：</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">@<span class="token function">graphql</span><span class="token punctuation">(</span>QUERY<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    variables<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// params</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
@<span class="token function">WaterFallWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 高阶组件</span>
<span class="token keyword">class</span> <span class="token class-name">HomeNewest</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// bababa</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我看了很多组件都是这样开头的，心理的优化分子开始作祟，我想再把graphql弄成一个高阶函数，准备这样做的时候，我认真的思考一下🤔，这个包暴露的方法为什么不来一个最精简的方法呢，这么想了想，就没有进行这个优化工作…这个就属于过度优化了…</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>优化代码的话，最好从架构的方面去入手去进行，而不是仅仅从代码角度去思考</p>
<p>PS: 引用别人的话：过度优化相当想着死后如何分遗产;-)</p>
]]></content>
      
        <categories>
            
            <category> 优化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[prime-number]]></title>
      <url>/2018/07/25/prime-number/</url>
      <content type="html"><![CDATA[<p>给定一个数字n, 打印出n以内的所有素数。素数的定义非常简单，对于一个整数，除1和它本身外，再没有其他因数了，这个数就是素数。就是说，只除以1或者本身时余数为0，除以其他数所得的余数均不为0。</p>
<h4 id="最简单的方法"><a href="#最简单的方法" class="headerlink" title="最简单的方法"></a>最简单的方法</h4><pre class="line-numbers language-haskell"><code class="language-haskell"><span class="token comment" spellcheck="true">-- 返回一个整数的所有因数</span>
<span class="token hvariable">factors</span> <span class="token operator">::</span> <span class="token constant">Integral</span> <span class="token hvariable">a</span> <span class="token operator">=></span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token punctuation">[</span><span class="token hvariable">a</span><span class="token punctuation">]</span>
<span class="token hvariable">factorsn</span><span class="token operator">=</span><span class="token punctuation">[</span> <span class="token hvariable">x</span> <span class="token operator">|</span> <span class="token hvariable">x</span> <span class="token operator">&lt;-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">..</span><span class="token hvariable">n</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">mod</span> <span class="token hvariable">n</span> <span class="token hvariable">x</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span>

<span class="token operator">></span> <span class="token hvariable">factors</span> <span class="token number">24</span> <span class="token comment" spellcheck="true">-- out: [1,2,3,4,6,8,12,24]</span>
<span class="token comment" spellcheck="true">-- 检验一个数是否为素数的函数，只需检验它的因数是否只有1和他自己</span>
<span class="token hvariable">isPrime</span> <span class="token operator">::</span> <span class="token constant">Integral</span> <span class="token hvariable">a</span> <span class="token operator">=></span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token constant">Bool</span>
<span class="token hvariable">isPrime</span> <span class="token hvariable">n</span> <span class="token operator">=</span> <span class="token hvariable">factors</span> <span class="token hvariable">n</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token hvariable">n</span><span class="token punctuation">]</span>

<span class="token comment" spellcheck="true">-- 生成素数列表</span>
<span class="token hvariable">primes</span> <span class="token operator">::</span> <span class="token constant">Integral</span> <span class="token hvariable">a</span> <span class="token operator">=></span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token punctuation">[</span><span class="token hvariable">a</span><span class="token punctuation">]</span>
<span class="token hvariable">primes</span> <span class="token hvariable">n</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token hvariable">x</span> <span class="token operator">|</span> <span class="token hvariable">x</span><span class="token operator">&lt;-</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">..</span> <span class="token hvariable">n</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token hvariable">isPrime</span> <span class="token hvariable">x</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的方法效率很低，每次求因数的时候，要从1～n全都遍历一遍</p>
<p>思考一下，可以简化一些过程</p>
<ol>
<li>除去2以外，所有的素数都必须为奇树</li>
<li>素数必须是大于等于2的整数</li>
<li>对于一个整数N，若它有一个因数为p1，必有另外一个因子p2，使得N=p1*p1，并 并且p1与p2 一 分布在N的两端或p1 =p2 = 根号下N;</li>
<li>因为比2大的素数必须是奇数，所以它一 也不会有偶因数.</li>
</ol>
<p>所以，对2进行单独讨论，然后对于其他的数只需要用它去除以所有 3 ∼ 根号下n的所有奇 数，若余数全不为0，则这个数为素数。<br>这样，对于<code>isPrime</code>可以这样定义</p>
<pre class="line-numbers language-haskell"><code class="language-haskell"><span class="token hvariable">isPrime</span>' <span class="token operator">::</span> <span class="token constant">Integral</span> <span class="token hvariable">a</span> <span class="token operator">=></span> <span class="token hvariable">a</span> <span class="token operator">-></span> <span class="token constant">Bool</span>
<span class="token hvariable">isPrime</span>' <span class="token number">2</span> <span class="token operator">=</span> <span class="token constant">True</span>
<span class="token hvariable">isPrime</span>' <span class="token hvariable">p</span> <span class="token operator">=</span> <span class="token hvariable">p</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token builtin">all</span> <span class="token punctuation">(</span><span class="token operator">\</span><span class="token hvariable">n</span> <span class="token operator">-></span> <span class="token hvariable">p</span> `<span class="token builtin">mod</span>` <span class="token hvariable">n</span><span class="token operator">/=</span><span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">$</span> <span class="token builtin">takeWhile</span><span class="token punctuation">(</span><span class="token operator">\</span><span class="token hvariable">n</span> <span class="token operator">-></span> <span class="token hvariable">n</span><span class="token operator">*</span><span class="token hvariable">n</span> <span class="token operator">&lt;=</span> <span class="token hvariable">p</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">-- 注： takeWhile (\n -> n*n &lt;= p) [3,5..]) 求出了 3 ∼ √N 的所有奇数数组成的列表</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>除此之外还有一个方法叫做<code>埃拉托斯特尼筛法</code>。给 从2开始连续的一列数，2为素数。那 么，在2之后有2 为因数的数均不为素数，可以被筛 。下一个数为3，3之后的所有为3的倍数的数就全被筛 了，因为4为2的倍数，这在第一轮中已经被筛掉了，下一个是5，依次类推，假设列表是无穷的，那么按着这个方法可以遍历所有的素数。</p>
<p>在看书时，阅读到这一块，就感觉真棒👍。填鸭式学习没有这样的思考过程，入门式的编程是以解决问题为主，未曾再进行思考。所以，入门加深入，会发现原来这个问题原来有如此优雅的方法。</p>
<p>PS: 以上出自haskell函数式编程入门</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[summary-work]]></title>
      <url>/2018/07/14/summary-work/</url>
      <content type="html"><![CDATA[<h4 id="react-selector"><a href="#react-selector" class="headerlink" title="react selector"></a>react selector</h4><p>最近我看到很多组件需要的redux中的值是一样的，但是，我需要为每个组件写一个mapState，我最直观的感觉是代码的重复性。于是我看了文档，在redux中的找到了一个selector的概念，看了看是可以减少我的代码重复性的。我尝试写了一个，就将这个重构工作交给同事。<br>同事给我的说的意思是：selector可以理解成vue里面的computed。是通过计算得到一个新的值。<br>例如：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> getCurrentUser <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  currentUser<span class="token punctuation">:</span> state<span class="token punctuation">.</span>info<span class="token punctuation">.</span>currentUser
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>虽然上段代码需要在多个组件中出现。如果抽成一个方法，那么阅读代码的人需要再去找到这个方法才知道我实际需要的数据格式，虽然函数的名字已经很明确，但是你不清楚实际上在组件中使用的变量名。</p>
<p>例如：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> searchSelector <span class="token operator">=</span> <span class="token punctuation">{</span>
  hasSearchFunction<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>info<span class="token punctuation">.</span>currentUser<span class="token punctuation">.</span>isBig <span class="token operator">&amp;&amp;</span> state<span class="token punctuation">.</span>info<span class="token punctuation">.</span>currentUser<span class="token punctuation">.</span>isSmall
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>上段代码体现了selector的特点，通过计算得到一个新的值。这是一个提倡的做法。</p>
<h4 id="redux-store"><a href="#redux-store" class="headerlink" title="redux store"></a>redux store</h4><p>虽然这个坑我没遇到过，但是踩坑的人告诉我，不要什么东西都放在store里面，在store里面存值，是要进行一次stringfy，最直接的就是不要把不能进行stringfy的数据往store里面放。</p>
<h4 id="组件大小"><a href="#组件大小" class="headerlink" title="组件大小"></a>组件大小</h4><p>最近在开发新功能的时候，会看到之前写的代码。我能体会得到之前组长的槽点。现在我看到组件，不光大而且里面很多if，看着就脑袋疼。React提倡组件可复用性。组件如果做到最大的复用性，最直接的方法就是组件功能单一性，这样组件可能变得非常小，最好还是把握一下度。<br>以下代码会给你什么启示？</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ArticleItem.jsx</span>
<span class="token keyword">const</span> ArticleItem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"article-item"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"article-item__cover"</span><span class="token operator">></span>
        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* ....content */</span><span class="token punctuation">}</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"article-item__conent"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"article-item__content--top"</span><span class="token operator">></span>
          <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* ....content */</span><span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"article-item__content--middle"</span><span class="token operator">></span>
          <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* ....content */</span><span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* ....others content */</span><span class="token punctuation">}</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* ....content */</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// ArticleItem.jsx</span>
<span class="token keyword">const</span> ArticleItem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"article-item"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>ArticleItemCover <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>ArticleItemContent<span class="token operator">></span>
        <span class="token operator">&lt;</span>ArticleItemContentTop <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>ArticleItemContentMiddle <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>ArticleItemContent<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上代码会给你带来不同的直观感受。阅读第一版代码，需要足够的耐心来阅读才能知道article中的内容。看第二版的代码，你可以很清晰的看到，article中到底有着什么内容。<br>嗯，可以理解为什么别人不想看我的代码了，又臭又长！现在看来重构别人的代码也是件痛苦的事情。</p>
<h4 id="闲谈"><a href="#闲谈" class="headerlink" title="闲谈"></a>闲谈</h4><p>之前看到很多的大神的经验谈，但是最真实的感受就是：没经历过真的很难去理解其中的意思。只有真正上手后，才能理解其中的奥妙。<br>hhhh，是不是特别像高中的老师痛心疾首的告诉学生要好好学习，当时真的内心毫无波动，但是现在在想，会发现已经没有足够的精力对待学习这个事情了。<br>活到老学到老，加油，你是最棒的！</p>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[history-push-state]]></title>
      <url>/2018/07/13/history-push-state/</url>
      <content type="html"><![CDATA[<p>如何想要点击浏览器自带的前进 后退按钮 不刷新页面，可以通过改变history的state<br>想了一下，写了一个小demo。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>nav<span class="token operator">></span>
  <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"/home"</span><span class="token operator">></span>主页<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
  <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>个人<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
  <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"/test"</span><span class="token operator">></span>测试<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>nav<span class="token operator">></span>
<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token keyword">const</span> baseHref <span class="token operator">=</span> location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>
  <span class="token keyword">const</span> baseUrl <span class="token operator">=</span> <span class="token string">'/test.html'</span><span class="token punctuation">;</span>

  window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> links <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    links<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      item<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">const</span> href <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> baseHref <span class="token operator">+</span> href<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token function">setContentHtml</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    window<span class="token punctuation">.</span>onpopstate <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// console.log(event);</span>
      <span class="token keyword">const</span> currentPathname <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">;</span>
      <span class="token keyword">const</span> targetHref <span class="token operator">=</span> currentPathname<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token function">setContentHtml</span><span class="token punctuation">(</span>targetHref<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> setContentHtml <span class="token operator">=</span> <span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> content<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 接管路由</span>
    <span class="token comment" spellcheck="true">// 1. 得到baseUrl之后的href</span>
    <span class="token comment" spellcheck="true">// 2. 根据href去render</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>假如你是直接打开html文件，使用<code>history.pushState</code>会出错，这时候你需要新开一个server。<br>其中最主要的是，你要托管a链接的herf。<br>其中在<code>onpopstate</code>中，我得到<code>targetHref</code>的方式，感觉有些蠢，目前还没想到好的方法。<br>去看一下其他的框架可能会给我一个不一样的思路。<br>飘过～</p>
<h4 id="2018-07-14-更新"><a href="#2018-07-14-更新" class="headerlink" title="2018-07-14 更新"></a>2018-07-14 更新</h4><p>在history这个项目中得到的启示：<br><code>history.pushState</code>的第一个参数就是<code>onpopstate</code>事件中的<code>event.state</code><br>这样的话，我可以对现有的进行一些改进</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// first argumens is event state</span>
<span class="token comment" spellcheck="true">// history.pushState('', '', baseHref + href);</span>
history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span>href<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> baseHref <span class="token operator">+</span> href<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// ....</span>

<span class="token comment" spellcheck="true">// const currentPathname = event.target.location.pathname;</span>
<span class="token comment" spellcheck="true">// const targetHref = currentPathname.split(baseUrl)[1];</span>
<span class="token keyword">const</span> targetHref <span class="token operator">=</span> event<span class="token punctuation">.</span>state<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样想一下，<code>event.state</code>里面可以存很多东西….</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> history&#39; </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rails-access-origin]]></title>
      <url>/2018/07/06/rails-access-origin/</url>
      <content type="html"><![CDATA[<p>记录一下，在rails里面如何设置access-origin….</p>
<pre class="line-numbers language-ruby"><code class="language-ruby">gem <span class="token string">'rack-cors'</span><span class="token punctuation">,</span> <span class="token symbol">:require</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'rack/cors'</span>


config<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>insert_before <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">Rack</span><span class="token punctuation">:</span><span class="token symbol">:Cors</span> <span class="token keyword">do</span>
  allow <span class="token keyword">do</span>
    origins <span class="token string">'*'</span>
    resource <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token symbol">:headers</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token symbol">:any</span><span class="token punctuation">,</span> <span class="token symbol">:methods</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token symbol">:get</span><span class="token punctuation">,</span> <span class="token symbol">:post</span><span class="token punctuation">,</span> <span class="token symbol">:options</span><span class="token punctuation">]</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> rails </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rails </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bad-code-2]]></title>
      <url>/2018/07/05/bad-code-2/</url>
      <content type="html"><![CDATA[<h4 id="最近的烦恼"><a href="#最近的烦恼" class="headerlink" title="最近的烦恼"></a>最近的烦恼</h4><p>最近真的超级苦恼。一直在进行新功能的开发，没时间做我之前想要重构的东西。<br>在进行开发的时候，这个时候我已经很注意重构的信号，新功能的开发需要重构一些代码，秉承着一个pr只做一个功能，于是我需要切换分支，提pr，合并pr之后，再进行新功能的开发，这个事情真的非常痛苦。<br>之前没有充分的经验和思考进行的开发，给现在的我带了巨大的痛苦。</p>
<h4 id="启示（都是泪）"><a href="#启示（都是泪）" class="headerlink" title="启示（都是泪）"></a>启示（都是泪）</h4><h5 id="1-每个文件的入口文件应尽可能的保持干净"><a href="#1-每个文件的入口文件应尽可能的保持干净" class="headerlink" title="1. 每个文件的入口文件应尽可能的保持干净"></a>1. 每个文件的入口文件应尽可能的保持干净</h5><p>不要因为函数小，就要往index中塞。index是入口文件，了解整个项目从这里开始，所以要保证，这里的代码做到最简洁明了，一眼看过去，就能有一概览的感觉。小函数感觉放在一个单独的文件中太不值当的，就把所有的小函数放在一个文件中。整理之后，我感觉非常清新。</p>
<h5 id="2-多处都用到的样式，这个时候就要考虑重命名了"><a href="#2-多处都用到的样式，这个时候就要考虑重命名了" class="headerlink" title="2. 多处都用到的样式，这个时候就要考虑重命名了"></a>2. 多处都用到的样式，这个时候就要考虑重命名了</h5><p>要不看了很疑惑，这个页面为什么有其他页面的style</p>
<h5 id="3-实时抽取util"><a href="#3-实时抽取util" class="headerlink" title="3.实时抽取util"></a>3.实时抽取util</h5><p>组件划分要清楚，例如可以抽出来api.js、tool.js</p>
<h5 id="4-函数复杂度尽可能的降低"><a href="#4-函数复杂度尽可能的降低" class="headerlink" title="4.函数复杂度尽可能的降低"></a>4.函数复杂度尽可能的降低</h5><p>若真的找不到适合的解决方法，可以与身边的人分享一下，或许会得到更好的解决办法</p>
<h5 id="5-你连续copy一段代码以上，这个时候，你可以考虑写一个工具来生成相同的代码"><a href="#5-你连续copy一段代码以上，这个时候，你可以考虑写一个工具来生成相同的代码" class="headerlink" title="5. 你连续copy一段代码以上，这个时候，你可以考虑写一个工具来生成相同的代码"></a>5. 你连续copy一段代码以上，这个时候，你可以考虑写一个工具来生成相同的代码</h5><h5 id="6-需要lazy的地方，及时lazy"><a href="#6-需要lazy的地方，及时lazy" class="headerlink" title="6. 需要lazy的地方，及时lazy"></a>6. 需要lazy的地方，及时lazy</h5><h5 id="7-一个问题有两个不同的解决办法，各有利弊-选择代价最小的"><a href="#7-一个问题有两个不同的解决办法，各有利弊-选择代价最小的" class="headerlink" title="7. 一个问题有两个不同的解决办法，各有利弊,选择代价最小的"></a>7. 一个问题有两个不同的解决办法，各有利弊,选择代价最小的</h5><p>移动端和PC端共用一个相同的组件，这个我写一个组件，写两份样式。在这个情况下，假如你修改一下组件，这个时候，你就要同时修改两份样式。一般移动端展示的UI较少，用PC端的组件，会造成很多DOM的多余。所以这个时候，写两个组件更好一点。</p>
<h5 id="8-对于react的看法"><a href="#8-对于react的看法" class="headerlink" title="8.对于react的看法"></a>8.对于react的看法</h5><p>要学会切小片片，尽可能的组件化，组件尽可能的小，职责尽可能明确。<br>之前写两个wrapper有一段相同的代码，这个还可以接受，等我再写一个wrapper时，发现还需要那一段相同的代码，我受不了了，于是将一个组件拆成了三层。emmmm，组件小多么重要。</p>
]]></content>
      
        <categories>
            
            <category> 优化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bad-code]]></title>
      <url>/2018/07/02/bad-code/</url>
      <content type="html"><![CDATA[<h4 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h4><p>当你发现现有的结构满足不了现有的功能，这是重构的信号。很遗憾，为了赶进度，当这些信号出现时，你没有放在第一位去考虑，随着增量的开发，再回头准备下手重构，有一种牵一发动全身的感觉。</p>
<h4 id="烂代码的由来"><a href="#烂代码的由来" class="headerlink" title="烂代码的由来"></a>烂代码的由来</h4><h5 id="词不达意"><a href="#词不达意" class="headerlink" title="词不达意"></a>词不达意</h5><p>代码写出来的目的是给人看的，一般你写的代码都不会由你维护。<br>emmmm 随意的命名，给阅读代码的人带来巨大的负担。自己看两天的代码也会有一种雾里看花的感觉。</p>
<h5 id="二随一变"><a href="#二随一变" class="headerlink" title="二随一变"></a>二随一变</h5><p>这个是在开发过程中，两个对象都随着一个对象变，又勤勤恳恳的写了两遍。这个时候，当发生一点变化，我要找到全部随变的代码，两个一块修改…改的手都累了，眼也花了</p>
<h5 id="我就不改变参数的个数"><a href="#我就不改变参数的个数" class="headerlink" title="我就不改变参数的个数"></a>我就不改变参数的个数</h5><p>现有的函数不能满足最新的需求，哎呀，我得在往这个函数中传一个参数，emmm，好麻烦，试试能不能在现有的参数中得到我想要的参数，还可以，就这样吧。于是，开始循环，整个函数已经不堪重负了….满篇的if else</p>
<h5 id="来来来-我的麻花真好看"><a href="#来来来-我的麻花真好看" class="headerlink" title="来来来 我的麻花真好看"></a>来来来 我的麻花真好看</h5><p>写了一个函数，哎呀，我这边需要和这个函数差不多的函数。哎呀，传一个标志，里面判断吧。这麻花不是一般的好看啊</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> getData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>isAdd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isAdd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// 共用代码</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>isAdd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// 共用代码</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>isAdd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="repeat-yourself"><a href="#repeat-yourself" class="headerlink" title="repeat yourself"></a>repeat yourself</h5><p>做spa的时候，五个页面都是一个list，于是我勤勤恳恳的写了五个list。这是在做ui的时候。在接数据的时候，我发现这几个页面的整体都是一样的，唯一不同的就是里面的item是不一样的，那我为什么还要写五遍呢？<br>其实开发的时候，就是ctrl+c和ctrl+v，那个时候还庆幸，因为把功能划分的十分清楚，我在每个页面map一遍，还挺简单的。沉浸在这种欢乐中，导致忘了这个repeat的操作。于是，动手写个一个生成list的function后，每个组件的代码两行就可以搞定了。</p>
<h4 id="磨刀不误砍柴工"><a href="#磨刀不误砍柴工" class="headerlink" title="磨刀不误砍柴工"></a>磨刀不误砍柴工</h4><p>对待一个复杂的问题，首先要勾勒出它大概的轮廓，把能想到的全列上，以此先做出一个好的架构。<br>边写边想看是一个需要摒弃的习惯（对于我自己来说）。<br>这次新做的搜索，我先写好ui,在接数据之前，我能大概想到是什么个情况。于是我开始下手写了。<br>写着写着，我发现，嗯 导航需要条件，下面的list需要条件，右边的筛选也需要这个条件。筛选和list是属于一个组件中，我已经写到单独的list这一块了，有种写不下去的感觉，于是我开始将它们共用的数据全部放在父组件。这对于开发中的时间，是一个巨大的浪费，因为这意味着我之前的工作是白做的。这个时候，我开始拿起纸和笔，开始分析我应该怎么去规划…尽管我再分析的时候，把能预见的问题都想到了，但是在开发过程中还是遇到了未知的问题..写代码的仔细分析很重要….开发过程中的清晰头脑也很重要</p>
<p>先写到这….</p>
]]></content>
      
        <categories>
            
            <category> 优化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[refactor]]></title>
      <url>/2018/06/23/refactor/</url>
      <content type="html"><![CDATA[<h4 id="闲谈"><a href="#闲谈" class="headerlink" title="闲谈"></a>闲谈</h4><p>最近很大一部分工作是在进行重构工作，每次都需要提一个大pr，很是心累。<br>原本项目就是重写了一份，但是在架构方面还是没有做好。在开发过程中，没有进行总结，错过了重构的好机会，导致后期维护起来很累。编写代码的很大感觉，哎这一块我好像写过，copy过来。其实这就是一个重构的信号。<code>don&#39;t repeat yourself</code>.在开发过程中，我做了很多copy的工作，于是出来混总是要还的。现在重构起来就需要将凌乱的部分整合在一起。</p>
<h4 id="css整理工作"><a href="#css整理工作" class="headerlink" title="css整理工作"></a>css整理工作</h4><p>最近的整理工作，主要是在整理css和js，现在想想也很是惊奇。<br>对于css的整理，是在前期没有很好的去总结组件的共同之处，导致css文件是一个增量的过程，而不是迭代的过程。意思到这点之后，我开始梳理和提取相同的地方。<br>css的整理要注意的是：词达意和语义化，这意味着别人一看到你的<code>class</code>就能大概猜出来它是个什么样的。</p>
<h4 id="js整理工作"><a href="#js整理工作" class="headerlink" title="js整理工作"></a>js整理工作</h4><p>对于js的整理，很大一部分问题就自己否定自己。刚开始写的时候，我问自己：js可以拿redux里面的数据吗？我在没有查询的基础上给了一个自己否定的答案。嗯，不可以的话只能退而求其次了。现在有人告诉我可以，于是开始整理和重构。<br>看起来问题是出在我没有做好准备工作上面。</p>
<h4 id="什么时候进行整理"><a href="#什么时候进行整理" class="headerlink" title="什么时候进行整理"></a>什么时候进行整理</h4><p>我不知道这次的整理是否可以称得上重构？但是这次的整理是我的整体思路更加清晰，架构也在渐渐明了之中。<br>在编写的过程，做好的时机是：这一块我之前写过类似的，这个时候，你就考虑把相同的地方抽出来作为一个单独的部分。<br>还有一个情况是你写着写着写不下去了，这个时候，就需要从头梳理一下思路，到底是哪出的问题。<br>或者是目前的代码已经不能满足新的需求时。</p>
<h6 id="整理完一个item，感觉浑身清爽"><a href="#整理完一个item，感觉浑身清爽" class="headerlink" title="整理完一个item，感觉浑身清爽"></a>整理完一个item，感觉浑身清爽</h6><p>PS:作为一个前端来说，写出来的是直接和用户交流的产品，在开发过程中，我是在知道需求的基础上进行开发的，对于一个临时的功能，我可以写的简单一点，但是也需在明了的基础上进行，emmmm…反之，使用者已疯</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pdf]]></title>
      <url>/2018/04/08/pdf/</url>
      <content type="html"><![CDATA[<p>在网页中浏览pdf文件，最简单的办法当然是插入iframe了</p>
<h4 id="html5中浏览pdf文件"><a href="#html5中浏览pdf文件" class="headerlink" title="html5中浏览pdf文件"></a>html5中浏览pdf文件</h4><p>html5中有标签可以插入pdf,但是在每个浏览器上的表现形式不一样…</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>embed</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pdfFiles/interfaces.pdf<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pdf<span class="token punctuation">"</span></span> <span class="token attr-name">pluginspage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.adobe.com/products/acrobat/readstep2.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="插件pdf-js"><a href="#插件pdf-js" class="headerlink" title="插件pdf.js"></a>插件pdf.js</h3><p><a href="https://github.com/mozilla/pdf.js" target="_blank" rel="noopener">pdf.js</a>是一个浏览器兼容的插件，移动端也很使用，有一点：需要引入的包太大。为此，有人又做了一个包裹<a href="https://github.com/legalthings/pdf.js-viewer" target="_blank" rel="noopener">pdf.js-viewer</a>。这个npm是pdf.js的打包后的版本。在使用的过程中，你会发现样式不对，此时你可以将<code>pdf.js</code>中的<code>viewer.scss</code>，拷贝的你的开发目录，而不是引入<code>pdf.js-viewer</code>的css，里面的样式已经过时了。语言包引入后，页面就会翻译，不用做其他设置。</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./viewer-2.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application/l10n<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node_modules/pdf.js-viewer/locale/zh-CN/viewer.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
    <span class="token selector">html, body </span><span class="token punctuation">{</span>
      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">body </span><span class="token punctuation">{</span>
      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token id">#pdfjs</span> </span><span class="token punctuation">{</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token selector"><span class="token id">#viewBookmark</span>, <span class="token id">#secondaryToolbarToggle</span> </span><span class="token punctuation">{</span>
      <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">pdfjs-wrapper </span><span class="token punctuation">{</span>
      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pdfjs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--#include virtual="node_modules/pdf.js-viewer/viewer.html" --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>


  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node_modules/pdf.js-viewer/pdf.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    $(function() {
      // window.PDFJS.locale = 'zh-CN';
      $('div#pdfjs').load('http://localhost:65534/viewer.html', function(res) {
        window.PDFJS.webViewerLoad();
        window.PDFViewerApplication.open('http://localhost:65534/sample-3pp.pdf');
      });
    });
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="集成到webpack中"><a href="#集成到webpack中" class="headerlink" title="集成到webpack中"></a>集成到webpack中</h3><p>测试开发可以正常使用，需要集成到webpack中。<br>由于文件都需要用webpack打包，于是按照平常一样，将文件引入，发现控制台报错。在调试过程中，我遇到5种左右的错误，影响最深刻的一点是：<code>document undefined</code>…也是很迷，调试过程中，发现<code>pdf.js</code>种的代码执行了两遍，第二次的时候就会出这个错误。仔细翻了翻源码，在<code>pdf.js</code>中，它需要引入<code>pdf.work.js</code>文件，webpack打包时，它根本就找不到这个文件，最后的结果是只在<code>windows</code>上挂载了关于<code>pdf</code>的两个对象…<br>最后的最后，直接在页面上引入<code>pdf.js</code>和<code>pdf.work.js</code>，由于文件过大，你按需进行加载就可以了。</p>
<p>最后的最后，写了很长时间的<code>slim</code>模版，我忘了原生的标签怎么写了…导致我在引入语言包话费个很长时间…也是很迷…切莫忘本😊</p>
]]></content>
      
        <categories>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jquery-plugin]]></title>
      <url>/2018/03/13/jquery-plugin/</url>
      <content type="html"><![CDATA[<h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><p>现在是使用webpack打包，yarn安装需要的插件很便捷。今天遇到了一个奇怪的问题，我使用yarn安装了一个jquery插件，使用时，jquery报错…</p>
<h3 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h3><ol>
<li><p>安装、引用是否正确<br>首先先确定一下：包是否正确安装；使用时是否正确引用；ok，这两个都是正确的</p>
</li>
<li><p>webpack是否配置正确<br>在webpack中，一般都会将jQuery设置为全局变量，在webpack中设置如下:</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 $<span class="token punctuation">:</span> <span class="token string">"jquery"</span><span class="token punctuation">,</span>
 jQuery<span class="token punctuation">:</span> <span class="token string">"jquery"</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>webpack版本是否合适<br>开发中使用的是<code>rails-webpack</code>，其中的配置需要更改（之前对照文档修改配置，报错；今天才看到原来是版本问题😂）</p>
</li>
<li><p>最最重要的一点：查看你安装的插件的包里面有没有<code>node_modules</code>这个文件夹<br>在排查错误时，我将包里面的代码拷贝到开发目录，我发现能用。。。直接引用包就不可以。使用插件，最终目的是在<code>$</code>这个对象上挂载方法。报错就是说明<code>$</code>对象上没有这个方法，问题来了，包里面的<code>$</code>是哪来的？全局对象还是<code>node_modules</code>文件夹中的<code>jquery</code>???<br>引用多个插件，插件依赖的<code>jquery</code>版本可能不是一样的，webpack打包的时候，首先去找安装包的插件<code>node_modules</code>里面的<code>jquery</code>，局部变量覆盖全局变量。所以此时挂载方法的<code>$</code>对象是<code>node_modules</code>包中的<code>jquery</code>，而不是全局的<code>$</code>对象</p>
</li>
<li><p>为什么安装的jquery版本会不同<br>这个时候你也许会疑问🤔️为什么会安装这么多版本？首先你要去检查依赖的<code>jquery</code>版本，这个时候你可以去查看<code>yarn.lock</code>文件，里面有具体的依赖关系。这个时候，假如按照算法，你发现几个插件依赖的<code>jquery</code>的版本应该是一致的。但为什么<code>yarn</code>计算出来的不一样呢🤔️？因为<code>yarn</code>在<code>add</code>包时，计算<code>lock</code>的时候，会在原来的基础上进行计算，恰好在这个时间隔中，<code>jquery</code>升级了…这就导致<code>yarn</code>计算出来的依赖版本可能有所不同<br>此时，你可以使用<code>yarn upgrade</code>进行更新<code>lock</code>文件</p>
</li>
<li><p>如果以上步骤还不能解决问题…我也不知道根本问题是什么</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> jquery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jquery </tag>
            
            <tag> webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[get-module]]></title>
      <url>/2017/11/15/get-module/</url>
      <content type="html"><![CDATA[<h4 id="发送邮件-nodemailer"><a href="#发送邮件-nodemailer" class="headerlink" title="发送邮件: nodemailer"></a>发送邮件: <a href="https://github.com/nodemailer/nodemailer" target="_blank" rel="noopener">nodemailer</a></h4><ol>
<li>基本代码，使用之前请确保邮箱开启SMTP</li>
</ol>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> nodemailer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'nodemailer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

nodemailer<span class="token punctuation">.</span><span class="token function">createTestAccount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
    host<span class="token punctuation">:</span> <span class="token string">'smtp.163.com'</span><span class="token punctuation">,</span>
    port<span class="token punctuation">:</span> <span class="token number">465</span><span class="token punctuation">,</span>
    secure<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// true for 465, false for other ports</span>
    auth<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      user<span class="token punctuation">:</span> <span class="token string">'xxxx@163.com'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// generated ethereal user</span>
      pass<span class="token punctuation">:</span> <span class="token string">'xxx'</span>  <span class="token comment" spellcheck="true">// generated ethereal password</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> transporter <span class="token operator">=</span> nodemailer<span class="token punctuation">.</span><span class="token function">createTransport</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// setup email data with unicode symbols</span>
  <span class="token keyword">const</span> mailOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">'"Fred Foo 👻" &lt;xxx@163.com>'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// sender address</span>
    to<span class="token punctuation">:</span> <span class="token string">'xxxx@gmail.com'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// list of receivers</span>
    subject<span class="token punctuation">:</span> <span class="token string">'Hello ✔'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// Subject line</span>
    text<span class="token punctuation">:</span> <span class="token string">'Hello world?'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// plain text body</span>
    html<span class="token punctuation">:</span> <span class="token string">'&lt;b>Hello world?&lt;/b>'</span> <span class="token comment" spellcheck="true">// html body</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// send mail with defined transport object</span>
  transporter<span class="token punctuation">.</span><span class="token function">sendMail</span><span class="token punctuation">(</span>mailOptions<span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Message sent: %s'</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>messageId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>若使用SSL, 在config中添加</li>
</ol>
<pre class="line-numbers language-javascript"><code class="language-javascript">secureConnection<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// use SSL</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>3.添加附件, 在mailOptions添加</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">attachments<span class="token punctuation">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    filename<span class="token punctuation">:</span> <span class="token string">'文档.txt'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 不会乱码</span>
    content<span class="token punctuation">:</span> <span class="token string">'哈哈哈'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    filename<span class="token punctuation">:</span> <span class="token string">'2.txt'</span><span class="token punctuation">,</span>
    content<span class="token punctuation">:</span> <span class="token string">'heool word'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>添加图片, 在mailOptions添加</li>
</ol>
<pre class="line-numbers language-javascript"><code class="language-javascript">attachments<span class="token punctuation">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    filename<span class="token punctuation">:</span> <span class="token string">'文档.txt'</span><span class="token punctuation">,</span>
    content<span class="token punctuation">:</span> <span class="token string">'哈哈哈'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    filename<span class="token punctuation">:</span> <span class="token string">'01.png'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// image</span>
    path<span class="token punctuation">:</span> <span class="token string">'./flow.png'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 图片路径</span>
    cid<span class="token punctuation">:</span> <span class="token string">'00000001'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[project]]></title>
      <url>/2017/11/06/project/</url>
      <content type="html"><![CDATA[<h4 id="设计图出代码"><a href="#设计图出代码" class="headerlink" title="设计图出代码"></a>设计图出代码</h4><p>根据设计图，如何写出好的代码。设计图是一张一张的出的，因为不知道哪一块会在其他的设计图中出现，于是只看到当下并不是一个好的想法。看到一张图，可以先思考一下，哪一块有可能被复用。在class的命名上就会有所改变…刚开始一个元素在主页出现，我可以给它命名<code>home__XX</code>，但是当这个元素也在文章页面出现时，再起一个class，重复写一样的css，这不是一个好的想法，但是将这个类名直接写在文章页，看着又很不爽。在项目中，使用<code>scss</code>用来开发，这个时候，你可以改变类名或者使用<code>@include</code>和<code>@extend</code>来组织代码。<br>js部分，不止实现功能，也要保证优雅。例如一个参数可能是数组或者string，你可以这样写：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> argument <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> argument <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//...</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以这样</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>
  string<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//... },</span>
  object<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//... }</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> map<span class="token punctuation">[</span><span class="token keyword">typeof</span> argument<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="文件夹组织"><a href="#文件夹组织" class="headerlink" title="文件夹组织"></a>文件夹组织</h4><p>根据项目需要组织出合适的文件结构，文件名也要更好的表达出这个文件夹中的内容，使之清晰…</p>
<h4 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h4><p>开发的过程中，代码量越来越大，这时候可以考虑一下代码的重构。重构是不大幅度改变代码的基础上进行的…大幅度的重构甚至重写不能称作重构…推荐书籍：重构:改善既有代码的设计</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pm2]]></title>
      <url>/2017/09/13/pm2/</url>
      <content type="html"><![CDATA[<h4 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h4><p>嘤嘤，看到<code>ruby</code>中有一个<code>gem</code>叫做<code>capistrano</code>， 使用它可以实现一键部署到服务器上了。<br>之前在懵里懵懂的时候，做了一个网站，每次更改后，我都用<code>filezilla</code>将新版本的代码上传，再restart项目，超级费劲。<br>看到ruby后，于是赶紧去网上搜了搜，<code>pm2</code>可以做这件事。之前也见到过<code>pm2</code>，那时候我在寻求守护进程的module，但是我选择了<code>forever</code>。</p>
<h4 id="使用pm2实现自动部署"><a href="#使用pm2实现自动部署" class="headerlink" title="使用pm2实现自动部署"></a>使用pm2实现自动部署</h4><p><a href="https://github.com/i5ting/nodejs-fullstack/blob/master/deploy.md" target="_blank" rel="noopener">这个链接对我的帮助很大</a>，基本上按照他的步骤来应该是可以实现自动化部署。</p>
<h5 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h5><p>服务器上的node是我很久之前安装的，但是<code>pm2</code>要求使用<code>nvm</code>，于是装了<code>nvm</code>，但是到了“克隆好之后执行安装和启动”，这一步报错：npm 这个命令找不到。去寻找解决办法，有的说将<code>.bashrc</code>文件中的关于<code>nvm</code>的部分放在最上面，还有的说要使用nvm重新安装node，这两个方法都试了，但是都没有解决错误。于是我只能去<code>pm2</code>的目录中的source文件夹，手动去执行<code>npm install</code> 和 <code>pm2 start app.js</code></p>
<p>等待update得到解决方案：</p>
<h4 id="nginx转发"><a href="#nginx转发" class="headerlink" title="nginx转发"></a>nginx转发</h4><p>最暴力的方法就是下面👇的代码：</p>
<pre><code>server{
    listen 80;
    server_name xxx.xxx.xxx;(域名)
    location / {
        proxy_pass http://127.0.0.1:3000
    }
}
</code></pre><p>目前可以解决我的需要，假如还有其他的端口需要监听该怎么办？</p>
]]></content>
      
        <categories>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux-first]]></title>
      <url>/2017/09/13/linux-first/</url>
      <content type="html"><![CDATA[<p>对待自己的服务器，想着反正也没人攻击，也就从来没在意过。<br>前天得到了一个讯号：要好好对待服务器，第一步就是安全性， 你需要这么做</p>
<ol>
<li>使用root账户登录后，创建一个用户并设置密码，如果有必要，就赋予用户root权限</li>
<li>上传ssh-key，上传成功后，你就不用输入密码登录服务器了</li>
<li>关闭密码登录，打开ssh-key登录</li>
<li>以后就使用你新建的用户登录吧</li>
</ol>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[week6]]></title>
      <url>/2017/09/03/week6/</url>
      <content type="html"><![CDATA[<p>举一个栗子🌰：在分页时，你通常会看到<code>url</code>上一般是<code>xxx?page=1</code><br>通常的做法是点击第几页直接跳转页面，是通过location进行的<br>现在的需求是：在跳转页面的时候，我既想要改变url，同时我只需要改变分页的数据，而不需要整个页面重绘。</p>
<h4 id="—–"><a href="#—–" class="headerlink" title="—–"></a>—–</h4><p>很幸运<code>history</code>提供了这么一个方法<code>pushState</code>，它有三个参数：state object，title，以及一个可选的URL地址。第二个参数title:现在firefox和chrome已经忽略该参数</p>
<pre class="line-numbers language-js"><code class="language-js">window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span><span class="token string">'?page=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API" target="_blank" rel="noopener">pushState参考链接</a></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[coursera-3]]></title>
      <url>/2017/09/03/coursera-3/</url>
      <content type="html"><![CDATA[<h3 id="淡淡的忧伤"><a href="#淡淡的忧伤" class="headerlink" title="淡淡的忧伤"></a>淡淡的忧伤</h3><p>three time 是三倍的意思</p>
<h3 id="学习一门新的语言"><a href="#学习一门新的语言" class="headerlink" title="学习一门新的语言"></a>学习一门新的语言</h3><p>目前学习一门新的语言仅仅停留在<code>Syntax</code>，但是真的要把代码写的优雅，你更要了解它的<code>Type-checking</code>和<code>Evalustion</code>，了解这两者之后，你能知道代码在哪里可以优化，而不是代码的优化是在写代码中或者看到别人的代码时看到的<br>目前这个方面需要改变，思想的转变…<br>人的思想都是在肤浅向深沉转变😄</p>
<h3 id="应用类型"><a href="#应用类型" class="headerlink" title="应用类型"></a>应用类型</h3><p>下面是一段java代码，乍看上去没有问题，但是使用<code>p.getAllowesUsers[0] = p.currentUser</code>，这一句代码使权限形同虚设。<br>原因是：<code>getAllowesUsers</code>中直接返回的是<code>allowedUsers</code>，我尝试修改<code>p.getAllowesUsers</code>的值, 实际上修改了示例的私有变量的<code>allowedUsers</code>的值<br>修改： 在<code>getAllowesUsers</code>中直接返回的是<code>allowedUsers</code>的一个克隆</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ProtextedResource</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> Resource theResource <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> allowedUsers <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAllowesUsers</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> allowedUsers<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> String <span class="token function">currentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// ...</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useTheResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> allowedUsers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">currentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>allowedUsers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// access allowed: use it</span>
        <span class="token keyword">return</span> <span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>之前在项目中，我定义了一个<code>default</code>的值，合并对象选的是<code>lodash</code>的<code>extend</code>,因为没有看文档就直接使用了，<code>extend(default, options)</code>，发生了bug。我的本意是default是一个不可变的值，它作为一个函数的默认值。经过长时间😅的调试，我发现<code>default</code>的值改变了，去看文档发现<code>extend</code>会改变第一个参数的值。于是更改为<code>extend({}, default, options)</code><br>当应用类型作为函数的参数，一定要特别注意，尽量使用实参的clone值，要不在函数中修改参数的值，就相当于修改实参的值了…</p>
<h3 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h3><p>递归在一定程度上可以代替<code>loop</code>，一方面它看起来更优雅，另一方面…<br>下面的代码上面的函数是我们经常使用的方式，通俗易懂。下面的递归称为尾递归。两种函数实现的功能相同。但是若要分析到stack处，你会发现下面的函数比上面的函数有更好的性能；首先上面的函数涉及到每次递归都要去进栈和出栈后才能得到就过，但是下面的函数却没有这样的操作。<br>而且在<code>Evalustion</code>阶段，上方的函数最终结果的数据类型需要依赖上一步的结果；下面的函数时不需要上一步的计算结果</p>
<pre class="line-numbers language-ml"><code class="language-ml">fun sum1 xs =
    case xs of
        [] => 0
      | i::xs’ => i + sum1 xs’

(* tail recursion*)
fun sum2 xs =
    let fun f (xs,acc) =
            case xs of
                [] => acc
              | i::xs’ => f(xs’,i+acc)
    in
    f(xs,0)
    end
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>就到这吧…😪</p>
]]></content>
      
        <categories>
            
            <category> 编程语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编程语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[week5]]></title>
      <url>/2017/08/26/week5/</url>
      <content type="html"><![CDATA[<p>上周没写总结…</p>
<h3 id="if条件什么时候为false"><a href="#if条件什么时候为false" class="headerlink" title="if条件什么时候为false"></a>if条件什么时候为false</h3><p>因为react共用组件，但是传过来的值的结构不同，于是使用||来进行判断选择，于是写了以下代码放心的提上去了</p>
<pre><code>const count = node.count || node.usage_count || node.total_count
</code></pre><p>发现报total_count是undefined，这个我仔细看了代码没找出来哪错了，于是把生产环境的数据库拿下来，开始调试…最后发现因为<code>usage_count</code>的值为零的时候，会继续往后执行，因为<code>node.usage_count</code>值为0，js会认为是false…<br>我的原意是为undefined的时候，会继续向后执行。使用js很随便，但是忘记了随便的副作用。于是我只能用if…else…去判断undefined了<br>👉当if语句中的变量为false，0，NaN，空字符串，null，undefined时，判断结果为假;</p>
<h3 id="图片是使用背景图还是img标签"><a href="#图片是使用背景图还是img标签" class="headerlink" title="图片是使用背景图还是img标签"></a>图片是使用背景图还是img标签</h3><p>一般来说，我的习惯是图片一般使用img标签插入页面。<br>但是，假如一个网站有中文英文两个版本，通过类名的切换而不是跳转页面可以实现中英文的切换，这个时候，就不要img标签，而是背景图的形式插入图片，这样做的好处是：图片是在css设置的，我可以为元素设置不同的类名进而切换图片</p>
<h3 id="BEM不应该嵌套太深"><a href="#BEM不应该嵌套太深" class="headerlink" title="BEM不应该嵌套太深"></a>BEM不应该嵌套太深</h3><p>BEM命名的方式，一般是一个block里面包含element,所以我是一个block一层来的。大哥告诉我这样是不对的，划分block没有错，但是在命名不冲突的情况下，block中的element的类名没有必要一定按照block的类名开头。</p>
<h3 id="一定要选好元素"><a href="#一定要选好元素" class="headerlink" title="一定要选好元素"></a>一定要选好元素</h3><p>之前做tab切换的时候，咋改都没达到想要的效果。看了大哥的代码，才发现自己选错元素了。应该选择section的父元素而不是每个section…写代码之前没有经过严密的思考，遇到错误时，思想受到了限制，导致没想到正确的方向去…</p>
<h3 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h3><p>css3中的calc这个计算属性超级好用，但是有一点需要注意</p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100%</span>-<span class="token number">75</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>以上代码不起作用，让人摸不着头脑，经过查询之后，需要注意的是<code>-</code>号两边要有空格</p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100%</span> - <span class="token number">75</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="display-flex-兼容性"><a href="#display-flex-兼容性" class="headerlink" title="display:flex;兼容性"></a>display:flex;兼容性</h3><p>网站要兼容到IE9，而flex是从ie10兼容的。找hack但是没有只对IE9起作用的hack…唉，使用<code>\9</code>的hack，它也在IE10下起作用<br>对于IE9的兼容，我一般使用<code>display: table;</code>和<code>display: table-cell;</code>。此时你在设置子元素的margin是不起作用的，此时你想要的效果这两个css属性可以达到你的需求<code>border-collapse: separate;</code>、<code>border-spacing: 5rem</code>。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[week5-1]]></title>
      <url>/2017/08/26/coursera-2/</url>
      <content type="html"><![CDATA[<h3 id="说在前面的话"><a href="#说在前面的话" class="headerlink" title="说在前面的话"></a>说在前面的话</h3><p>最初对待语言的看法：相比语言更重要的是由编程思想，语言只是一种工具。所以对于只停留在Syntax阶段，没有去深究语言的内在。<br>之前在学习C++的时候，老师也讲过一些内存方面…例如一段很简单的代码，在C++中会造成死循环…代码片段我还是没找到…<br>在学编译原理的时候，也学过词法分析、语法树等等…但是总是来说对于语言还是又一个模糊的概念<br>近期在coursera看一门课程，收获很大。刚开始看视频，因为自己的英语能力薄弱，刚开始看的时候，恨不得每句话都Google tanslate一遍，看多了就习惯了，因为大部分的术语你已经知道意思了，所以能知道大概的意思。Google翻译的意思，因为不知道术语所以翻译出来也很奇特。目前是以ML为例讲解的</p>
<h3 id="variable-binding"><a href="#variable-binding" class="headerlink" title="variable binding"></a>variable binding</h3><p>变量的绑定主要包括两个环境：静态环境记录了变量的类型；动态环境记录了变量的值</p>
<pre class="line-numbers language-ML"><code class="language-ML">val x = 34
(* static env : x : int *)
(* dynamic env : x -> 34 *)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="rules-to-expressions"><a href="#rules-to-expressions" class="headerlink" title="rules to expressions"></a>rules to expressions</h3><p>它共有三个部分：语法检查、类型检查和评估规则</p>
<pre class="line-numbers language-ML"><code class="language-ML">Syntax:
  if el then e2 else e3
  where if, then, and else are keywords and
  e1, e2, and e3 are subespressions

Type-checking:
  first el must have bool type
  e2 and e3 can hav any type(let`s call it t), but they
  must have the same type t
  the type of the entire expression is also t

Evalustion rules:
  first evalustion el to a value call it v1
  if it`s true, evaluate e2 and that result is the whole expression`s result
  else, evaluate e3 and that result is the whole expression`s result
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="shadowing"><a href="#shadowing" class="headerlink" title="shadowing"></a>shadowing</h3><p>当你重复声明相同的变量时，之前声明的值就会被覆盖，当你在REPL中看它的值的时候，就会变成hidden value，所以不建议重复声明变量</p>
<pre class="line-numbers language-ML"><code class="language-ML">val x = 34
val x = 45    (* this is not assiginment statement *)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>ML语言没有for循环，所以在对于list类型的数据，会尝试使用递归去解决问题，但是小心哦，不恰当的使用递归，会使运行次数呈指数式增长。<br>下面是求list中的最大值，可以简单粗暴的理解成求数组中的最大值</p>
<pre class="line-numbers language-ML"><code class="language-ML">fun bad_max(numbers: int list) =
  if null numbers
  then 0
  else if null tl numbers
  then hd numbers
  else if hd numbers > bad_max(tl numbers)
  then hd numbers
  else bad_max(tl numbers)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面代码逻辑清晰，通俗易懂，但是使用的时候，假如数组中的数是从大到小排列时，程序运行速度很快；相反，数组中的数若是从小到大排列，当数组是[1,…30]时，你就会发现有延迟…讲师用了一张图给你讲解<br><img src="http://res.cloudinary.com/dwudaridr/image/upload/v1503738949/WX20170825-142135_2x_oq3vsb.png" alt=""></p>
<p>优化的方法是：你可以将<code>bad_max(tl numbers)</code>的值赋予一个变量，这样，每次程序运行时<code>bad_max(tl numbers)</code>只会执行一遍。这里使用了<code>let...in...end</code>，在这个课程中，作者也讲解了作用域的问题，例如子作用域的值回覆盖父作用域的值…</p>
<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>每门语言都会提供关键字来提高代码的可读性，在适当的地方记得使用</p>
<h3 id="调试错误"><a href="#调试错误" class="headerlink" title="调试错误"></a>调试错误</h3><p>调试错误时，一定要有耐心…</p>
]]></content>
      
        <categories>
            
            <category> 编程语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编程语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[week4]]></title>
      <url>/2017/08/20/week4/</url>
      <content type="html"><![CDATA[<p><code>只想睡觉...</code></p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[npm-package]]></title>
      <url>/2017/08/17/npm-package/</url>
      <content type="html"><![CDATA[<h3 id="写包的初衷"><a href="#写包的初衷" class="headerlink" title="写包的初衷"></a>写包的初衷</h3><p>项目中很多地方用到相同的代码段，做其他项目的时候，也会用到这个功能，于是，大哥让我写一个包，供目前以及以后的项目使用</p>
<h3 id="提供的功能"><a href="#提供的功能" class="headerlink" title="提供的功能"></a>提供的功能</h3><p>在<a href="https://gmis.jiqizhixin.com/" target="_blank" rel="noopener">机器之心</a>这个页面，上面的nav会根据滚动条的位置进而改变active状态，同时，点击nav中的每个链接，页面也会滚动到相应的section。这个功能很常见。<br>目前，包提供的两种形式：</p>
<ol>
<li>使用锚链接：你通过点击nav中的链接，通过锚点来使页面滚动到相应的section；同时，滚动条的位置改变时，会更改页面的hash，nav的active也会改变。</li>
<li>使用点击事件：你通过点击nav中的链接，通过获得元素的data-index来确定相应的section，所以你必须为nav中的item添加data-index属性；同时，滚动条的位置改变时，nav的active也会改变。</li>
</ol>
<h3 id="项目的地址"><a href="#项目的地址" class="headerlink" title="项目的地址"></a>项目的地址</h3><p><a href="https://github.com/wukong1995/nav-slide" target="_blank" rel="noopener">点击这去仓库</a><br>具体的参数请查看readme</p>
<h3 id="项目发布的过程"><a href="#项目发布的过程" class="headerlink" title="项目发布的过程"></a>项目发布的过程</h3><ol>
<li>新建一个文件夹，<code>npm init</code>来填写包的信息</li>
<li>编写代码</li>
<li>完成代码编写，若你使用ES6或者ES7的语法，需要使用babel转换一下</li>
<li><code>npm login</code></li>
<li><code>npm publish</code></li>
<li>到这你的包发布成功，若更新包，记得要改package.json中的version</li>
</ol>
<h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><ol>
<li>完成代码编写后，直接发布了，使用的时候报错：import那报错；我以为是因为没有因为代码压缩，于是进行了代码的压缩，发现并没有什么软用；因为项目使用webpack打包，就想是不是因为没有打包，于是就开始了打包，结果项目还是报错。边上网边查，我还以为是代码写错了…；最后，看了其他包的样子，发现是使用babel打包的，解决了这个大问题。</li>
<li>若你安装不上一个包，报错说是因为名字重复了：不是文件夹的名字和包的名字重复了，而是你的项目的package.json中的name和包的名字重复了…</li>
<li>自己坑自己，代码变量拼写错误，最近老是犯这个错误😔</li>
</ol>
<p>终结～</p>
]]></content>
      
        <categories>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES7-decorator]]></title>
      <url>/2017/08/13/ES7-decorator/</url>
      <content type="html"><![CDATA[<h3 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h3><p>对于装饰模式，现在还剩下鸡腿堡+香菜+辣椒的记忆。<br>这个是装饰模式的一个例子：有一个<code>汉堡</code>的抽象构件，<code>鸡腿堡</code>是具体构件，<code>香菜</code>和<code>辣椒</code>都是具体的装饰角色。现在我想计算鸡腿堡+香菜+辣椒的价格</p>
<h4 id="针对的问题"><a href="#针对的问题" class="headerlink" title="针对的问题"></a>针对的问题</h4><p>你想要动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式相比生成子类更为灵活。不改变接口的前提下，增强所考虑的类的性能。<br>何时使用：</p>
<ol>
<li>需要扩展一个类的功能，或给一个类增加附加责任。</li>
<li>需要动态的给一个对象增加功能，这些功能可以再动态地撤销。</li>
<li>需要增加一些基本功能的排列组合而产生的非常大量的功能，从而使继承变得不现实。</li>
</ol>
<h3 id="es7中的装饰器"><a href="#es7中的装饰器" class="headerlink" title="es7中的装饰器"></a>es7中的装饰器</h3><p>es7新增的decorator 属性，它借鉴自 Python，在 Python 里，decorator 实际上是一个 wrapper，它作用于一个目标函数，对这个目标函数做一些额外的操作，然后返回一个新的函数。</p>
<h4 id="装饰property"><a href="#装饰property" class="headerlink" title="装饰property"></a>装饰property</h4><p>ES2016装饰器是一个返回函数的表达式，可以将target，name和property描述符作为参数。你可以通过在装饰器前加一个“@”字符来应用它，并将其放置在您想要装饰的顶部。可以为类或属性定义装饰器。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    <span class="token function">meow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> say meow`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 如果给meow方法加上可读属性</span>
<span class="token comment" spellcheck="true">// 定义一个装饰器</span>
<span class="token keyword">function</span> readonly <span class="token punctuation">(</span>target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    descriptor<span class="token punctuation">.</span>writeable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> descriptor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    @readonly
    <span class="token function">meow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> say meow`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 此时你尝试修改meow，就会报错</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">// 在这里推荐一个module： core-decorators</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="装饰class"><a href="#装饰class" class="headerlink" title="装饰class"></a>装饰class</h4><p>在这种情况下，装饰器将使用目标target的构造函数。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">hero</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    target<span class="token punctuation">.</span>isHero <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

@hero
<span class="token keyword">class</span> <span class="token class-name">MyHero</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>MyHero<span class="token punctuation">.</span>isHero<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>还可以进一步扩展，为装饰功能提供参数。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">hero</span><span class="token punctuation">(</span>isHero<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        target<span class="token punctuation">.</span>isHero <span class="token operator">=</span> isHero<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 你可以写成ES6的形式</span>
<span class="token comment" spellcheck="true">// const hero = isHero => target => target.isHero = isHero;</span>
@<span class="token function">hero</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">MyHero</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>MyHero<span class="token punctuation">.</span>isHero<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841" target="_blank" rel="noopener">参考链接</a></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> es7 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[week3]]></title>
      <url>/2017/08/13/week3/</url>
      <content type="html"><![CDATA[<h3 id="❓psd转html"><a href="#❓psd转html" class="headerlink" title="❓psd转html"></a>❓psd转html</h3><p>首先你拿到设计图应该做什么？我的做法是浏览一下整个页面，找出每个模块的共同点。之后开始搭建html，再写css，最后写js。昨天拿到设计图，按照这样的模式去做。可是在最后添加icon时犯了难，因为在icon库里面没有找到合适的，就想着在psd中直接导出icon，可是这时候去看psd的时候，发现整个模块是一个图层，这个时候犯了难，我不知道设计者这样做的意图？再接着我将整个模块作为一个png导出，直接放在页面上，我感觉这样做是不对的，最后的方法是将需要的图标裁剪出来，多个图标但在一个png中。<br>这次给我一个提示：你拿到设计图第一件事是需要干什么？浏览页面的时候，是不是需要将每个模块的所在的图层全都要过一遍以及注意事项…</p>
<h3 id="❓一个带有渐变颜色的圆形边框"><a href="#❓一个带有渐变颜色的圆形边框" class="headerlink" title="❓一个带有渐变颜色的圆形边框"></a>❓一个带有渐变颜色的圆形边框</h3><p>首先为了使div带有渐变颜色的边框，于是设置它的border-image是一个渐变颜色，虽然边框是渐变的了，当时它没有圆角，即使再改变它的border-radius也不会有作用。👉我在stackoverflow上找到了解决方法<a href="https://stackoverflow.com/questions/5706963/possible-to-use-border-radius-together-with-a-border-image-which-has-a-gradient" target="_blank" rel="noopener">点击这里</a>。但是这种实现还是有个缺点，就是div必须设置一个背景色，进而来掩盖它的after伪元素的背景色。但是我想要的效果是它的背景色是透明的，没有找到好的解决办法，就找了一个和背景色相近的颜色去代替😔。这个偷懒的方法，期待完美的解决方案…</p>
<h3 id="❓css画出文件夹📁的轮廓"><a href="#❓css画出文件夹📁的轮廓" class="headerlink" title="❓css画出文件夹📁的轮廓"></a>❓css画出文件夹📁的轮廓</h3><p>这个问题最难的部分是画出文件夹📁上方那个弧度，没有什么好的办法，就是用两个元素的<code>border-radius</code>连接而成，理所当然的，画出的轮廓有些奇怪…因为<code>border-radius</code>越大，边框的弧度久越大，可见的border宽度会越来越窄，所以会有一种不圆滑的感觉。感觉我的想法有些奇怪…</p>
<h3 id="如何做出宽高成比例的div"><a href="#如何做出宽高成比例的div" class="headerlink" title="如何做出宽高成比例的div"></a>如何做出宽高成比例的div</h3><p>父容器设置<code>width</code>和<code>padding</code>，padding设置百分比，padding设置百分比之后和width相关。子容器飘在父容器上width和height等于父容器即可。</p>
<h3 id="❓es7装饰器"><a href="#❓es7装饰器" class="headerlink" title="❓es7装饰器"></a>❓es7装饰器</h3><p>大哥说：没有什么是包不能解决的。查看了代码是使用了装饰器。</p>
<h3 id="js中的offsetTop和jq中的offset-、position"><a href="#js中的offsetTop和jq中的offset-、position" class="headerlink" title="js中的offsetTop和jq中的offset()、position()"></a>js中的offsetTop和jq中的offset()、position()</h3><p>使用起来还是不等同的，具体的得去查看源码…</p>
<h3 id="rails-on-ruby"><a href="#rails-on-ruby" class="headerlink" title="rails on ruby"></a>rails on ruby</h3><p>在查询的时候，能进行include的就不要在jbuilder里面再去查询一遍。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[week2]]></title>
      <url>/2017/08/05/week2/</url>
      <content type="html"><![CDATA[<h3 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h3><p>写分页插件，我开始的想法是：</p>
<ol>
<li>判断是否显示“上一页”</li>
<li>判断是否显示“第一页”</li>
<li>判断是否显示“…”、”current-2”、”current-1”</li>
<li>判断是否显示 current页面</li>
<li>判断是否显示”current+1”、”current+2”、“…”</li>
<li>判断是否显示“最后一页”</li>
<li>判断是否显示“最后一页”</li>
</ol>
<p>我的目的是最少要显示cuurent周围的四个number，按照这个想法写出来，当cuurent为1时，只会显示123三个number，而我的预期是现实12345这五个number😔调整一下做法，将上面的3-5合并，<code>left</code>和<code>right</code>表示<code>current-2</code>和<code>current+2</code>，在<code>left&lt;0</code>时候，将<code>right</code>加上<code>left</code>的相反数，<code>right&gt;total</code>同理<br>最后，我还是找了一个插件用在项目中，👉插件的名字是：react-paginate，css部分需要你自己去写…</p>
<h3 id="react-and-jquery"><a href="#react-and-jquery" class="headerlink" title="react and jquery"></a>react and jquery</h3><p>目前有一个container的组件，它的子组件是list和detail，list的子组件是item，点击item，detail组件会显示，显示效果是通过增加删除类名实现的。想着组件传值比较麻烦，于是就在方法里面直接使用jq早啊道元素控制。大哥告诉我，这个解决办法是不推荐的。👉正确的做法是使用state。通过改变state的值，进而改变元素的class。</p>
<h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p>还记得之前的一个面试问题：视频有最热视频、点赞最多视频、其他视频，每次去服务器要十个数据…由于用户使用量很多，每次去数据库查询，访问量太大。这样的话，👉可以使用redis去做缓存，这样取数据库可以直接取缓存中取，设置一个时间去更新redis即可。<br>现在又一个需求，是记录每天用户登录网站的数量。👉方法一：给用户表增加一个最后登录时间的列，每天定时执行程序，统计一下最后登录时间是昨天的用户数量。这个方法中，选择什么时候去执行程序很重要，要不然就会有漏网之鱼。👉方法二：最粗暴的办法是，在redis中创建一个字段，它是一个数组，每次知道用户登录的时候，就将用户的id<code>push</code>进数组，每天用户的登录的数量，直接通过数组的长度就可以得到。这个方法的缺点就是：用户的<code>id</code>字段也是一串很长的字符串，数组会特别大。👉方法三：在redis中创建一个字段，它是一个字符串，默认是长度是用户的数量的0，若用户登录，就将对应的位置为1。在这三个方法中，第三个方法是最优方法。<br>还有一个可以做缓存的数据库叫memcache，它和redis的区别就是，redis可以持久化。</p>
<h3 id="插件js-base64"><a href="#插件js-base64" class="headerlink" title="插件js-base64"></a>插件js-base64</h3><p><code>Graphql</code>中自带的分页，after字段是base64的字符串。前端传值就需要将数字转化成base64位的字符串。</p>
<pre><code>import { Base64 } from &#39;js-base64&#39;;
const cursor = Base64.encode(number);
</code></pre><p>最后说句题外话，任何炒作都不能改变一个东西没落的事实，与其去炒作，还不如用脑子把东西做的更好。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[douban]]></title>
      <url>/2017/08/02/douban/</url>
      <content type="html"><![CDATA[<h3 id="在千里码刷题的时候看到了这个题目"><a href="#在千里码刷题的时候看到了这个题目" class="headerlink" title="在千里码刷题的时候看到了这个题目"></a>在千里码刷题的时候看到了这个题目</h3><p>题目要求是爬取豆瓣评分最高的250部电影的总分…</p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>爬数据，首先是实用http模块去爬取全部的HTML<br>然后使用cheerio去得到HTML中自己想要的数据<br>最后每页得到的总分相加</p>
<h3 id="题目中的坑"><a href="#题目中的坑" class="headerlink" title="题目中的坑"></a>题目中的坑</h3><p>1、因为豆瓣是https开头，使用https模块，具体的方法没看，使用还是按照http模块来的<br>2、如果按照正常的逻辑去写代码，最后得到的总分是0，因为https抓取数据是异步进行的<br>3、使用promise来进行处理，首先需要等到25页的数据全部抓取完毕，再进行计算总分，这时候想到了promise.all这个方法。<br>4、第一次尝试将使用promise，我在getData中直接将resolve(res)，等到下面使用的时候，res又是一个异步执行，这下尴尬😅了，于是调整顺序，在res执行end事件的时候再resolve<br>5、js中浮点类型计算的坑，我直接暴力的*10，最后在／10</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>爬评分时，顺便把电影名也爬下来了，我准备把没看的都补上😄</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> https <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'https'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cheerio'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> sumScore <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">let</span> allMovie <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token function">filterMovie</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>
  <span class="token keyword">let</span> movieList <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.grid_view li'</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> movies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  movieList<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.bd .rating_num'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> movieName <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.hd a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s+/g</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>
    movies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      name<span class="token punctuation">:</span> movieName<span class="token punctuation">,</span>
      score
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    total <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> total<span class="token punctuation">,</span> movies <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    https
      <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token string">''</span>
        res
          <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            html <span class="token operator">+</span><span class="token operator">=</span> data
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">filterMovie</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> funcArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">225</span><span class="token punctuation">;</span> i<span class="token operator">=</span>i <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token string">`https://movie.douban.com/top250?start=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>
  funcArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">getData</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

Promise
  <span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>funcArr<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>list <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> total<span class="token punctuation">,</span> movies <span class="token punctuation">}</span> <span class="token operator">=</span> list
      sumScore <span class="token operator">+</span><span class="token operator">=</span> total
      allMovie <span class="token operator">=</span> allMovie<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>movies<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"总分："</span> <span class="token operator">+</span> sumScore <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span>
    allMovie<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>movie <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> score <span class="token punctuation">}</span> <span class="token operator">=</span> movie<span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"评分："</span> <span class="token operator">+</span> score <span class="token operator">+</span> <span class="token string">"，影片名："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"出错了"</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果你有更好的想法，欢迎交流👏</p>
]]></content>
      
        <categories>
            
            <category> 代码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[work1]]></title>
      <url>/2017/07/28/week1/</url>
      <content type="html"><![CDATA[<h3 id="收获一"><a href="#收获一" class="headerlink" title="收获一"></a>收获一</h3><p>turbolinks是一款将网站变成spa的一个插件，看到文档的的某些地方和ionic有些许相似之处，于是就将之前做webApp的疑问提了出来：打开页面刚开始进的页面是主页还是登录页？经过讨论后，👉是主页；为App添加一个拦截器，对于用户登录后才能使用的页面，进入时，首先在拦截器中判断有无用户登录…另外，两者之间还有相同的一点：都会提前缓存页面。之前做app的时候，添加了拦截器，因为app首先打开进入主页（这时候开始缓存和主页相关的页面），判断用户未登录，会重定向到用户登录页，这时候就会发生页面的闪烁，关于这个问题我没有查😶，我很暴力的加了一个spash….<br>另外，关于支付宝账单页，数据是如何传递，数据格式如何设计，尝试去爬数据也没看到数据长什么样子的😑，于是目前的想到的方法是，👉后端每次去数据库取count条数据，在按照日期分组后，传到前端；前端的处理方式是：判断得到的第一个月数据与本地现有的最后一个月的数据时候是同年同月，如果是就concat第一个月的数据，剩下的数据直接push。</p>
<h3 id="收获二"><a href="#收获二" class="headerlink" title="收获二"></a>收获二</h3><p>在将加载更多全都迁移至react的过程中，我在大哥的基础上，比这葫芦画瓢，完成了页面的重构…但是现在有一个问题是：假如全用react去渲染，那么爬虫就爬不到数据，于是采用的方式是：render的时候，会在页面上先渲染一部分数据，剩下的就交给react来做；但是apollo目前提供的解决方案是：假如你将数据渲染到页面上时，会先查找cache中有没有数据，如果有就将数据渲染到页面上；否则发出网络请求。这意味着，只要我将插件渲染到页面上，就会发出网络请求，这一条网络请求是不需要的。因为用户可能不会浏览很多数据，于是想到的办法是：👉等用户去点击加载更多的时候，再去发送网络请求。查找apollo的文档，能想到的办法是：👉预先向cache中写去空数据，这样渲染时，在cache中找到数据，就不发送请求了，但是我不知如何写入数据😖，这是一个预留问题😞很忧伤的一个问题…待续…</p>
<h3 id="收获三"><a href="#收获三" class="headerlink" title="收获三"></a>收获三</h3><p>知道了reduce这个优雅的方法，promise也提供了这个方法….</p>
<h3 id="收获四"><a href="#收获四" class="headerlink" title="收获四"></a>收获四</h3><p>在还原原型图时，更多的时间应该花费在如何设计HTML的结构上，再接下来再写css，最后再写js。这次做的时候，本来是设计好了还能符合要求的HTML结构，结果在写css的时候，发现现在的HTML不能达到预期，于是开始设计调整HTML，幸亏样式使用scss写的😉…还有一个，我看到排排站的元素，首先想到的不是ul&gt;li，而是直接用a标签去尝试解决…</p>
<h3 id="收获五"><a href="#收获五" class="headerlink" title="收获五"></a>收获五</h3><p>再看文档的时候，看到了一个新的名词：Vanilla JS；用Google translate翻译了叫奶味js😀，于是就去查它到底是何方神圣，原来它的另一个名字叫做javascript😅</p>
<h3 id="收获六"><a href="#收获六" class="headerlink" title="收获六"></a>收获六</h3><p>因为sublimen并没有完整配置，push上去的代码就跑不过测试。这次找到了eslint检测js的package,叫做SublimeLinter-contrib-eslingt，代码不通过有红色标识…</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Array的reduce方法]]></title>
      <url>/2017/07/28/reduce/</url>
      <content type="html"><![CDATA[<h3 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h3><p>第一次听说Array的reduce方法是在面试的时候<br>这次看到大哥写的一个函数，里面用了reduce，哇，真的好优雅。因为代码的重复片段太多，我尝试去封装一个通用函数，没有成功。于是大哥出动了。<br>目的是这样的：我可能需要data.user.article的值，或者需要data.article的值，或者需要data.categories.article的值，于是封装一个方法每次取到article的值。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 封装一个函数reg，参数为belongto，传递的参数分别是：['user'] [] [categories]</span>
<span class="token comment" spellcheck="true">// 函数内部的主要代码是</span>
<span class="token keyword">return</span> belongto<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> p<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span>article
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="reduce文档"><a href="#reduce文档" class="headerlink" title="reduce文档"></a>reduce文档</h3><h4 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h4><pre class="line-numbers language-javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>callback<span class="token punctuation">[</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>callback有四个参数：分别是accumulator(它是callback上一次返回的值或者是initialValue，前提是initialValue存在)、currentValue(正在使用的值)、currentIndex(正在使用的值在数组中的索引)、array(这个是循环的数组)；<br>initialValue：用作第一次调用回调的初始值，如果不提供此参数，则第一次调用回调的初始值是数组的第一个元素。为了保证安全，最好提供这个值</p>
<p>tip: 当数组为空时，若提供initialValue，则最后的返回值是initialValue，否则，报错；<br>     当数组不为空时，若提供initialValue，则循环从index为0开始；否则循环从index为1开始，accumulator此时为index为0的值。</p>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>回调函数的最后的返回值</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>求数组元素的总和（告别for循环）</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// sum is 6</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>连接数组</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// result is [0, 1, 2, 3, 4, 5]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>相同元素在数组中出现几次</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Tiff'</span><span class="token punctuation">,</span> <span class="token string">'Bruce'</span><span class="token punctuation">,</span> <span class="token string">'Alice'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> countedNames <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>allNames<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> allNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    allNames<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    allNames<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> allNames<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// countedNames is:</span>
<span class="token comment" spellcheck="true">// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[relay-apollo]]></title>
      <url>/2017/07/23/relay-apollo/</url>
      <content type="html"><![CDATA[<h3 id="使用relay的感受"><a href="#使用relay的感受" class="headerlink" title="使用relay的感受"></a>使用relay的感受</h3><p>初次接触relay，感觉上很臃肿，因为必须为每个组件设置container；若query层级嵌套很深，为了组件化，就必须将每一个react的component全部分开，在项目中，我写了六个组件，那么每个组件都需要container，写起来感觉满满的恶意。</p>
<h3 id="使用Apollo"><a href="#使用Apollo" class="headerlink" title="使用Apollo"></a>使用Apollo</h3><p>再次接触Apollo，看了文档，感觉和relay大同小异，与relay的不同是：无需为每个component设置container，最后写一个query就ok👌了。query也可以由多个fragment组成。另外，apollo也为angularjs提供了解决方案，有点想不明白🤔，angularjs本身就是双向数据绑定，为什么要对它提供解决方案…另外，Apollo虽然自身内部集成了redux，假如你的项目中使用了redux，你可以使用redux而不用Apollo内部的redux。</p>
<p>relay 因为container的存在，数据划分的比较严密，你只能在当前的container访问fragment中的的属性，不能访问父或子fragment的属性。而apollo直接使用的是请求得到的Object…<br>Apollo也可以和项目原有的redux相结合使用，relay不可以…<br>待续…<br>这次写的很匆忙，假如有不正确的地方，请指正，谢谢😊。</p>
]]></content>
      
        <categories>
            
            <category> graphql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react </tag>
            
            <tag> angularjs </tag>
            
            <tag> graphql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git]]></title>
      <url>/2017/07/22/git/</url>
      <content type="html"><![CDATA[<h3 id="使用git想要去合并两个commit"><a href="#使用git想要去合并两个commit" class="headerlink" title="使用git想要去合并两个commit"></a>使用git想要去合并两个commit</h3><p>今天好不容易完成了工作，睡觉的时候突然想到还有些小瑕疵，就想改正。但是改动范围很小，不好意思在commit一次，于是就想将两次commit合并在一起，但是我没有将最新的commit推送到远程分支，就直接合并了两个commit成了一个新的commit，在推送到远程时，也没有先进行pull的动作（👉每次push之前一定要进行pull的动作），导致远程commit和我合并的commit发生冲突，最后还需要手动merge。看了一下提交记录，吓坏了，本来我想合并commit，预计的commit只会在之前的基础上多一次commit，但是现在多了三次commit，这下坏了。<br>于是，上网查询，试了好几种办法。找到了一个很合适的办法</p>
<pre><code>git  reset HEAD^ --hard    //彻底回退到上次提交
git push origin 分支名 -f   // 强制推送到远程
</code></pre><p>这样操作以后，我的问题解决了</p>
<p>待续…</p>
<p>-补充—<br>最好不要不要强行push😕</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react-relay]]></title>
      <url>/2017/07/22/react-relay/</url>
      <content type="html"><![CDATA[<p>上次写感想还是2014的时候，那个时候是老师布置的作业（尴尬)<br>队长看到GraphQL很好，于是先拿一个功能来试手😊。<br>前端要使用GraphQL，最简单的方法是使用ajax发送query字符串。这个方法，若query嵌套层级太深，会导致query很长，长的让人接受不了；再者，假如数据变化，需要你手动的去改变DOM。项目中使用了react，于是队长给推荐了react-relay来配合GraphQL。<br>首先给的时间是看GraphQL和react-relay的文档，先瞄一眼relay的文档，感觉是层层嵌套，就先去看GraphQL的文档，relay的文档没有看完…😶</p>
<h3 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h3><p>开始在队长的鼓励下开始写relay，到了relay的官网上，看到有一个Demo，就把代码给copy下来，再根据文档理解了代码的意思，就开始尝试着写代码。写代码的过程有点别扭，刚开始接触，会犯一些错误。但是又不知道错误发生的原因，于是就开始google解决。也想吐槽一下文档，文档上说，fragment的name建议是fileName_propsName，于是为了名字短点，就全部改了，结果编译的时候，告诉我是must be。😢<br>代码终于不报错了，但是需要一个schema的文件。我想手写schema太繁琐了，也是去查有没有自动生成schema的插件，但是很遗憾，我找到都是配合node使用的（假如你有好的插件，请推荐给我，谢谢）。找啊找，找啊找，也没找到合适的，最终是队长上网找了一个工具生成的🤗。schema的问题解决。schema的存在是为了映射fragment的type。<br>这个时候，大哥过来问问我怎么样了，我告诉他，虽然安装了react-relay，可是文档上的方法不存在，我就很暴力的改了源码，将方法暴露出来。他告诉我relay现在有两个版本：classic和modern，modern是最新的。我弱弱的问一句，咱们用哪个版本，他说当然是最新的。我的内心在哭泣😭。既然只是版本的迭代，思想肯定没有太大的变化，于是打起精神来看文档。👉这里是我太心急了，直接看了Demo，就ctrl+f去直接搜方法了，没有整体的先浏览一下文档，要不然也不会有这个不可预料的情况。</p>
<h3 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h3><p>边看文档，边改我的代码。👉刚开始报错是“没有配置babel或者graphql写错了”，假如你的babel配置是按照文档来的，那最有可能的就是你的fragment或者query写错了。最简单的query可以正常的渲染出来了，因为是query中需要有参数，所以开始看如何使用参数。在查资料的时候，<a href="https://github.com/facebook/relay/issues/1700" target="_blank" rel="noopener">这个链接</a>给了我很大的帮助。但是在这个过程中，下面的错误伴随了我十个小时，我一直在尝试解决这个错误，于是上网查啊查 查啊查 查啊查<br><img src="http://upload-images.jianshu.io/upload_images/7018384-1d20f70b1bae001a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>也没找到答案</p>
<h3 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h3><p>大哥说他写出来了，我看了他的代码，对比我的代码，唯一的不同是，我将edges和node要写在不同的fragment中。我尝试在正确的代码上改成我设计的fragment，功能就报错了。我意识到，需要将edges和node写在同一个fragment中。👉出现这个错误的原因是，我已经封装好的fragment，出现这个错误，我全部的心思都放在了index.js，没有检查我封装好的组件。假如再来一次，我也会被困在这个error上出不来。之后因为还有一个加载更多的动作，于是我开始完成这个功能，在这个过程中，我学会了react父子组件如何传递消息。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>功能完成好了。但是在进行测试的时候，再看network时，加载更多这个按钮是通过first这个参数来进行请求数据，first的意思就是取前first数据，后端限制first只能取到50，即使可以取到1000，但是在网络上传输1000条数据，也是一笔庞大的负担。relay也提供了分页的container，但是没有研究出来是怎样使用的。于是relay需要更换….所以，没有一个很好的方式来解决这个问题。👉队长又给推荐了Apollo，接下来要去看Apollo了<br>待续…</p>
]]></content>
      
        <categories>
            
            <category> graphql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react </tag>
            
            <tag> graphql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[wechatPHP]]></title>
      <url>/2017/03/29/wechatPHP/</url>
      <content type="html"><![CDATA[<p>使用apache+php5.4n<br>1、打开apache配置文件httpd.conf<br>      搜索httpd-vhosts.conf，打开这一行的注释<br>2、打开apache所在目录下的，conf/extra/httpd-vhost.conf<br>  增加以下代码，保存</p>
<pre><code>&lt;VirtualHost *:80&gt;  
 DocumentRoot &quot;D:\WWW\car-xxxx\car&quot;  
 ServerName www.car-zones.com  
&lt;/VirtualHost&gt;  
&lt;Directory &quot;D:\WWW\car-xxxx\car&quot;&gt;  
    Options Indexes FollowSymLinks Includes ExecCGI  
    AllowOverride All  
    Order allow,deny  
    Allow from all  
&lt;/Directory&gt;
</code></pre><p>3、重启apache<br>4、打开c:/windows/system32/drivers/etc/hots<br>最后一行加入：www.car-xxxx.com<br>5、访问 www.car-xxxx.com<br>6、完成配置</p>
<p>第一次学习，记录一下</p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信公众号 </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dataTable]]></title>
      <url>/2017/03/26/dataTable/</url>
      <content type="html"><![CDATA[<p>偶然发现一个叫 dataTable  的组件，觉得很好用，于是研究了一番，下面是代码</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> lang <span class="token operator">=</span> <span class="token punctuation">{</span>  
  <span class="token string">"sProcessing"</span><span class="token punctuation">:</span> <span class="token string">"处理中..."</span><span class="token punctuation">,</span>  
  <span class="token string">"sLengthMenu"</span><span class="token punctuation">:</span> <span class="token string">"每页 _MENU_ 项"</span><span class="token punctuation">,</span>  
  <span class="token string">"sZeroRecords"</span><span class="token punctuation">:</span> <span class="token string">"没有匹配结果"</span><span class="token punctuation">,</span>  
  <span class="token string">"sInfo"</span><span class="token punctuation">:</span> <span class="token string">"当前显示第 _START_ 至 _END_ 项，共 _TOTAL_ 项。"</span><span class="token punctuation">,</span>  
  <span class="token string">"sInfoEmpty"</span><span class="token punctuation">:</span> <span class="token string">"当前显示第 0 至 0 项，共 0 项"</span><span class="token punctuation">,</span>  
  <span class="token string">"sInfoFiltered"</span><span class="token punctuation">:</span> <span class="token string">"(由 _MAX_ 项结果过滤)"</span><span class="token punctuation">,</span>  
  <span class="token string">"sInfoPostFix"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  
  <span class="token string">"sSearch"</span><span class="token punctuation">:</span> <span class="token string">"搜索:"</span><span class="token punctuation">,</span>  
  <span class="token string">"sUrl"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  
  <span class="token string">"sEmptyTable"</span><span class="token punctuation">:</span> <span class="token string">"表中数据为空"</span><span class="token punctuation">,</span>  
  <span class="token string">"sLoadingRecords"</span><span class="token punctuation">:</span> <span class="token string">"载入中..."</span><span class="token punctuation">,</span>  
  <span class="token string">"sInfoThousands"</span><span class="token punctuation">:</span> <span class="token string">","</span><span class="token punctuation">,</span>  
  <span class="token string">"oPaginate"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  
    <span class="token string">"sFirst"</span><span class="token punctuation">:</span> <span class="token string">"首页"</span><span class="token punctuation">,</span>  
    <span class="token string">"sPrevious"</span><span class="token punctuation">:</span> <span class="token string">"上页"</span><span class="token punctuation">,</span>  
    <span class="token string">"sNext"</span><span class="token punctuation">:</span> <span class="token string">"下页"</span><span class="token punctuation">,</span>  
    <span class="token string">"sLast"</span><span class="token punctuation">:</span> <span class="token string">"末页"</span><span class="token punctuation">,</span>  
    <span class="token string">"sJump"</span><span class="token punctuation">:</span> <span class="token string">"跳转"</span>  
  <span class="token punctuation">}</span><span class="token punctuation">,</span>  
 <span class="token string">"oAria"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  
    <span class="token string">"sSortAscending"</span><span class="token punctuation">:</span> <span class="token string">": 以升序排列此列"</span><span class="token punctuation">,</span>  
    <span class="token string">"sSortDescending"</span><span class="token punctuation">:</span> <span class="token string">": 以降序排列此列"</span>  
  <span class="token punctuation">}</span>  
<span class="token punctuation">}</span><span class="token punctuation">;</span>  

<span class="token keyword">var</span> table <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#sample"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dataTable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  
  language<span class="token punctuation">:</span>lang<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//提示信息  </span>
  autoWidth<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//禁用自动调整列宽  </span>
  processing<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//隐藏加载提示,自行处理  </span>
  serverSide<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//启用服务器端分页  </span>
  searching<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//禁用原生搜索  </span>
  search<span class="token punctuation">:</span> <span class="token punctuation">{</span>  
    <span class="token string">"search"</span><span class="token punctuation">:</span> <span class="token string">""</span>  
  <span class="token punctuation">}</span><span class="token punctuation">,</span>  
  ordering<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>  
  renderer<span class="token punctuation">:</span> <span class="token string">"bootstrap"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//渲染样式：Bootstrap和jquery-ui  </span>
  lengthChange<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  
  pageLength<span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">,</span>  
  rowId<span class="token punctuation">:</span> <span class="token string">'_id'</span><span class="token punctuation">,</span>  
  pagingType<span class="token punctuation">:</span> <span class="token string">"simple_numbers"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//分页样式：simple,simple_numbers,full,full_numbers  </span>
  columnDefs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>  
    <span class="token string">"targets"</span><span class="token punctuation">:</span> <span class="token string">'nosort'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//列的样式名  </span>
    <span class="token string">"orderable"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token comment" spellcheck="true">//包含上样式名‘nosort’的禁止排序  </span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  
  ajax<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> settings<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token comment" spellcheck="true">//封装请求参数  </span>
    <span class="token keyword">var</span> param <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  
    param<span class="token punctuation">.</span>keyword <span class="token operator">=</span> data<span class="token punctuation">.</span>search<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  
    param<span class="token punctuation">.</span>limit <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//页面显示记录条数，在页面显示每页显示多少项的时候  </span>
    param<span class="token punctuation">.</span>start <span class="token operator">=</span> data<span class="token punctuation">.</span>start<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开始的记录序号  </span>
    param<span class="token punctuation">.</span>page <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>start <span class="token operator">/</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前页码  </span>
    <span class="token comment" spellcheck="true">//console.log(param);  </span>
    <span class="token comment" spellcheck="true">//ajax请求数据  </span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  
      type<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>  
      url<span class="token punctuation">:</span> <span class="token string">"/payment/result"</span><span class="token punctuation">,</span>  
      cache<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//禁用缓存  </span>
      data<span class="token punctuation">:</span> param<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//传入组装的参数  </span>
      dataType<span class="token punctuation">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>  
      success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>  

        <span class="token comment" spellcheck="true">//封装返回数据  </span>
        <span class="token keyword">var</span> returnData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  
        returnData<span class="token punctuation">.</span>draw <span class="token operator">=</span> data<span class="token punctuation">.</span>draw<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里直接自行返回了draw计数器,应该由后台返回  </span>
        returnData<span class="token punctuation">.</span>recordsTotal <span class="token operator">=</span> result<span class="token punctuation">.</span>totalCount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回数据全部记录  </span>
        returnData<span class="token punctuation">.</span>recordsFiltered <span class="token operator">=</span> result<span class="token punctuation">.</span>totalCount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后台不实现过滤功能，每次查询均视作全部结果  </span>
        returnData<span class="token punctuation">.</span>data <span class="token operator">=</span> result<span class="token punctuation">.</span>payment<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回的数据列表  </span>
        <span class="token comment" spellcheck="true">//调用DataTables提供的callback方法，代表数据已封装完成并传回DataTables进行渲染  </span>
        <span class="token comment" spellcheck="true">//此时的数据需确保正确无误，异常判断应在执行此回调前自行处理完毕  </span>
        <span class="token function">callback</span><span class="token punctuation">(</span>returnData<span class="token punctuation">)</span><span class="token punctuation">;</span>  
      <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span><span class="token punctuation">,</span>  
  <span class="token comment" spellcheck="true">//列表表头字段  </span>
  columns<span class="token punctuation">:</span> <span class="token punctuation">[</span>   
    <span class="token punctuation">{</span>    
      className<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>    
      orderable <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    
      bSortable <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    
      data <span class="token punctuation">:</span> <span class="token string">"_id"</span><span class="token punctuation">,</span>    
      render <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> type<span class="token punctuation">,</span> row<span class="token punctuation">,</span> meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>    
        <span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token string">'&lt;label class="position-relative">'</span><span class="token punctuation">;</span>    
        content <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;input type="checkbox" class="ace" value="'</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">'" />'</span><span class="token punctuation">;</span>    
        content <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;span class="lbl">&lt;/span>'</span><span class="token punctuation">;</span>    
        content <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;/label>'</span><span class="token punctuation">;</span>    
        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    
      <span class="token punctuation">}</span>       
    <span class="token punctuation">}</span><span class="token punctuation">,</span>    
    <span class="token punctuation">{</span>   
      <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token string">"type"</span><span class="token punctuation">,</span>  
      render<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span>type<span class="token punctuation">,</span>full<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  
        <span class="token keyword">if</span><span class="token punctuation">(</span>date <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
          content <span class="token operator">=</span> <span class="token string">'收入'</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
          content <span class="token operator">=</span> <span class="token string">'支出'</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">return</span> content<span class="token punctuation">;</span>  
      <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span><span class="token punctuation">,</span>  
    <span class="token punctuation">{</span> <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token string">"name"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  
    <span class="token punctuation">{</span> <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token string">"price"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  
    <span class="token punctuation">{</span> <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token string">"product_type"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  
    <span class="token punctuation">{</span> <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token string">"meta.createAt"</span><span class="token punctuation">,</span>  
      render<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span>type<span class="token punctuation">,</span>full<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
      <span class="token keyword">return</span> date<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
      <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span><span class="token punctuation">,</span>  
    <span class="token punctuation">{</span>   
      bSortable <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    
      visible <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   
      data <span class="token punctuation">:</span> <span class="token string">"_id"</span><span class="token punctuation">,</span>       
      render <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> type<span class="token punctuation">,</span> full<span class="token punctuation">)</span> <span class="token punctuation">{</span>    
        <span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token string">'&lt;div class="hidden-sm hidden-xs action-buttons">'</span><span class="token operator">+</span>  
        <span class="token string">'&lt;a href="/payment/detail/'</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">'" class="blue">'</span><span class="token operator">+</span>  
        <span class="token string">'&lt;i class="ace-icon fa fa-search-plus bigger-130">&lt;/i>'</span><span class="token operator">+</span>  
        <span class="token string">' &lt;/a>'</span><span class="token operator">+</span>  
        <span class="token string">'&lt;a href="javascript:void(0);" data-id="'</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">'" class="delete_btn red">'</span><span class="token operator">+</span>  
        <span class="token string">'&lt;i class="ace-icon fa fa-trash-o bigger-130">&lt;/i>'</span><span class="token operator">+</span>  
        <span class="token string">'&lt;/a>'</span><span class="token operator">+</span>  
        <span class="token string">'&lt;/div>'</span><span class="token operator">+</span>  
        <span class="token string">'&lt;div class="hidden-md hidden-lg">'</span><span class="token operator">+</span>  
        <span class="token string">'  &lt;div class="inline position-relative">'</span><span class="token operator">+</span>  
        <span class="token string">'    &lt;button data-toggle="dropdown" data-position="auto" class="btn btn-minier btn-yellow dropdown-toggle">&lt;i class="ace-icon fa fa-caret-down icon-only bigger-120">&lt;/i>&lt;/button>'</span><span class="token operator">+</span>  
        <span class="token string">'&lt;ul class="dropdown-menu dropdown-only-icon dropdown-yellow dropdown-menu-right dropdown-caret dropdown-close">'</span><span class="token operator">+</span>  
        <span class="token string">' &lt;li>&lt;a href="/payment/detail/'</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">'" data-rel="tooltip" title="" data-original-title="View" class="tooltip-info">&lt;span class="blue">&lt;i class="ace-icon fa fa-search-plus bigger-120">&lt;/i>&lt;/span>&lt;/a>'</span><span class="token operator">+</span>  
        <span class="token string">'&lt;li>&lt;a data-rel="tooltip" title="" data-original-title="Delete" data-id="'</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">'" class="delete_btn tooltip-error">&lt;span class="red">&lt;i class="ace-icon fa fa-trash-o bigger-120">&lt;/i>&lt;/span>&lt;/a>&lt;/li>'</span><span class="token operator">+</span>  
        <span class="token string">'&lt;/ul>&lt;/div>&lt;/div>'</span><span class="token punctuation">;</span>  

        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    
      <span class="token punctuation">}</span>     
    <span class="token punctuation">}</span>   
  <span class="token punctuation">]</span>  
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token comment" spellcheck="true">//此处需调用api()方法,否则返回的是JQuery对象而不是DataTables的API对象  </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[moment]]></title>
      <url>/2016/12/11/moment/</url>
      <content type="html"><![CDATA[<p>首先，好久没有来多博客了</p>
<p>今天在学习MongoDB时，需要格式化时间，上网查了一下，nodejs中的moment模块可以格式化时间。<br>首先，mongodb中有一个字段是Date类型需要一个默认值，就是当前时间，可以使用以下代码来格式化时间</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用以下代码也是可以的</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>目前只使用这两个方法，以后再来补充<br>——————————————————分割线———————————-<br>在存入<a href="http://lib.csdn.net/base/mysql" target="_blank" rel="noopener">数据库</a>时，我已经格式化日期了，取出来发现是没有格式的数据，很纳闷，不知道原因，找到了解决办法。<br>express我是用的jade模板，<br>在app.js中加入</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在jade中读取日期数据使用</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">#<span class="token punctuation">{</span><span class="token function">moment</span><span class="token punctuation">(</span>friend<span class="token punctuation">.</span>createTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>取出来的日期是格式化的</p>
]]></content>
      
        <categories>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[useMongoDB]]></title>
      <url>/2016/12/11/useMongoDB/</url>
      <content type="html"><![CDATA[<p>最近在学习mongdb</p>
<p>以下是使用mongoose模块来保存数据</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">var</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

<span class="token comment" spellcheck="true">// 连接字符串格式为mongodb://主机/数据库名  </span>
mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://localhost/test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">var</span> db <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">;</span>  
<span class="token comment" spellcheck="true">//输出连接日志  </span>
db<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Connection error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

db<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Mongo working!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

<span class="token comment" spellcheck="true">// 创建schema  </span>
<span class="token keyword">var</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span>  
<span class="token keyword">var</span> userSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  
    name<span class="token punctuation">:</span> String<span class="token punctuation">,</span>  
    age<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>  
    createTime<span class="token punctuation">:</span> <span class="token punctuation">{</span>  
        type<span class="token punctuation">:</span> Date<span class="token punctuation">,</span>  
        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>  
    <span class="token punctuation">}</span><span class="token punctuation">,</span>  
    updateTime<span class="token punctuation">:</span> <span class="token punctuation">{</span>  
        type<span class="token punctuation">:</span> Date<span class="token punctuation">,</span>  
        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>  
    <span class="token punctuation">}</span><span class="token punctuation">,</span>  
    telphone<span class="token punctuation">:</span> String  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment" spellcheck="true">// 构建model  </span>
<span class="token keyword">var</span> User <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">,</span> userSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment" spellcheck="true">//构建model实例  </span>
<span class="token keyword">var</span> userData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  
    name<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>  
    age<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>  
    telphone<span class="token punctuation">:</span> <span class="token string">'18766560229'</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

<span class="token comment" spellcheck="true">// 保存数据  </span>
userData<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Save success'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>还有，输出信息有以下信息：<br>(node:7780) DeprecationWarning: Mongoose: mpromise (mongoose’s default promise library) is deprecated, plug in your own promise library instead: <a href="http://mongoosejs.com/docs/promises.html" target="_blank" rel="noopener">http://mongoosejs.com/docs/promises.html</a><br>也不不知道是什么意思，需要补充</p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ngInterpolate]]></title>
      <url>/2016/09/17/ngInterpolate/</url>
      <content type="html"><![CDATA[<p>$interpolate服务返回一个函数，用来在特定的上下文中运算表达式。<br>示例：<br>html代码：</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ng-controller</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myController<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ng-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>to<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">ng-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emailBody<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span>{{previewText}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>js代码：</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">angular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">'myApp'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  
  <span class="token punctuation">.</span><span class="token function">controller</span><span class="token punctuation">(</span><span class="token string">'myController'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'$scope'</span><span class="token punctuation">,</span><span class="token string">'$interpolate'</span><span class="token punctuation">,</span>  
    <span class="token keyword">function</span><span class="token punctuation">(</span>$scope<span class="token punctuation">,</span>$interpolate<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
      $scope<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'emailBody'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">if</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
          <span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token function">$interpolate</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  
          $scope<span class="token punctuation">.</span>previewText <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">{</span>to<span class="token punctuation">:</span>$scope<span class="token punctuation">.</span>to<span class="token punctuation">}</span><span class="token punctuation">)</span>  
        <span class="token punctuation">}</span>  
      <span class="token punctuation">}</span><span class="token punctuation">)</span>  
    <span class="token punctuation">}</span>  
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用：在输入框中输入你的email地址，在文本框中输入，previewText中的值即为to的值</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> angularjs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java1]]></title>
      <url>/2016/07/20/java1/</url>
      <content type="html"><![CDATA[<p>Java已经忘了差不多了，最近又需要重新捡起Java。<br>对于一副扑克牌共有54张，扑克牌洗牌就是将这54张牌没有规律的输出出来，<br>用ArrayList实现，本质是54个数的随机输出，穿了身衣服，输出出来就好看多了</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Poker</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">poker</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> huase <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"红桃"</span><span class="token punctuation">,</span><span class="token string">"黑桃"</span><span class="token punctuation">,</span><span class="token string">"梅花"</span><span class="token punctuation">,</span><span class="token string">"方块"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> number <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token string">"7"</span><span class="token punctuation">,</span><span class="token string">"8"</span><span class="token punctuation">,</span><span class="token string">"9"</span><span class="token punctuation">,</span><span class="token string">"10"</span><span class="token punctuation">,</span><span class="token string">"J"</span><span class="token punctuation">,</span><span class="token string">"Q"</span><span class="token punctuation">,</span><span class="token string">"K"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  
        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">/</span><span class="token number">4</span> <span class="token operator">></span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">%</span><span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                str <span class="token operator">+=</span> <span class="token string">"小鬼"</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">%</span><span class="token number">4</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                str <span class="token operator">+=</span> <span class="token string">"大鬼"</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
            str <span class="token operator">+=</span> huase<span class="token punctuation">[</span>num<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> number<span class="token punctuation">[</span>num<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">return</span> str<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>public class Client {  

    public static void main(String[] args) {  
        // 定义变量  
        ArrayList list = new ArrayList();  
        Random random = new Random();  
        Poker poker = new Poker();  
        int i = 0;  

        // 向数组中增加数字  
        for(i=0;i&lt;54;i++) {  
            list.add(poker.poker(i));  
        }  

        // 随机输出数组中的每个数字  
        int length = list.size();  
        for(i=0;i&lt;length;i++) {  
            //随机生成数组下标  
            int num = random.nextInt(list.size());  
            //取出数字  
            System.out.println(list.get(num));  
            //将数字从数组中移除  
            list.remove(num);  
        }  
    }  
}
</code></pre><p>看起来舒服多了</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css-margin]]></title>
      <url>/2016/07/16/css-margin/</url>
      <content type="html"><![CDATA[<p>今天在慕课上看了张大神又一力作，整理了一下<br>margin的巧妙使用：<br>1、margin实现自适应的宽高比为2：1的矩形</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>&lt;style type=&quot;text/css&quot;&gt;  
  #container {  
    width: 400px;  
    height: 250px;  
  }  
  .box {  
    background-color: olive;  
    overflow: hidden;  
  }  
  .box &gt; div {  
    margin: 50%;  
  }  
&lt;/style&gt;
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/7018384-24ac7fb1fccbcec6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><img src="http://upload-images.jianshu.io/upload_images/7018384-70156a9605e570a9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><img src="http://upload-images.jianshu.io/upload_images/7018384-92ecf8c007214a71?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
