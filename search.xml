<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[bad-code-2]]></title>
      <url>/2018/07/05/bad-code-2/</url>
      <content type="html"><![CDATA[<h4 id="最近的烦恼"><a href="#最近的烦恼" class="headerlink" title="最近的烦恼"></a>最近的烦恼</h4><p>最近真的超级苦恼。一直在进行新功能的开发，没时间做我之前想要重构的东西。<br>在进行开发的时候，这个时候我已经很注意重构的信号，新功能的开发需要重构一些代码，秉承着一个pr只做一个功能，于是我需要切换分支，提pr，合并pr之后，再进行新功能的开发，这个事情真的非常痛苦。<br>之前没有充分的经验和思考进行的开发，给现在的我带了巨大的痛苦。</p>
<h4 id="启示（都是泪）"><a href="#启示（都是泪）" class="headerlink" title="启示（都是泪）"></a>启示（都是泪）</h4><h5 id="1-每个文件的入口文件应尽可能的保持干净"><a href="#1-每个文件的入口文件应尽可能的保持干净" class="headerlink" title="1. 每个文件的入口文件应尽可能的保持干净"></a>1. 每个文件的入口文件应尽可能的保持干净</h5><p>不要因为函数小，就要往index中塞。index是入口文件，了解整个项目从这里开始，所以要保证，这里的代码做到最简洁明了，一眼看过去，就能有一概览的感觉。小函数感觉放在一个单独的文件中太不值当的，就把所有的小函数放在一个文件中。整理之后，我感觉非常清新。</p>
<h5 id="2-多处都用到的样式，这个时候就要考虑重命名了"><a href="#2-多处都用到的样式，这个时候就要考虑重命名了" class="headerlink" title="2. 多处都用到的样式，这个时候就要考虑重命名了"></a>2. 多处都用到的样式，这个时候就要考虑重命名了</h5><p>要不看了很疑惑，这个页面为什么有其他页面的style</p>
<h5 id="3-实时抽取util"><a href="#3-实时抽取util" class="headerlink" title="3.实时抽取util"></a>3.实时抽取util</h5><p>组件划分要清楚，例如可以抽出来api.js、tool.js</p>
<h5 id="4-函数复杂度尽可能的降低"><a href="#4-函数复杂度尽可能的降低" class="headerlink" title="4.函数复杂度尽可能的降低"></a>4.函数复杂度尽可能的降低</h5><p>若真的找不到适合的解决方法，可以与身边的人分享一下，或许会得到更好的解决办法</p>
<h5 id="5-你连续copy一段代码以上，这个时候，你可以考虑写一个工具来生成相同的代码"><a href="#5-你连续copy一段代码以上，这个时候，你可以考虑写一个工具来生成相同的代码" class="headerlink" title="5. 你连续copy一段代码以上，这个时候，你可以考虑写一个工具来生成相同的代码"></a>5. 你连续copy一段代码以上，这个时候，你可以考虑写一个工具来生成相同的代码</h5><h5 id="6-需要lazy的地方，及时lazy"><a href="#6-需要lazy的地方，及时lazy" class="headerlink" title="6. 需要lazy的地方，及时lazy"></a>6. 需要lazy的地方，及时lazy</h5><h5 id="7-一个问题有两个不同的解决办法，各有利弊-选择代价最小的"><a href="#7-一个问题有两个不同的解决办法，各有利弊-选择代价最小的" class="headerlink" title="7. 一个问题有两个不同的解决办法，各有利弊,选择代价最小的"></a>7. 一个问题有两个不同的解决办法，各有利弊,选择代价最小的</h5><p>移动端和PC端共用一个相同的组件，这个我写一个组件，写两份样式。在这个情况下，假如你修改一下组件，这个时候，你就要同时修改两份样式。一般移动端展示的UI较少，用PC端的组件，会造成很多DOM的多余。所以这个时候，写两个组件更好一点。</p>
<h5 id="8-对于react的看法"><a href="#8-对于react的看法" class="headerlink" title="8.对于react的看法"></a>8.对于react的看法</h5><p>要学会切小片片，尽可能的组件化，组件尽可能的小，职责尽可能明确。<br>之前写两个wrapper有一段相同的代码，这个还可以接受，等我再写一个wrapper时，发现还需要那一段相同的代码，我受不了了，于是将一个组件拆成了三层。emmmm，组件小多么重要。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bad-code]]></title>
      <url>/2018/07/02/bad-code/</url>
      <content type="html"><![CDATA[<h4 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h4><p>当你发现现有的结构满足不了现有的功能，这是重构的信号。很遗憾，为了赶进度，当这些信号出现时，你没有放在第一位去考虑，随着增量的开发，再回头准备下手重构，有一种牵一发动全身的感觉。</p>
<h4 id="烂代码的由来"><a href="#烂代码的由来" class="headerlink" title="烂代码的由来"></a>烂代码的由来</h4><h5 id="词不达意"><a href="#词不达意" class="headerlink" title="词不达意"></a>词不达意</h5><p>代码写出来的目的是给人看的，一般你写的代码都不会由你维护。<br>emmmm 随意的命名，给阅读代码的人带来巨大的负担。自己看两天的代码也会有一种雾里看花的感觉。</p>
<h5 id="二随一变"><a href="#二随一变" class="headerlink" title="二随一变"></a>二随一变</h5><p>这个是在开发过程中，两个对象都随着一个对象变，又勤勤恳恳的写了两遍。这个时候，当发生一点变化，我要找到全部随变的代码，两个一块修改…改的手都累了，眼也花了</p>
<h5 id="我就不改变参数的个数"><a href="#我就不改变参数的个数" class="headerlink" title="我就不改变参数的个数"></a>我就不改变参数的个数</h5><p>现有的函数不能满足最新的需求，哎呀，我得在往这个函数中传一个参数，emmm，好麻烦，试试能不能在现有的参数中得到我想要的参数，还可以，就这样吧。于是，开始循环，整个函数已经不堪重负了….满篇的if else</p>
<h5 id="来来来-我的麻花真好看"><a href="#来来来-我的麻花真好看" class="headerlink" title="来来来 我的麻花真好看"></a>来来来 我的麻花真好看</h5><p>写了一个函数，哎呀，我这边需要和这个函数差不多的函数。哎呀，传一个标志，里面判断吧。这麻花不是一般的好看啊</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> getData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>isAdd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isAdd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// 共用代码</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>isAdd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// 共用代码</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>isAdd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="repeat-yourself"><a href="#repeat-yourself" class="headerlink" title="repeat yourself"></a>repeat yourself</h5><p>做spa的时候，五个页面都是一个list，于是我勤勤恳恳的写了五个list。这是在做ui的时候。在接数据的时候，我发现这几个页面的整体都是一样的，唯一不同的就是里面的item是不一样的，那我为什么还要写五遍呢？<br>其实开发的时候，就是ctrl+c和ctrl+v，那个时候还庆幸，因为把功能划分的十分清楚，我在每个页面map一遍，还挺简单的。沉浸在这种欢乐中，导致忘了这个repeat的操作。于是，动手写个一个生成list的function后，每个组件的代码两行就可以搞定了。</p>
<h4 id="磨刀不误砍柴工"><a href="#磨刀不误砍柴工" class="headerlink" title="磨刀不误砍柴工"></a>磨刀不误砍柴工</h4><p>对待一个复杂的问题，首先要勾勒出它大概的轮廓，把能想到的全列上，以此先做出一个好的架构。<br>边写边想看是一个需要摒弃的习惯（对于我自己来说）。<br>这次新做的搜索，我先写好ui,在接数据之前，我能大概想到是什么个情况。于是我开始下手写了。<br>写着写着，我发现，嗯 导航需要条件，下面的list需要条件，右边的筛选也需要这个条件。筛选和list是属于一个组件中，我已经写到单独的list这一块了，有种写不下去的感觉，于是我开始将它们共用的数据全部放在父组件。这对于开发中的时间，是一个巨大的浪费，因为这意味着我之前的工作是白做的。这个时候，我开始拿起纸和笔，开始分析我应该怎么去规划…尽管我再分析的时候，把能预见的问题都想到了，但是在开发过程中还是遇到了未知的问题..写代码的仔细分析很重要….开发过程中的清晰头脑也很重要</p>
<p>先写到这….</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[refactor]]></title>
      <url>/2018/06/23/refactor/</url>
      <content type="html"><![CDATA[<h4 id="闲谈"><a href="#闲谈" class="headerlink" title="闲谈"></a>闲谈</h4><p>最近很大一部分工作是在进行重构工作，每次都需要提一个大pr，很是心累。<br>原本项目就是重写了一份，但是在架构方面还是没有做好。在开发过程中，没有进行总结，错过了重构的好机会，导致后期维护起来很累。编写代码的很大感觉，哎这一块我好像写过，copy过来。其实这就是一个重构的信号。<code>don&#39;t repeat yourself</code>.在开发过程中，我做了很多copy的工作，于是出来混总是要还的。现在重构起来就需要将凌乱的部分整合在一起。</p>
<h4 id="css整理工作"><a href="#css整理工作" class="headerlink" title="css整理工作"></a>css整理工作</h4><p>最近的整理工作，主要是在整理css和js，现在想想也很是惊奇。<br>对于css的整理，是在前期没有很好的去总结组件的共同之处，导致css文件是一个增量的过程，而不是迭代的过程。意思到这点之后，我开始梳理和提取相同的地方。<br>css的整理要注意的是：词达意和语义化，这意味着别人一看到你的<code>class</code>就能大概猜出来它是个什么样的。</p>
<h4 id="js整理工作"><a href="#js整理工作" class="headerlink" title="js整理工作"></a>js整理工作</h4><p>对于js的整理，很大一部分问题就自己否定自己。刚开始写的时候，我问自己：js可以拿redux里面的数据吗？我在没有查询的基础上给了一个自己否定的答案。嗯，不可以的话只能退而求其次了。现在有人告诉我可以，于是开始整理和重构。<br>看起来问题是出在我没有做好准备工作上面。</p>
<h4 id="什么时候进行整理"><a href="#什么时候进行整理" class="headerlink" title="什么时候进行整理"></a>什么时候进行整理</h4><p>我不知道这次的整理是否可以称得上重构？但是这次的整理是我的整体思路更加清晰，架构也在渐渐明了之中。<br>在编写的过程，做好的时机是：这一块我之前写过类似的，这个时候，你就考虑把相同的地方抽出来作为一个单独的部分。<br>还有一个情况是你写着写着写不下去了，这个时候，就需要从头梳理一下思路，到底是哪出的问题。<br>或者是目前的代码已经不能满足新的需求时。</p>
<h6 id="整理完一个item，感觉浑身清爽"><a href="#整理完一个item，感觉浑身清爽" class="headerlink" title="整理完一个item，感觉浑身清爽"></a>整理完一个item，感觉浑身清爽</h6><p>PS:作为一个前端来说，写出来的是直接和用户交流的产品，在开发过程中，我是在知道需求的基础上进行开发的，对于一个临时的功能，我可以写的简单一点，但是也需在明了的基础上进行，emmmm…反之，使用者已疯</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pdf]]></title>
      <url>/2018/04/08/pdf/</url>
      <content type="html"><![CDATA[<p>在网页中浏览pdf文件，最简单的办法当然是插入iframe了</p>
<h4 id="html5中浏览pdf文件"><a href="#html5中浏览pdf文件" class="headerlink" title="html5中浏览pdf文件"></a>html5中浏览pdf文件</h4><p>html5中有标签可以插入pdf,但是在每个浏览器上的表现形式不一样…</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>embed</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pdfFiles/interfaces.pdf<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pdf<span class="token punctuation">"</span></span> <span class="token attr-name">pluginspage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.adobe.com/products/acrobat/readstep2.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="插件pdf-js"><a href="#插件pdf-js" class="headerlink" title="插件pdf.js"></a>插件pdf.js</h3><p><a href="https://github.com/mozilla/pdf.js" target="_blank" rel="external">pdf.js</a>是一个浏览器兼容的插件，移动端也很使用，有一点：需要引入的包太大。为此，有人又做了一个包裹<a href="https://github.com/legalthings/pdf.js-viewer" target="_blank" rel="external">pdf.js-viewer</a>。这个npm是pdf.js的打包后的版本。在使用的过程中，你会发现样式不对，此时你可以将<code>pdf.js</code>中的<code>viewer.scss</code>，拷贝的你的开发目录，而不是引入<code>pdf.js-viewer</code>的css，里面的样式已经过时了。语言包引入后，页面就会翻译，不用做其他设置。</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./viewer-2.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application/l10n<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node_modules/pdf.js-viewer/locale/zh-CN/viewer.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
    <span class="token selector">html, body </span><span class="token punctuation">{</span>
      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">body </span><span class="token punctuation">{</span>
      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token id">#pdfjs</span> </span><span class="token punctuation">{</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token selector"><span class="token id">#viewBookmark</span>, <span class="token id">#secondaryToolbarToggle</span> </span><span class="token punctuation">{</span>
      <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">pdfjs-wrapper </span><span class="token punctuation">{</span>
      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pdfjs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--#include virtual="node_modules/pdf.js-viewer/viewer.html" --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>


  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node_modules/pdf.js-viewer/pdf.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    $(function() {
      // window.PDFJS.locale = 'zh-CN';
      $('div#pdfjs').load('http://localhost:65534/viewer.html', function(res) {
        window.PDFJS.webViewerLoad();
        window.PDFViewerApplication.open('http://localhost:65534/sample-3pp.pdf');
      });
    });
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="集成到webpack中"><a href="#集成到webpack中" class="headerlink" title="集成到webpack中"></a>集成到webpack中</h3><p>测试开发可以正常使用，需要集成到webpack中。<br>由于文件都需要用webpack打包，于是按照平常一样，将文件引入，发现控制台报错。在调试过程中，我遇到5种左右的错误，影响最深刻的一点是：<code>document undefined</code>…也是很迷，调试过程中，发现<code>pdf.js</code>种的代码执行了两遍，第二次的时候就会出这个错误。仔细翻了翻源码，在<code>pdf.js</code>中，它需要引入<code>pdf.work.js</code>文件，webpack打包时，它根本就找不到这个文件，最后的结果是只在<code>windows</code>上挂载了关于<code>pdf</code>的两个对象…<br>最后的最后，直接在页面上引入<code>pdf.js</code>和<code>pdf.work.js</code>，由于文件过大，你按需进行加载就可以了。</p>
<p>最后的最后，写了很长时间的<code>slim</code>模版，我忘了原生的标签怎么写了…导致我在引入语言包话费个很长时间…也是很迷…切莫忘本😊</p>
]]></content>
      
        <categories>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jquery-plugin]]></title>
      <url>/2018/03/13/jquery-plugin/</url>
      <content type="html"><![CDATA[<h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><p>现在是使用webpack打包，yarn安装需要的插件很便捷。今天遇到了一个奇怪的问题，我使用yarn安装了一个jquery插件，使用时，jquery报错…</p>
<h3 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h3><ol>
<li><p>安装、引用是否正确<br>首先先确定一下：包是否正确安装；使用时是否正确引用；ok，这两个都是正确的</p>
</li>
<li><p>webpack是否配置正确<br>在webpack中，一般都会将jQuery设置为全局变量，在webpack中设置如下:</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 $<span class="token punctuation">:</span> <span class="token string">"jquery"</span><span class="token punctuation">,</span>
 jQuery<span class="token punctuation">:</span> <span class="token string">"jquery"</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>webpack版本是否合适<br>开发中使用的是<code>rails-webpack</code>，其中的配置需要更改（之前对照文档修改配置，报错；今天才看到原来是版本问题😂）</p>
</li>
<li><p>最最重要的一点：查看你安装的插件的包里面有没有<code>node_modules</code>这个文件夹<br>在排查错误时，我将包里面的代码拷贝到开发目录，我发现能用。。。直接引用包就不可以。使用插件，最终目的是在<code>$</code>这个对象上挂载方法。报错就是说明<code>$</code>对象上没有这个方法，问题来了，包里面的<code>$</code>是哪来的？全局对象还是<code>node_modules</code>文件夹中的<code>jquery</code>???<br>引用多个插件，插件依赖的<code>jquery</code>版本可能不是一样的，webpack打包的时候，首先去找安装包的插件<code>node_modules</code>里面的<code>jquery</code>，局部变量覆盖全局变量。所以此时挂载方法的<code>$</code>对象是<code>node_modules</code>包中的<code>jquery</code>，而不是全局的<code>$</code>对象</p>
</li>
<li><p>为什么安装的jquery版本会不同<br>这个时候你也许会疑问🤔️为什么会安装这么多版本？首先你要去检查依赖的<code>jquery</code>版本，这个时候你可以去查看<code>yarn.lock</code>文件，里面有具体的依赖关系。这个时候，假如按照算法，你发现几个插件依赖的<code>jquery</code>的版本应该是一致的。但为什么<code>yarn</code>计算出来的不一样呢🤔️？因为<code>yarn</code>在<code>add</code>包时，计算<code>lock</code>的时候，会在原来的基础上进行计算，恰好在这个时间隔中，<code>jquery</code>升级了…这就导致<code>yarn</code>计算出来的依赖版本可能有所不同<br>此时，你可以使用<code>yarn upgrade</code>进行更新<code>lock</code>文件</p>
</li>
<li><p>如果以上步骤还不能解决问题…我也不知道根本问题是什么</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> jquery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jquery </tag>
            
            <tag> webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[get-module]]></title>
      <url>/2017/11/15/get-module/</url>
      <content type="html"><![CDATA[<h4 id="发送邮件-nodemailer"><a href="#发送邮件-nodemailer" class="headerlink" title="发送邮件: nodemailer"></a>发送邮件: <a href="https://github.com/nodemailer/nodemailer" target="_blank" rel="external">nodemailer</a></h4><ol>
<li>基本代码，使用之前请确保邮箱开启SMTP</li>
</ol>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> nodemailer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'nodemailer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

nodemailer<span class="token punctuation">.</span><span class="token function">createTestAccount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
    host<span class="token punctuation">:</span> <span class="token string">'smtp.163.com'</span><span class="token punctuation">,</span>
    port<span class="token punctuation">:</span> <span class="token number">465</span><span class="token punctuation">,</span>
    secure<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// true for 465, false for other ports</span>
    auth<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      user<span class="token punctuation">:</span> <span class="token string">'xxxx@163.com'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// generated ethereal user</span>
      pass<span class="token punctuation">:</span> <span class="token string">'xxx'</span>  <span class="token comment" spellcheck="true">// generated ethereal password</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> transporter <span class="token operator">=</span> nodemailer<span class="token punctuation">.</span><span class="token function">createTransport</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// setup email data with unicode symbols</span>
  <span class="token keyword">const</span> mailOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">'"Fred Foo 👻" &lt;xxx@163.com>'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// sender address</span>
    to<span class="token punctuation">:</span> <span class="token string">'xxxx@gmail.com'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// list of receivers</span>
    subject<span class="token punctuation">:</span> <span class="token string">'Hello ✔'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// Subject line</span>
    text<span class="token punctuation">:</span> <span class="token string">'Hello world?'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// plain text body</span>
    html<span class="token punctuation">:</span> <span class="token string">'&lt;b>Hello world?&lt;/b>'</span> <span class="token comment" spellcheck="true">// html body</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// send mail with defined transport object</span>
  transporter<span class="token punctuation">.</span><span class="token function">sendMail</span><span class="token punctuation">(</span>mailOptions<span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Message sent: %s'</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>messageId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>若使用SSL, 在config中添加</li>
</ol>
<pre class="line-numbers language-javascript"><code class="language-javascript">secureConnection<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// use SSL</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>3.添加附件, 在mailOptions添加</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">attachments<span class="token punctuation">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    filename<span class="token punctuation">:</span> <span class="token string">'文档.txt'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 不会乱码</span>
    content<span class="token punctuation">:</span> <span class="token string">'哈哈哈'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    filename<span class="token punctuation">:</span> <span class="token string">'2.txt'</span><span class="token punctuation">,</span>
    content<span class="token punctuation">:</span> <span class="token string">'heool word'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>添加图片, 在mailOptions添加</li>
</ol>
<pre class="line-numbers language-javascript"><code class="language-javascript">attachments<span class="token punctuation">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    filename<span class="token punctuation">:</span> <span class="token string">'文档.txt'</span><span class="token punctuation">,</span>
    content<span class="token punctuation">:</span> <span class="token string">'哈哈哈'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    filename<span class="token punctuation">:</span> <span class="token string">'01.png'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// image</span>
    path<span class="token punctuation">:</span> <span class="token string">'./flow.png'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 图片路径</span>
    cid<span class="token punctuation">:</span> <span class="token string">'00000001'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[project]]></title>
      <url>/2017/11/06/project/</url>
      <content type="html"><![CDATA[<h4 id="设计图出代码"><a href="#设计图出代码" class="headerlink" title="设计图出代码"></a>设计图出代码</h4><p>根据设计图，如何写出好的代码。设计图是一张一张的出的，因为不知道哪一块会在其他的设计图中出现，于是只看到当下并不是一个好的想法。看到一张图，可以先思考一下，哪一块有可能被复用。在class的命名上就会有所改变…刚开始一个元素在主页出现，我可以给它命名<code>home__XX</code>，但是当这个元素也在文章页面出现时，再起一个class，重复写一样的css，这不是一个好的想法，但是将这个类名直接写在文章页，看着又很不爽。在项目中，使用<code>scss</code>用来开发，这个时候，你可以改变类名或者使用<code>@include</code>和<code>@extend</code>来组织代码。<br>js部分，不止实现功能，也要保证优雅。例如一个参数可能是数组或者string，你可以这样写：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> argument <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> argument <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//...</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以这样</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>
  string<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//... },</span>
  object<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//... }</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> map<span class="token punctuation">[</span><span class="token keyword">typeof</span> argument<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="文件夹组织"><a href="#文件夹组织" class="headerlink" title="文件夹组织"></a>文件夹组织</h4><p>根据项目需要组织出合适的文件结构，文件名也要更好的表达出这个文件夹中的内容，使之清晰…</p>
<h4 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h4><p>开发的过程中，代码量越来越大，这时候可以考虑一下代码的重构。重构是不大幅度改变代码的基础上进行的…大幅度的重构甚至重写不能称作重构…推荐书籍：重构:改善既有代码的设计</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pm2]]></title>
      <url>/2017/09/13/pm2/</url>
      <content type="html"><![CDATA[<h4 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h4><p>嘤嘤，看到<code>ruby</code>中有一个<code>gem</code>叫做<code>capistrano</code>， 使用它可以实现一键部署到服务器上了。<br>之前在懵里懵懂的时候，做了一个网站，每次更改后，我都用<code>filezilla</code>将新版本的代码上传，再restart项目，超级费劲。<br>看到ruby后，于是赶紧去网上搜了搜，<code>pm2</code>可以做这件事。之前也见到过<code>pm2</code>，那时候我在寻求守护进程的module，但是我选择了<code>forever</code>。</p>
<h4 id="使用pm2实现自动部署"><a href="#使用pm2实现自动部署" class="headerlink" title="使用pm2实现自动部署"></a>使用pm2实现自动部署</h4><p><a href="https://github.com/i5ting/nodejs-fullstack/blob/master/deploy.md" target="_blank" rel="external">这个链接对我的帮助很大</a>，基本上按照他的步骤来应该是可以实现自动化部署。</p>
<h5 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h5><p>服务器上的node是我很久之前安装的，但是<code>pm2</code>要求使用<code>nvm</code>，于是装了<code>nvm</code>，但是到了“克隆好之后执行安装和启动”，这一步报错：npm 这个命令找不到。去寻找解决办法，有的说将<code>.bashrc</code>文件中的关于<code>nvm</code>的部分放在最上面，还有的说要使用nvm重新安装node，这两个方法都试了，但是都没有解决错误。于是我只能去<code>pm2</code>的目录中的source文件夹，手动去执行<code>npm install</code> 和 <code>pm2 start app.js</code></p>
<p>等待update得到解决方案：</p>
<h4 id="nginx转发"><a href="#nginx转发" class="headerlink" title="nginx转发"></a>nginx转发</h4><p>最暴力的方法就是下面👇的代码：</p>
<pre><code>server{
    listen 80;
    server_name xxx.xxx.xxx;(域名)
    location / {
        proxy_pass http://127.0.0.1:3000
    }
}
</code></pre><p>目前可以解决我的需要，假如还有其他的端口需要监听该怎么办？</p>
]]></content>
      
        <categories>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux-first]]></title>
      <url>/2017/09/13/linux-first/</url>
      <content type="html"><![CDATA[<p>对待自己的服务器，想着反正也没人攻击，也就从来没在意过。<br>前天得到了一个讯号：要好好对待服务器，第一步就是安全性， 你需要这么做</p>
<ol>
<li>使用root账户登录后，创建一个用户并设置密码，如果有必要，就赋予用户root权限</li>
<li>上传ssh-key，上传成功后，你就不用输入密码登录服务器了</li>
<li>关闭密码登录，打开ssh-key登录</li>
<li>以后就使用你新建的用户登录吧</li>
</ol>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[week6]]></title>
      <url>/2017/09/03/week6/</url>
      <content type="html"><![CDATA[<p>举一个栗子🌰：在分页时，你通常会看到<code>url</code>上一般是<code>xxx?page=1</code><br>通常的做法是点击第几页直接跳转页面，是通过location进行的<br>现在的需求是：在跳转页面的时候，我既想要改变url，同时我只需要改变分页的数据，而不需要整个页面重绘。</p>
<h4 id="—–"><a href="#—–" class="headerlink" title="—–"></a>—–</h4><p>很幸运<code>history</code>提供了这么一个方法<code>pushState</code>，它有三个参数：state object，title，以及一个可选的URL地址。第二个参数title:现在firefox和chrome已经忽略该参数</p>
<pre class="line-numbers language-js"><code class="language-js">window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span><span class="token string">'?page=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API" target="_blank" rel="external">pushState参考链接</a></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[coursera-3]]></title>
      <url>/2017/09/03/coursera-3/</url>
      <content type="html"><![CDATA[<h3 id="淡淡的忧伤"><a href="#淡淡的忧伤" class="headerlink" title="淡淡的忧伤"></a>淡淡的忧伤</h3><p>three time 是三倍的意思</p>
<h3 id="学习一门新的语言"><a href="#学习一门新的语言" class="headerlink" title="学习一门新的语言"></a>学习一门新的语言</h3><p>目前学习一门新的语言仅仅停留在<code>Syntax</code>，但是真的要把代码写的优雅，你更要了解它的<code>Type-checking</code>和<code>Evalustion</code>，了解这两者之后，你能知道代码在哪里可以优化，而不是代码的优化是在写代码中或者看到别人的代码时看到的<br>目前这个方面需要改变，思想的转变…<br>人的思想都是在肤浅向深沉转变😄</p>
<h3 id="应用类型"><a href="#应用类型" class="headerlink" title="应用类型"></a>应用类型</h3><p>下面是一段java代码，乍看上去没有问题，但是使用<code>p.getAllowesUsers[0] = p.currentUser</code>，这一句代码使权限形同虚设。<br>原因是：<code>getAllowesUsers</code>中直接返回的是<code>allowedUsers</code>，我尝试修改<code>p.getAllowesUsers</code>的值, 实际上修改了示例的私有变量的<code>allowedUsers</code>的值<br>修改： 在<code>getAllowesUsers</code>中直接返回的是<code>allowedUsers</code>的一个克隆</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ProtextedResource</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> Resource theResource <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> allowedUsers <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAllowesUsers</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> allowedUsers<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> String <span class="token function">currentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// ...</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useTheResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> allowedUsers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">currentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>allowedUsers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// access allowed: use it</span>
        <span class="token keyword">return</span> <span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>之前在项目中，我定义了一个<code>default</code>的值，合并对象选的是<code>lodash</code>的<code>extend</code>,因为没有看文档就直接使用了，<code>extend(default, options)</code>，发生了bug。我的本意是default是一个不可变的值，它作为一个函数的默认值。经过长时间😅的调试，我发现<code>default</code>的值改变了，去看文档发现<code>extend</code>会改变第一个参数的值。于是更改为<code>extend({}, default, options)</code><br>当应用类型作为函数的参数，一定要特别注意，尽量使用实参的clone值，要不在函数中修改参数的值，就相当于修改实参的值了…</p>
<h3 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h3><p>递归在一定程度上可以代替<code>loop</code>，一方面它看起来更优雅，另一方面…<br>下面的代码上面的函数是我们经常使用的方式，通俗易懂。下面的递归称为尾递归。两种函数实现的功能相同。但是若要分析到stack处，你会发现下面的函数比上面的函数有更好的性能；首先上面的函数涉及到每次递归都要去进栈和出栈后才能得到就过，但是下面的函数却没有这样的操作。<br>而且在<code>Evalustion</code>阶段，上方的函数最终结果的数据类型需要依赖上一步的结果；下面的函数时不需要上一步的计算结果</p>
<pre class="line-numbers language-ml"><code class="language-ml">fun sum1 xs =
    case xs of
        [] => 0
      | i::xs’ => i + sum1 xs’

(* tail recursion*)
fun sum2 xs =
    let fun f (xs,acc) =
            case xs of
                [] => acc
              | i::xs’ => f(xs’,i+acc)
    in
    f(xs,0)
    end
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>就到这吧…😪</p>
]]></content>
      
        <categories>
            
            <category> 编程语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编程语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[week5]]></title>
      <url>/2017/08/26/week5/</url>
      <content type="html"><![CDATA[<p>上周没写总结…</p>
<h3 id="if条件什么时候为false"><a href="#if条件什么时候为false" class="headerlink" title="if条件什么时候为false"></a>if条件什么时候为false</h3><p>因为react共用组件，但是传过来的值的结构不同，于是使用||来进行判断选择，于是写了以下代码放心的提上去了</p>
<pre><code>const count = node.count || node.usage_count || node.total_count
</code></pre><p>发现报total_count是undefined，这个我仔细看了代码没找出来哪错了，于是把生产环境的数据库拿下来，开始调试…最后发现因为<code>usage_count</code>的值为零的时候，会继续往后执行，因为<code>node.usage_count</code>值为0，js会认为是false…<br>我的原意是为undefined的时候，会继续向后执行。使用js很随便，但是忘记了随便的副作用。于是我只能用if…else…去判断undefined了<br>👉当if语句中的变量为false，0，NaN，空字符串，null，undefined时，判断结果为假;</p>
<h3 id="图片是使用背景图还是img标签"><a href="#图片是使用背景图还是img标签" class="headerlink" title="图片是使用背景图还是img标签"></a>图片是使用背景图还是img标签</h3><p>一般来说，我的习惯是图片一般使用img标签插入页面。<br>但是，假如一个网站有中文英文两个版本，通过类名的切换而不是跳转页面可以实现中英文的切换，这个时候，就不要img标签，而是背景图的形式插入图片，这样做的好处是：图片是在css设置的，我可以为元素设置不同的类名进而切换图片</p>
<h3 id="BEM不应该嵌套太深"><a href="#BEM不应该嵌套太深" class="headerlink" title="BEM不应该嵌套太深"></a>BEM不应该嵌套太深</h3><p>BEM命名的方式，一般是一个block里面包含element,所以我是一个block一层来的。大哥告诉我这样是不对的，划分block没有错，但是在命名不冲突的情况下，block中的element的类名没有必要一定按照block的类名开头。</p>
<h3 id="一定要选好元素"><a href="#一定要选好元素" class="headerlink" title="一定要选好元素"></a>一定要选好元素</h3><p>之前做tab切换的时候，咋改都没达到想要的效果。看了大哥的代码，才发现自己选错元素了。应该选择section的父元素而不是每个section…写代码之前没有经过严密的思考，遇到错误时，思想受到了限制，导致没想到正确的方向去…</p>
<h3 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h3><p>css3中的calc这个计算属性超级好用，但是有一点需要注意</p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100%</span>-<span class="token number">75</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>以上代码不起作用，让人摸不着头脑，经过查询之后，需要注意的是<code>-</code>号两边要有空格</p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100%</span> - <span class="token number">75</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="display-flex-兼容性"><a href="#display-flex-兼容性" class="headerlink" title="display:flex;兼容性"></a>display:flex;兼容性</h3><p>网站要兼容到IE9，而flex是从ie10兼容的。找hack但是没有只对IE9起作用的hack…唉，使用<code>\9</code>的hack，它也在IE10下起作用<br>对于IE9的兼容，我一般使用<code>display: table;</code>和<code>display: table-cell;</code>。此时你在设置子元素的margin是不起作用的，此时你想要的效果这两个css属性可以达到你的需求<code>border-collapse: separate;</code>、<code>border-spacing: 5rem</code>。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[week5-1]]></title>
      <url>/2017/08/26/coursera-2/</url>
      <content type="html"><![CDATA[<h3 id="说在前面的话"><a href="#说在前面的话" class="headerlink" title="说在前面的话"></a>说在前面的话</h3><p>最初对待语言的看法：相比语言更重要的是由编程思想，语言只是一种工具。所以对于只停留在Syntax阶段，没有去深究语言的内在。<br>之前在学习C++的时候，老师也讲过一些内存方面…例如一段很简单的代码，在C++中会造成死循环…代码片段我还是没找到…<br>在学编译原理的时候，也学过词法分析、语法树等等…但是总是来说对于语言还是又一个模糊的概念<br>近期在coursera看一门课程，收获很大。刚开始看视频，因为自己的英语能力薄弱，刚开始看的时候，恨不得每句话都Google tanslate一遍，看多了就习惯了，因为大部分的术语你已经知道意思了，所以能知道大概的意思。Google翻译的意思，因为不知道术语所以翻译出来也很奇特。目前是以ML为例讲解的</p>
<h3 id="variable-binding"><a href="#variable-binding" class="headerlink" title="variable binding"></a>variable binding</h3><p>变量的绑定主要包括两个环境：静态环境记录了变量的类型；动态环境记录了变量的值</p>
<pre class="line-numbers language-ML"><code class="language-ML">val x = 34
(* static env : x : int *)
(* dynamic env : x -> 34 *)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="rules-to-expressions"><a href="#rules-to-expressions" class="headerlink" title="rules to expressions"></a>rules to expressions</h3><p>它共有三个部分：语法检查、类型检查和评估规则</p>
<pre class="line-numbers language-ML"><code class="language-ML">Syntax:
  if el then e2 else e3
  where if, then, and else are keywords and
  e1, e2, and e3 are subespressions

Type-checking:
  first el must have bool type
  e2 and e3 can hav any type(let`s call it t), but they
  must have the same type t
  the type of the entire expression is also t

Evalustion rules:
  first evalustion el to a value call it v1
  if it`s true, evaluate e2 and that result is the whole expression`s result
  else, evaluate e3 and that result is the whole expression`s result
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="shadowing"><a href="#shadowing" class="headerlink" title="shadowing"></a>shadowing</h3><p>当你重复声明相同的变量时，之前声明的值就会被覆盖，当你在REPL中看它的值的时候，就会变成hidden value，所以不建议重复声明变量</p>
<pre class="line-numbers language-ML"><code class="language-ML">val x = 34
val x = 45    (* this is not assiginment statement *)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>ML语言没有for循环，所以在对于list类型的数据，会尝试使用递归去解决问题，但是小心哦，不恰当的使用递归，会使运行次数呈指数式增长。<br>下面是求list中的最大值，可以简单粗暴的理解成求数组中的最大值</p>
<pre class="line-numbers language-ML"><code class="language-ML">fun bad_max(numbers: int list) =
  if null numbers
  then 0
  else if null tl numbers
  then hd numbers
  else if hd numbers > bad_max(tl numbers)
  then hd numbers
  else bad_max(tl numbers)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面代码逻辑清晰，通俗易懂，但是使用的时候，假如数组中的数是从大到小排列时，程序运行速度很快；相反，数组中的数若是从小到大排列，当数组是[1,…30]时，你就会发现有延迟…讲师用了一张图给你讲解<br><img src="http://res.cloudinary.com/dwudaridr/image/upload/v1503738949/WX20170825-142135_2x_oq3vsb.png" alt=""></p>
<p>优化的方法是：你可以将<code>bad_max(tl numbers)</code>的值赋予一个变量，这样，每次程序运行时<code>bad_max(tl numbers)</code>只会执行一遍。这里使用了<code>let...in...end</code>，在这个课程中，作者也讲解了作用域的问题，例如子作用域的值回覆盖父作用域的值…</p>
<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>每门语言都会提供关键字来提高代码的可读性，在适当的地方记得使用</p>
<h3 id="调试错误"><a href="#调试错误" class="headerlink" title="调试错误"></a>调试错误</h3><p>调试错误时，一定要有耐心…</p>
]]></content>
      
        <categories>
            
            <category> 编程语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编程语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[week4]]></title>
      <url>/2017/08/20/week4/</url>
      <content type="html"><![CDATA[<p><code>只想睡觉...</code></p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[npm-package]]></title>
      <url>/2017/08/17/npm-package/</url>
      <content type="html"><![CDATA[<h3 id="写包的初衷"><a href="#写包的初衷" class="headerlink" title="写包的初衷"></a>写包的初衷</h3><p>项目中很多地方用到相同的代码段，做其他项目的时候，也会用到这个功能，于是，大哥让我写一个包，供目前以及以后的项目使用</p>
<h3 id="提供的功能"><a href="#提供的功能" class="headerlink" title="提供的功能"></a>提供的功能</h3><p>在<a href="https://gmis.jiqizhixin.com/" target="_blank" rel="external">机器之心</a>这个页面，上面的nav会根据滚动条的位置进而改变active状态，同时，点击nav中的每个链接，页面也会滚动到相应的section。这个功能很常见。<br>目前，包提供的两种形式：</p>
<ol>
<li>使用锚链接：你通过点击nav中的链接，通过锚点来使页面滚动到相应的section；同时，滚动条的位置改变时，会更改页面的hash，nav的active也会改变。</li>
<li>使用点击事件：你通过点击nav中的链接，通过获得元素的data-index来确定相应的section，所以你必须为nav中的item添加data-index属性；同时，滚动条的位置改变时，nav的active也会改变。</li>
</ol>
<h3 id="项目的地址"><a href="#项目的地址" class="headerlink" title="项目的地址"></a>项目的地址</h3><p><a href="https://github.com/wukong1995/nav-slide" target="_blank" rel="external">点击这去仓库</a><br>具体的参数请查看readme</p>
<h3 id="项目发布的过程"><a href="#项目发布的过程" class="headerlink" title="项目发布的过程"></a>项目发布的过程</h3><ol>
<li>新建一个文件夹，<code>npm init</code>来填写包的信息</li>
<li>编写代码</li>
<li>完成代码编写，若你使用ES6或者ES7的语法，需要使用babel转换一下</li>
<li><code>npm login</code></li>
<li><code>npm publish</code></li>
<li>到这你的包发布成功，若更新包，记得要改package.json中的version</li>
</ol>
<h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><ol>
<li>完成代码编写后，直接发布了，使用的时候报错：import那报错；我以为是因为没有因为代码压缩，于是进行了代码的压缩，发现并没有什么软用；因为项目使用webpack打包，就想是不是因为没有打包，于是就开始了打包，结果项目还是报错。边上网边查，我还以为是代码写错了…；最后，看了其他包的样子，发现是使用babel打包的，解决了这个大问题。</li>
<li>若你安装不上一个包，报错说是因为名字重复了：不是文件夹的名字和包的名字重复了，而是你的项目的package.json中的name和包的名字重复了…</li>
<li>自己坑自己，代码变量拼写错误，最近老是犯这个错误😔</li>
</ol>
<p>终结～</p>
]]></content>
      
        <categories>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES7-decorator]]></title>
      <url>/2017/08/13/ES7-decorator/</url>
      <content type="html"><![CDATA[<h3 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h3><p>对于装饰模式，现在还剩下鸡腿堡+香菜+辣椒的记忆。<br>这个是装饰模式的一个例子：有一个<code>汉堡</code>的抽象构件，<code>鸡腿堡</code>是具体构件，<code>香菜</code>和<code>辣椒</code>都是具体的装饰角色。现在我想计算鸡腿堡+香菜+辣椒的价格</p>
<h4 id="针对的问题"><a href="#针对的问题" class="headerlink" title="针对的问题"></a>针对的问题</h4><p>你想要动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式相比生成子类更为灵活。不改变接口的前提下，增强所考虑的类的性能。<br>何时使用：</p>
<ol>
<li>需要扩展一个类的功能，或给一个类增加附加责任。</li>
<li>需要动态的给一个对象增加功能，这些功能可以再动态地撤销。</li>
<li>需要增加一些基本功能的排列组合而产生的非常大量的功能，从而使继承变得不现实。</li>
</ol>
<h3 id="es7中的装饰器"><a href="#es7中的装饰器" class="headerlink" title="es7中的装饰器"></a>es7中的装饰器</h3><p>es7新增的decorator 属性，它借鉴自 Python，在 Python 里，decorator 实际上是一个 wrapper，它作用于一个目标函数，对这个目标函数做一些额外的操作，然后返回一个新的函数。</p>
<h4 id="装饰property"><a href="#装饰property" class="headerlink" title="装饰property"></a>装饰property</h4><p>ES2016装饰器是一个返回函数的表达式，可以将target，name和property描述符作为参数。你可以通过在装饰器前加一个“@”字符来应用它，并将其放置在您想要装饰的顶部。可以为类或属性定义装饰器。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    <span class="token function">meow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> say meow`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 如果给meow方法加上可读属性</span>
<span class="token comment" spellcheck="true">// 定义一个装饰器</span>
<span class="token keyword">function</span> readonly <span class="token punctuation">(</span>target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    descriptor<span class="token punctuation">.</span>writeable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> descriptor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    @readonly
    <span class="token function">meow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> say meow`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 此时你尝试修改meow，就会报错</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">// 在这里推荐一个module： core-decorators</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="装饰class"><a href="#装饰class" class="headerlink" title="装饰class"></a>装饰class</h4><p>在这种情况下，装饰器将使用目标target的构造函数。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">hero</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    target<span class="token punctuation">.</span>isHero <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

@hero
<span class="token keyword">class</span> <span class="token class-name">MyHero</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>MyHero<span class="token punctuation">.</span>isHero<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>还可以进一步扩展，为装饰功能提供参数。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">hero</span><span class="token punctuation">(</span>isHero<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        target<span class="token punctuation">.</span>isHero <span class="token operator">=</span> isHero<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 你可以写成ES6的形式</span>
<span class="token comment" spellcheck="true">// const hero = isHero => target => target.isHero = isHero;</span>
@<span class="token function">hero</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">MyHero</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>MyHero<span class="token punctuation">.</span>isHero<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841" target="_blank" rel="external">参考链接</a></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> es7 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[week3]]></title>
      <url>/2017/08/13/week3/</url>
      <content type="html"><![CDATA[<h3 id="❓psd转html"><a href="#❓psd转html" class="headerlink" title="❓psd转html"></a>❓psd转html</h3><p>首先你拿到设计图应该做什么？我的做法是浏览一下整个页面，找出每个模块的共同点。之后开始搭建html，再写css，最后写js。昨天拿到设计图，按照这样的模式去做。可是在最后添加icon时犯了难，因为在icon库里面没有找到合适的，就想着在psd中直接导出icon，可是这时候去看psd的时候，发现整个模块是一个图层，这个时候犯了难，我不知道设计者这样做的意图？再接着我将整个模块作为一个png导出，直接放在页面上，我感觉这样做是不对的，最后的方法是将需要的图标裁剪出来，多个图标但在一个png中。<br>这次给我一个提示：你拿到设计图第一件事是需要干什么？浏览页面的时候，是不是需要将每个模块的所在的图层全都要过一遍以及注意事项…</p>
<h3 id="❓一个带有渐变颜色的圆形边框"><a href="#❓一个带有渐变颜色的圆形边框" class="headerlink" title="❓一个带有渐变颜色的圆形边框"></a>❓一个带有渐变颜色的圆形边框</h3><p>首先为了使div带有渐变颜色的边框，于是设置它的border-image是一个渐变颜色，虽然边框是渐变的了，当时它没有圆角，即使再改变它的border-radius也不会有作用。👉我在stackoverflow上找到了解决方法<a href="https://stackoverflow.com/questions/5706963/possible-to-use-border-radius-together-with-a-border-image-which-has-a-gradient" target="_blank" rel="external">点击这里</a>。但是这种实现还是有个缺点，就是div必须设置一个背景色，进而来掩盖它的after伪元素的背景色。但是我想要的效果是它的背景色是透明的，没有找到好的解决办法，就找了一个和背景色相近的颜色去代替😔。这个偷懒的方法，期待完美的解决方案…</p>
<h3 id="❓css画出文件夹📁的轮廓"><a href="#❓css画出文件夹📁的轮廓" class="headerlink" title="❓css画出文件夹📁的轮廓"></a>❓css画出文件夹📁的轮廓</h3><p>这个问题最难的部分是画出文件夹📁上方那个弧度，没有什么好的办法，就是用两个元素的<code>border-radius</code>连接而成，理所当然的，画出的轮廓有些奇怪…因为<code>border-radius</code>越大，边框的弧度久越大，可见的border宽度会越来越窄，所以会有一种不圆滑的感觉。感觉我的想法有些奇怪…</p>
<h3 id="如何做出宽高成比例的div"><a href="#如何做出宽高成比例的div" class="headerlink" title="如何做出宽高成比例的div"></a>如何做出宽高成比例的div</h3><p>父容器设置<code>width</code>和<code>padding</code>，padding设置百分比，padding设置百分比之后和width相关。子容器飘在父容器上width和height等于父容器即可。</p>
<h3 id="❓es7装饰器"><a href="#❓es7装饰器" class="headerlink" title="❓es7装饰器"></a>❓es7装饰器</h3><p>大哥说：没有什么是包不能解决的。查看了代码是使用了装饰器。</p>
<h3 id="js中的offsetTop和jq中的offset-、position"><a href="#js中的offsetTop和jq中的offset-、position" class="headerlink" title="js中的offsetTop和jq中的offset()、position()"></a>js中的offsetTop和jq中的offset()、position()</h3><p>使用起来还是不等同的，具体的得去查看源码…</p>
<h3 id="rails-on-ruby"><a href="#rails-on-ruby" class="headerlink" title="rails on ruby"></a>rails on ruby</h3><p>在查询的时候，能进行include的就不要在jbuilder里面再去查询一遍。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[week2]]></title>
      <url>/2017/08/05/week2/</url>
      <content type="html"><![CDATA[<h3 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h3><p>写分页插件，我开始的想法是：</p>
<ol>
<li>判断是否显示“上一页”</li>
<li>判断是否显示“第一页”</li>
<li>判断是否显示“…”、”current-2”、”current-1”</li>
<li>判断是否显示 current页面</li>
<li>判断是否显示”current+1”、”current+2”、“…”</li>
<li>判断是否显示“最后一页”</li>
<li>判断是否显示“最后一页”</li>
</ol>
<p>我的目的是最少要显示cuurent周围的四个number，按照这个想法写出来，当cuurent为1时，只会显示123三个number，而我的预期是现实12345这五个number😔调整一下做法，将上面的3-5合并，<code>left</code>和<code>right</code>表示<code>current-2</code>和<code>current+2</code>，在<code>left&lt;0</code>时候，将<code>right</code>加上<code>left</code>的相反数，<code>right&gt;total</code>同理<br>最后，我还是找了一个插件用在项目中，👉插件的名字是：react-paginate，css部分需要你自己去写…</p>
<h3 id="react-and-jquery"><a href="#react-and-jquery" class="headerlink" title="react and jquery"></a>react and jquery</h3><p>目前有一个container的组件，它的子组件是list和detail，list的子组件是item，点击item，detail组件会显示，显示效果是通过增加删除类名实现的。想着组件传值比较麻烦，于是就在方法里面直接使用jq早啊道元素控制。大哥告诉我，这个解决办法是不推荐的。👉正确的做法是使用state。通过改变state的值，进而改变元素的class。</p>
<h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p>还记得之前的一个面试问题：视频有最热视频、点赞最多视频、其他视频，每次去服务器要十个数据…由于用户使用量很多，每次去数据库查询，访问量太大。这样的话，👉可以使用redis去做缓存，这样取数据库可以直接取缓存中取，设置一个时间去更新redis即可。<br>现在又一个需求，是记录每天用户登录网站的数量。👉方法一：给用户表增加一个最后登录时间的列，每天定时执行程序，统计一下最后登录时间是昨天的用户数量。这个方法中，选择什么时候去执行程序很重要，要不然就会有漏网之鱼。👉方法二：最粗暴的办法是，在redis中创建一个字段，它是一个数组，每次知道用户登录的时候，就将用户的id<code>push</code>进数组，每天用户的登录的数量，直接通过数组的长度就可以得到。这个方法的缺点就是：用户的<code>id</code>字段也是一串很长的字符串，数组会特别大。👉方法三：在redis中创建一个字段，它是一个字符串，默认是长度是用户的数量的0，若用户登录，就将对应的位置为1。在这三个方法中，第三个方法是最优方法。<br>还有一个可以做缓存的数据库叫memcache，它和redis的区别就是，redis可以持久化。</p>
<h3 id="插件js-base64"><a href="#插件js-base64" class="headerlink" title="插件js-base64"></a>插件js-base64</h3><p><code>Graphql</code>中自带的分页，after字段是base64的字符串。前端传值就需要将数字转化成base64位的字符串。</p>
<pre><code>import { Base64 } from &#39;js-base64&#39;;
const cursor = Base64.encode(number);
</code></pre><p>最后说句题外话，任何炒作都不能改变一个东西没落的事实，与其去炒作，还不如用脑子把东西做的更好。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[douban]]></title>
      <url>/2017/08/02/douban/</url>
      <content type="html"><![CDATA[<h3 id="在千里码刷题的时候看到了这个题目"><a href="#在千里码刷题的时候看到了这个题目" class="headerlink" title="在千里码刷题的时候看到了这个题目"></a>在千里码刷题的时候看到了这个题目</h3><p>题目要求是爬取豆瓣评分最高的250部电影的总分…</p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>爬数据，首先是实用http模块去爬取全部的HTML<br>然后使用cheerio去得到HTML中自己想要的数据<br>最后每页得到的总分相加</p>
<h3 id="题目中的坑"><a href="#题目中的坑" class="headerlink" title="题目中的坑"></a>题目中的坑</h3><p>1、因为豆瓣是https开头，使用https模块，具体的方法没看，使用还是按照http模块来的<br>2、如果按照正常的逻辑去写代码，最后得到的总分是0，因为https抓取数据是异步进行的<br>3、使用promise来进行处理，首先需要等到25页的数据全部抓取完毕，再进行计算总分，这时候想到了promise.all这个方法。<br>4、第一次尝试将使用promise，我在getData中直接将resolve(res)，等到下面使用的时候，res又是一个异步执行，这下尴尬😅了，于是调整顺序，在res执行end事件的时候再resolve<br>5、js中浮点类型计算的坑，我直接暴力的*10，最后在／10</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>爬评分时，顺便把电影名也爬下来了，我准备把没看的都补上😄</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> https <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'https'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cheerio'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> sumScore <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">let</span> allMovie <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token function">filterMovie</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>
  <span class="token keyword">let</span> movieList <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.grid_view li'</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> movies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  movieList<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.bd .rating_num'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> movieName <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.hd a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s+/g</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>
    movies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      name<span class="token punctuation">:</span> movieName<span class="token punctuation">,</span>
      score
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    total <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> total<span class="token punctuation">,</span> movies <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    https
      <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token string">''</span>
        res
          <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            html <span class="token operator">+</span><span class="token operator">=</span> data
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">filterMovie</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> funcArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">225</span><span class="token punctuation">;</span> i<span class="token operator">=</span>i <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token string">`https://movie.douban.com/top250?start=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>
  funcArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">getData</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

Promise
  <span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>funcArr<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>list <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> total<span class="token punctuation">,</span> movies <span class="token punctuation">}</span> <span class="token operator">=</span> list
      sumScore <span class="token operator">+</span><span class="token operator">=</span> total
      allMovie <span class="token operator">=</span> allMovie<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>movies<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"总分："</span> <span class="token operator">+</span> sumScore <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span>
    allMovie<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>movie <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> score <span class="token punctuation">}</span> <span class="token operator">=</span> movie<span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"评分："</span> <span class="token operator">+</span> score <span class="token operator">+</span> <span class="token string">"，影片名："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"出错了"</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果你有更好的想法，欢迎交流👏</p>
]]></content>
      
        <categories>
            
            <category> 代码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[work1]]></title>
      <url>/2017/07/28/week1/</url>
      <content type="html"><![CDATA[<h3 id="收获一"><a href="#收获一" class="headerlink" title="收获一"></a>收获一</h3><p>turbolinks是一款将网站变成spa的一个插件，看到文档的的某些地方和ionic有些许相似之处，于是就将之前做webApp的疑问提了出来：打开页面刚开始进的页面是主页还是登录页？经过讨论后，👉是主页；为App添加一个拦截器，对于用户登录后才能使用的页面，进入时，首先在拦截器中判断有无用户登录…另外，两者之间还有相同的一点：都会提前缓存页面。之前做app的时候，添加了拦截器，因为app首先打开进入主页（这时候开始缓存和主页相关的页面），判断用户未登录，会重定向到用户登录页，这时候就会发生页面的闪烁，关于这个问题我没有查😶，我很暴力的加了一个spash….<br>另外，关于支付宝账单页，数据是如何传递，数据格式如何设计，尝试去爬数据也没看到数据长什么样子的😑，于是目前的想到的方法是，👉后端每次去数据库取count条数据，在按照日期分组后，传到前端；前端的处理方式是：判断得到的第一个月数据与本地现有的最后一个月的数据时候是同年同月，如果是就concat第一个月的数据，剩下的数据直接push。</p>
<h3 id="收获二"><a href="#收获二" class="headerlink" title="收获二"></a>收获二</h3><p>在将加载更多全都迁移至react的过程中，我在大哥的基础上，比这葫芦画瓢，完成了页面的重构…但是现在有一个问题是：假如全用react去渲染，那么爬虫就爬不到数据，于是采用的方式是：render的时候，会在页面上先渲染一部分数据，剩下的就交给react来做；但是apollo目前提供的解决方案是：假如你将数据渲染到页面上时，会先查找cache中有没有数据，如果有就将数据渲染到页面上；否则发出网络请求。这意味着，只要我将插件渲染到页面上，就会发出网络请求，这一条网络请求是不需要的。因为用户可能不会浏览很多数据，于是想到的办法是：👉等用户去点击加载更多的时候，再去发送网络请求。查找apollo的文档，能想到的办法是：👉预先向cache中写去空数据，这样渲染时，在cache中找到数据，就不发送请求了，但是我不知如何写入数据😖，这是一个预留问题😞很忧伤的一个问题…待续…</p>
<h3 id="收获三"><a href="#收获三" class="headerlink" title="收获三"></a>收获三</h3><p>知道了reduce这个优雅的方法，promise也提供了这个方法….</p>
<h3 id="收获四"><a href="#收获四" class="headerlink" title="收获四"></a>收获四</h3><p>在还原原型图时，更多的时间应该花费在如何设计HTML的结构上，再接下来再写css，最后再写js。这次做的时候，本来是设计好了还能符合要求的HTML结构，结果在写css的时候，发现现在的HTML不能达到预期，于是开始设计调整HTML，幸亏样式使用scss写的😉…还有一个，我看到排排站的元素，首先想到的不是ul&gt;li，而是直接用a标签去尝试解决…</p>
<h3 id="收获五"><a href="#收获五" class="headerlink" title="收获五"></a>收获五</h3><p>再看文档的时候，看到了一个新的名词：Vanilla JS；用Google translate翻译了叫奶味js😀，于是就去查它到底是何方神圣，原来它的另一个名字叫做javascript😅</p>
<h3 id="收获六"><a href="#收获六" class="headerlink" title="收获六"></a>收获六</h3><p>因为sublimen并没有完整配置，push上去的代码就跑不过测试。这次找到了eslint检测js的package,叫做SublimeLinter-contrib-eslingt，代码不通过有红色标识…</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Array的reduce方法]]></title>
      <url>/2017/07/28/reduce/</url>
      <content type="html"><![CDATA[<h3 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h3><p>第一次听说Array的reduce方法是在面试的时候<br>这次看到大哥写的一个函数，里面用了reduce，哇，真的好优雅。因为代码的重复片段太多，我尝试去封装一个通用函数，没有成功。于是大哥出动了。<br>目的是这样的：我可能需要data.user.article的值，或者需要data.article的值，或者需要data.categories.article的值，于是封装一个方法每次取到article的值。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 封装一个函数reg，参数为belongto，传递的参数分别是：['user'] [] [categories]</span>
<span class="token comment" spellcheck="true">// 函数内部的主要代码是</span>
<span class="token keyword">return</span> belongto<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> p<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span>article
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="reduce文档"><a href="#reduce文档" class="headerlink" title="reduce文档"></a>reduce文档</h3><h4 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h4><pre class="line-numbers language-javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>callback<span class="token punctuation">[</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>callback有四个参数：分别是accumulator(它是callback上一次返回的值或者是initialValue，前提是initialValue存在)、currentValue(正在使用的值)、currentIndex(正在使用的值在数组中的索引)、array(这个是循环的数组)；<br>initialValue：用作第一次调用回调的初始值，如果不提供此参数，则第一次调用回调的初始值是数组的第一个元素。为了保证安全，最好提供这个值</p>
<p>tip: 当数组为空时，若提供initialValue，则最后的返回值是initialValue，否则，报错；<br>     当数组不为空时，若提供initialValue，则循环从index为0开始；否则循环从index为1开始，accumulator此时为index为0的值。</p>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>回调函数的最后的返回值</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>求数组元素的总和（告别for循环）</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// sum is 6</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>连接数组</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// result is [0, 1, 2, 3, 4, 5]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>相同元素在数组中出现几次</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Tiff'</span><span class="token punctuation">,</span> <span class="token string">'Bruce'</span><span class="token punctuation">,</span> <span class="token string">'Alice'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> countedNames <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>allNames<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> allNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    allNames<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    allNames<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> allNames<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// countedNames is:</span>
<span class="token comment" spellcheck="true">// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[relay-apollo]]></title>
      <url>/2017/07/23/relay-apollo/</url>
      <content type="html"><![CDATA[<h3 id="使用relay的感受"><a href="#使用relay的感受" class="headerlink" title="使用relay的感受"></a>使用relay的感受</h3><p>初次接触relay，感觉上很臃肿，因为必须为每个组件设置container；若query层级嵌套很深，为了组件化，就必须将每一个react的component全部分开，在项目中，我写了六个组件，那么每个组件都需要container，写起来感觉满满的恶意。</p>
<h3 id="使用Apollo"><a href="#使用Apollo" class="headerlink" title="使用Apollo"></a>使用Apollo</h3><p>再次接触Apollo，看了文档，感觉和relay大同小异，与relay的不同是：无需为每个component设置container，最后写一个query就ok👌了。query也可以由多个fragment组成。另外，apollo也为angularjs提供了解决方案，有点想不明白🤔，angularjs本身就是双向数据绑定，为什么要对它提供解决方案…另外，Apollo虽然自身内部集成了redux，假如你的项目中使用了redux，你可以使用redux而不用Apollo内部的redux。</p>
<p>relay 因为container的存在，数据划分的比较严密，你只能在当前的container访问fragment中的的属性，不能访问父或子fragment的属性。而apollo直接使用的是请求得到的Object…<br>Apollo也可以和项目原有的redux相结合使用，relay不可以…<br>待续…<br>这次写的很匆忙，假如有不正确的地方，请指正，谢谢😊。</p>
]]></content>
      
        <categories>
            
            <category> graphql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> angularjs </tag>
            
            <tag> graphql </tag>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git]]></title>
      <url>/2017/07/22/git/</url>
      <content type="html"><![CDATA[<h3 id="使用git想要去合并两个commit"><a href="#使用git想要去合并两个commit" class="headerlink" title="使用git想要去合并两个commit"></a>使用git想要去合并两个commit</h3><p>今天好不容易完成了工作，睡觉的时候突然想到还有些小瑕疵，就想改正。但是改动范围很小，不好意思在commit一次，于是就想将两次commit合并在一起，但是我没有将最新的commit推送到远程分支，就直接合并了两个commit成了一个新的commit，在推送到远程时，也没有先进行pull的动作（👉每次push之前一定要进行pull的动作），导致远程commit和我合并的commit发生冲突，最后还需要手动merge。看了一下提交记录，吓坏了，本来我想合并commit，预计的commit只会在之前的基础上多一次commit，但是现在多了三次commit，这下坏了。<br>于是，上网查询，试了好几种办法。找到了一个很合适的办法</p>
<pre><code>git  reset HEAD^ --hard    //彻底回退到上次提交
git push origin 分支名 -f   // 强制推送到远程
</code></pre><p>这样操作以后，我的问题解决了</p>
<p>待续…</p>
<p>-补充—<br>最好不要不要强行push😕</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react-relay]]></title>
      <url>/2017/07/22/react-relay/</url>
      <content type="html"><![CDATA[<p>上次写感想还是2014的时候，那个时候是老师布置的作业（尴尬)<br>队长看到GraphQL很好，于是先拿一个功能来试手😊。<br>前端要使用GraphQL，最简单的方法是使用ajax发送query字符串。这个方法，若query嵌套层级太深，会导致query很长，长的让人接受不了；再者，假如数据变化，需要你手动的去改变DOM。项目中使用了react，于是队长给推荐了react-relay来配合GraphQL。<br>首先给的时间是看GraphQL和react-relay的文档，先瞄一眼relay的文档，感觉是层层嵌套，就先去看GraphQL的文档，relay的文档没有看完…😶</p>
<h3 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h3><p>开始在队长的鼓励下开始写relay，到了relay的官网上，看到有一个Demo，就把代码给copy下来，再根据文档理解了代码的意思，就开始尝试着写代码。写代码的过程有点别扭，刚开始接触，会犯一些错误。但是又不知道错误发生的原因，于是就开始google解决。也想吐槽一下文档，文档上说，fragment的name建议是fileName_propsName，于是为了名字短点，就全部改了，结果编译的时候，告诉我是must be。😢<br>代码终于不报错了，但是需要一个schema的文件。我想手写schema太繁琐了，也是去查有没有自动生成schema的插件，但是很遗憾，我找到都是配合node使用的（假如你有好的插件，请推荐给我，谢谢）。找啊找，找啊找，也没找到合适的，最终是队长上网找了一个工具生成的🤗。schema的问题解决。schema的存在是为了映射fragment的type。<br>这个时候，大哥过来问问我怎么样了，我告诉他，虽然安装了react-relay，可是文档上的方法不存在，我就很暴力的改了源码，将方法暴露出来。他告诉我relay现在有两个版本：classic和modern，modern是最新的。我弱弱的问一句，咱们用哪个版本，他说当然是最新的。我的内心在哭泣😭。既然只是版本的迭代，思想肯定没有太大的变化，于是打起精神来看文档。👉这里是我太心急了，直接看了Demo，就ctrl+f去直接搜方法了，没有整体的先浏览一下文档，要不然也不会有这个不可预料的情况。</p>
<h3 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h3><p>边看文档，边改我的代码。👉刚开始报错是“没有配置babel或者graphql写错了”，假如你的babel配置是按照文档来的，那最有可能的就是你的fragment或者query写错了。最简单的query可以正常的渲染出来了，因为是query中需要有参数，所以开始看如何使用参数。在查资料的时候，<a href="https://github.com/facebook/relay/issues/1700" target="_blank" rel="external">这个链接</a>给了我很大的帮助。但是在这个过程中，下面的错误伴随了我十个小时，我一直在尝试解决这个错误，于是上网查啊查 查啊查 查啊查<br><img src="http://upload-images.jianshu.io/upload_images/7018384-1d20f70b1bae001a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>也没找到答案</p>
<h3 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h3><p>大哥说他写出来了，我看了他的代码，对比我的代码，唯一的不同是，我将edges和node要写在不同的fragment中。我尝试在正确的代码上改成我设计的fragment，功能就报错了。我意识到，需要将edges和node写在同一个fragment中。👉出现这个错误的原因是，我已经封装好的fragment，出现这个错误，我全部的心思都放在了index.js，没有检查我封装好的组件。假如再来一次，我也会被困在这个error上出不来。之后因为还有一个加载更多的动作，于是我开始完成这个功能，在这个过程中，我学会了react父子组件如何传递消息。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>功能完成好了。但是在进行测试的时候，再看network时，加载更多这个按钮是通过first这个参数来进行请求数据，first的意思就是取前first数据，后端限制first只能取到50，即使可以取到1000，但是在网络上传输1000条数据，也是一笔庞大的负担。relay也提供了分页的container，但是没有研究出来是怎样使用的。于是relay需要更换….所以，没有一个很好的方式来解决这个问题。👉队长又给推荐了Apollo，接下来要去看Apollo了<br>待续…</p>
]]></content>
      
        <categories>
            
            <category> graphql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> graphql </tag>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[wechatPHP]]></title>
      <url>/2017/03/29/wechatPHP/</url>
      <content type="html"><![CDATA[<p>使用apache+php5.4n<br>1、打开apache配置文件httpd.conf<br>      搜索httpd-vhosts.conf，打开这一行的注释<br>2、打开apache所在目录下的，conf/extra/httpd-vhost.conf<br>  增加以下代码，保存</p>
<pre><code>&lt;VirtualHost *:80&gt;  
 DocumentRoot &quot;D:\WWW\car-xxxx\car&quot;  
 ServerName www.car-zones.com  
&lt;/VirtualHost&gt;  
&lt;Directory &quot;D:\WWW\car-xxxx\car&quot;&gt;  
    Options Indexes FollowSymLinks Includes ExecCGI  
    AllowOverride All  
    Order allow,deny  
    Allow from all  
&lt;/Directory&gt;
</code></pre><p>3、重启apache<br>4、打开c:/windows/system32/drivers/etc/hots<br>最后一行加入：www.car-xxxx.com<br>5、访问 www.car-xxxx.com<br>6、完成配置</p>
<p>第一次学习，记录一下</p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信公众号 </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dataTable]]></title>
      <url>/2017/03/26/dataTable/</url>
      <content type="html"><![CDATA[<p>偶然发现一个叫 dataTable  的组件，觉得很好用，于是研究了一番，下面是代码</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> lang <span class="token operator">=</span> <span class="token punctuation">{</span>  
  <span class="token string">"sProcessing"</span><span class="token punctuation">:</span> <span class="token string">"处理中..."</span><span class="token punctuation">,</span>  
  <span class="token string">"sLengthMenu"</span><span class="token punctuation">:</span> <span class="token string">"每页 _MENU_ 项"</span><span class="token punctuation">,</span>  
  <span class="token string">"sZeroRecords"</span><span class="token punctuation">:</span> <span class="token string">"没有匹配结果"</span><span class="token punctuation">,</span>  
  <span class="token string">"sInfo"</span><span class="token punctuation">:</span> <span class="token string">"当前显示第 _START_ 至 _END_ 项，共 _TOTAL_ 项。"</span><span class="token punctuation">,</span>  
  <span class="token string">"sInfoEmpty"</span><span class="token punctuation">:</span> <span class="token string">"当前显示第 0 至 0 项，共 0 项"</span><span class="token punctuation">,</span>  
  <span class="token string">"sInfoFiltered"</span><span class="token punctuation">:</span> <span class="token string">"(由 _MAX_ 项结果过滤)"</span><span class="token punctuation">,</span>  
  <span class="token string">"sInfoPostFix"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  
  <span class="token string">"sSearch"</span><span class="token punctuation">:</span> <span class="token string">"搜索:"</span><span class="token punctuation">,</span>  
  <span class="token string">"sUrl"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  
  <span class="token string">"sEmptyTable"</span><span class="token punctuation">:</span> <span class="token string">"表中数据为空"</span><span class="token punctuation">,</span>  
  <span class="token string">"sLoadingRecords"</span><span class="token punctuation">:</span> <span class="token string">"载入中..."</span><span class="token punctuation">,</span>  
  <span class="token string">"sInfoThousands"</span><span class="token punctuation">:</span> <span class="token string">","</span><span class="token punctuation">,</span>  
  <span class="token string">"oPaginate"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  
    <span class="token string">"sFirst"</span><span class="token punctuation">:</span> <span class="token string">"首页"</span><span class="token punctuation">,</span>  
    <span class="token string">"sPrevious"</span><span class="token punctuation">:</span> <span class="token string">"上页"</span><span class="token punctuation">,</span>  
    <span class="token string">"sNext"</span><span class="token punctuation">:</span> <span class="token string">"下页"</span><span class="token punctuation">,</span>  
    <span class="token string">"sLast"</span><span class="token punctuation">:</span> <span class="token string">"末页"</span><span class="token punctuation">,</span>  
    <span class="token string">"sJump"</span><span class="token punctuation">:</span> <span class="token string">"跳转"</span>  
  <span class="token punctuation">}</span><span class="token punctuation">,</span>  
 <span class="token string">"oAria"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  
    <span class="token string">"sSortAscending"</span><span class="token punctuation">:</span> <span class="token string">": 以升序排列此列"</span><span class="token punctuation">,</span>  
    <span class="token string">"sSortDescending"</span><span class="token punctuation">:</span> <span class="token string">": 以降序排列此列"</span>  
  <span class="token punctuation">}</span>  
<span class="token punctuation">}</span><span class="token punctuation">;</span>  

<span class="token keyword">var</span> table <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#sample"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dataTable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  
  language<span class="token punctuation">:</span>lang<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//提示信息  </span>
  autoWidth<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//禁用自动调整列宽  </span>
  processing<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//隐藏加载提示,自行处理  </span>
  serverSide<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//启用服务器端分页  </span>
  searching<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//禁用原生搜索  </span>
  search<span class="token punctuation">:</span> <span class="token punctuation">{</span>  
    <span class="token string">"search"</span><span class="token punctuation">:</span> <span class="token string">""</span>  
  <span class="token punctuation">}</span><span class="token punctuation">,</span>  
  ordering<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>  
  renderer<span class="token punctuation">:</span> <span class="token string">"bootstrap"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//渲染样式：Bootstrap和jquery-ui  </span>
  lengthChange<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  
  pageLength<span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">,</span>  
  rowId<span class="token punctuation">:</span> <span class="token string">'_id'</span><span class="token punctuation">,</span>  
  pagingType<span class="token punctuation">:</span> <span class="token string">"simple_numbers"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//分页样式：simple,simple_numbers,full,full_numbers  </span>
  columnDefs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>  
    <span class="token string">"targets"</span><span class="token punctuation">:</span> <span class="token string">'nosort'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//列的样式名  </span>
    <span class="token string">"orderable"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token comment" spellcheck="true">//包含上样式名‘nosort’的禁止排序  </span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  
  ajax<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> settings<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token comment" spellcheck="true">//封装请求参数  </span>
    <span class="token keyword">var</span> param <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  
    param<span class="token punctuation">.</span>keyword <span class="token operator">=</span> data<span class="token punctuation">.</span>search<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  
    param<span class="token punctuation">.</span>limit <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//页面显示记录条数，在页面显示每页显示多少项的时候  </span>
    param<span class="token punctuation">.</span>start <span class="token operator">=</span> data<span class="token punctuation">.</span>start<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开始的记录序号  </span>
    param<span class="token punctuation">.</span>page <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>start <span class="token operator">/</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前页码  </span>
    <span class="token comment" spellcheck="true">//console.log(param);  </span>
    <span class="token comment" spellcheck="true">//ajax请求数据  </span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  
      type<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>  
      url<span class="token punctuation">:</span> <span class="token string">"/payment/result"</span><span class="token punctuation">,</span>  
      cache<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//禁用缓存  </span>
      data<span class="token punctuation">:</span> param<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//传入组装的参数  </span>
      dataType<span class="token punctuation">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>  
      success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>  

        <span class="token comment" spellcheck="true">//封装返回数据  </span>
        <span class="token keyword">var</span> returnData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  
        returnData<span class="token punctuation">.</span>draw <span class="token operator">=</span> data<span class="token punctuation">.</span>draw<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里直接自行返回了draw计数器,应该由后台返回  </span>
        returnData<span class="token punctuation">.</span>recordsTotal <span class="token operator">=</span> result<span class="token punctuation">.</span>totalCount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回数据全部记录  </span>
        returnData<span class="token punctuation">.</span>recordsFiltered <span class="token operator">=</span> result<span class="token punctuation">.</span>totalCount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后台不实现过滤功能，每次查询均视作全部结果  </span>
        returnData<span class="token punctuation">.</span>data <span class="token operator">=</span> result<span class="token punctuation">.</span>payment<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回的数据列表  </span>
        <span class="token comment" spellcheck="true">//调用DataTables提供的callback方法，代表数据已封装完成并传回DataTables进行渲染  </span>
        <span class="token comment" spellcheck="true">//此时的数据需确保正确无误，异常判断应在执行此回调前自行处理完毕  </span>
        <span class="token function">callback</span><span class="token punctuation">(</span>returnData<span class="token punctuation">)</span><span class="token punctuation">;</span>  
      <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span><span class="token punctuation">,</span>  
  <span class="token comment" spellcheck="true">//列表表头字段  </span>
  columns<span class="token punctuation">:</span> <span class="token punctuation">[</span>   
    <span class="token punctuation">{</span>    
      className<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>    
      orderable <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    
      bSortable <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    
      data <span class="token punctuation">:</span> <span class="token string">"_id"</span><span class="token punctuation">,</span>    
      render <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> type<span class="token punctuation">,</span> row<span class="token punctuation">,</span> meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>    
        <span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token string">'&lt;label class="position-relative">'</span><span class="token punctuation">;</span>    
        content <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;input type="checkbox" class="ace" value="'</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">'" />'</span><span class="token punctuation">;</span>    
        content <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;span class="lbl">&lt;/span>'</span><span class="token punctuation">;</span>    
        content <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;/label>'</span><span class="token punctuation">;</span>    
        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    
      <span class="token punctuation">}</span>       
    <span class="token punctuation">}</span><span class="token punctuation">,</span>    
    <span class="token punctuation">{</span>   
      <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token string">"type"</span><span class="token punctuation">,</span>  
      render<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span>type<span class="token punctuation">,</span>full<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  
        <span class="token keyword">if</span><span class="token punctuation">(</span>date <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
          content <span class="token operator">=</span> <span class="token string">'收入'</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
          content <span class="token operator">=</span> <span class="token string">'支出'</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">return</span> content<span class="token punctuation">;</span>  
      <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span><span class="token punctuation">,</span>  
    <span class="token punctuation">{</span> <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token string">"name"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  
    <span class="token punctuation">{</span> <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token string">"price"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  
    <span class="token punctuation">{</span> <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token string">"product_type"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  
    <span class="token punctuation">{</span> <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token string">"meta.createAt"</span><span class="token punctuation">,</span>  
      render<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span>type<span class="token punctuation">,</span>full<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
      <span class="token keyword">return</span> date<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
      <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span><span class="token punctuation">,</span>  
    <span class="token punctuation">{</span>   
      bSortable <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    
      visible <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   
      data <span class="token punctuation">:</span> <span class="token string">"_id"</span><span class="token punctuation">,</span>       
      render <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> type<span class="token punctuation">,</span> full<span class="token punctuation">)</span> <span class="token punctuation">{</span>    
        <span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token string">'&lt;div class="hidden-sm hidden-xs action-buttons">'</span><span class="token operator">+</span>  
        <span class="token string">'&lt;a href="/payment/detail/'</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">'" class="blue">'</span><span class="token operator">+</span>  
        <span class="token string">'&lt;i class="ace-icon fa fa-search-plus bigger-130">&lt;/i>'</span><span class="token operator">+</span>  
        <span class="token string">' &lt;/a>'</span><span class="token operator">+</span>  
        <span class="token string">'&lt;a href="javascript:void(0);" data-id="'</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">'" class="delete_btn red">'</span><span class="token operator">+</span>  
        <span class="token string">'&lt;i class="ace-icon fa fa-trash-o bigger-130">&lt;/i>'</span><span class="token operator">+</span>  
        <span class="token string">'&lt;/a>'</span><span class="token operator">+</span>  
        <span class="token string">'&lt;/div>'</span><span class="token operator">+</span>  
        <span class="token string">'&lt;div class="hidden-md hidden-lg">'</span><span class="token operator">+</span>  
        <span class="token string">'  &lt;div class="inline position-relative">'</span><span class="token operator">+</span>  
        <span class="token string">'    &lt;button data-toggle="dropdown" data-position="auto" class="btn btn-minier btn-yellow dropdown-toggle">&lt;i class="ace-icon fa fa-caret-down icon-only bigger-120">&lt;/i>&lt;/button>'</span><span class="token operator">+</span>  
        <span class="token string">'&lt;ul class="dropdown-menu dropdown-only-icon dropdown-yellow dropdown-menu-right dropdown-caret dropdown-close">'</span><span class="token operator">+</span>  
        <span class="token string">' &lt;li>&lt;a href="/payment/detail/'</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">'" data-rel="tooltip" title="" data-original-title="View" class="tooltip-info">&lt;span class="blue">&lt;i class="ace-icon fa fa-search-plus bigger-120">&lt;/i>&lt;/span>&lt;/a>'</span><span class="token operator">+</span>  
        <span class="token string">'&lt;li>&lt;a data-rel="tooltip" title="" data-original-title="Delete" data-id="'</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">'" class="delete_btn tooltip-error">&lt;span class="red">&lt;i class="ace-icon fa fa-trash-o bigger-120">&lt;/i>&lt;/span>&lt;/a>&lt;/li>'</span><span class="token operator">+</span>  
        <span class="token string">'&lt;/ul>&lt;/div>&lt;/div>'</span><span class="token punctuation">;</span>  

        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    
      <span class="token punctuation">}</span>     
    <span class="token punctuation">}</span>   
  <span class="token punctuation">]</span>  
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token comment" spellcheck="true">//此处需调用api()方法,否则返回的是JQuery对象而不是DataTables的API对象  </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[moment]]></title>
      <url>/2016/12/11/moment/</url>
      <content type="html"><![CDATA[<p>首先，好久没有来多博客了</p>
<p>今天在学习MongoDB时，需要格式化时间，上网查了一下，nodejs中的moment模块可以格式化时间。<br>首先，mongodb中有一个字段是Date类型需要一个默认值，就是当前时间，可以使用以下代码来格式化时间</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用以下代码也是可以的</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>目前只使用这两个方法，以后再来补充<br>——————————————————分割线———————————-<br>在存入<a href="http://lib.csdn.net/base/mysql" target="_blank" rel="external">数据库</a>时，我已经格式化日期了，取出来发现是没有格式的数据，很纳闷，不知道原因，找到了解决办法。<br>express我是用的jade模板，<br>在app.js中加入</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在jade中读取日期数据使用</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">#<span class="token punctuation">{</span><span class="token function">moment</span><span class="token punctuation">(</span>friend<span class="token punctuation">.</span>createTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>取出来的日期是格式化的</p>
]]></content>
      
        <categories>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[useMongoDB]]></title>
      <url>/2016/12/11/useMongoDB/</url>
      <content type="html"><![CDATA[<p>最近在学习mongdb</p>
<p>以下是使用mongoose模块来保存数据</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">var</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

<span class="token comment" spellcheck="true">// 连接字符串格式为mongodb://主机/数据库名  </span>
mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://localhost/test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">var</span> db <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">;</span>  
<span class="token comment" spellcheck="true">//输出连接日志  </span>
db<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Connection error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

db<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Mongo working!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

<span class="token comment" spellcheck="true">// 创建schema  </span>
<span class="token keyword">var</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span>  
<span class="token keyword">var</span> userSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  
    name<span class="token punctuation">:</span> String<span class="token punctuation">,</span>  
    age<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>  
    createTime<span class="token punctuation">:</span> <span class="token punctuation">{</span>  
        type<span class="token punctuation">:</span> Date<span class="token punctuation">,</span>  
        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>  
    <span class="token punctuation">}</span><span class="token punctuation">,</span>  
    updateTime<span class="token punctuation">:</span> <span class="token punctuation">{</span>  
        type<span class="token punctuation">:</span> Date<span class="token punctuation">,</span>  
        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>  
    <span class="token punctuation">}</span><span class="token punctuation">,</span>  
    telphone<span class="token punctuation">:</span> String  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment" spellcheck="true">// 构建model  </span>
<span class="token keyword">var</span> User <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">,</span> userSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment" spellcheck="true">//构建model实例  </span>
<span class="token keyword">var</span> userData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  
    name<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>  
    age<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>  
    telphone<span class="token punctuation">:</span> <span class="token string">'18766560229'</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

<span class="token comment" spellcheck="true">// 保存数据  </span>
userData<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Save success'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>还有，输出信息有以下信息：<br>(node:7780) DeprecationWarning: Mongoose: mpromise (mongoose’s default promise library) is deprecated, plug in your own promise library instead: <a href="http://mongoosejs.com/docs/promises.html" target="_blank" rel="external">http://mongoosejs.com/docs/promises.html</a><br>也不不知道是什么意思，需要补充</p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ngInterpolate]]></title>
      <url>/2016/09/17/ngInterpolate/</url>
      <content type="html"><![CDATA[<p>$interpolate服务返回一个函数，用来在特定的上下文中运算表达式。<br>示例：<br>html代码：</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ng-controller</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myController<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ng-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>to<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">ng-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emailBody<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span>{{previewText}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>js代码：</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">angular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">'myApp'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  
  <span class="token punctuation">.</span><span class="token function">controller</span><span class="token punctuation">(</span><span class="token string">'myController'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'$scope'</span><span class="token punctuation">,</span><span class="token string">'$interpolate'</span><span class="token punctuation">,</span>  
    <span class="token keyword">function</span><span class="token punctuation">(</span>$scope<span class="token punctuation">,</span>$interpolate<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
      $scope<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'emailBody'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">if</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
          <span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token function">$interpolate</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  
          $scope<span class="token punctuation">.</span>previewText <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">{</span>to<span class="token punctuation">:</span>$scope<span class="token punctuation">.</span>to<span class="token punctuation">}</span><span class="token punctuation">)</span>  
        <span class="token punctuation">}</span>  
      <span class="token punctuation">}</span><span class="token punctuation">)</span>  
    <span class="token punctuation">}</span>  
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用：在输入框中输入你的email地址，在文本框中输入，previewText中的值即为to的值</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> angularjs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java1]]></title>
      <url>/2016/07/20/java1/</url>
      <content type="html"><![CDATA[<p>Java已经忘了差不多了，最近又需要重新捡起Java。<br>对于一副扑克牌共有54张，扑克牌洗牌就是将这54张牌没有规律的输出出来，<br>用ArrayList实现，本质是54个数的随机输出，穿了身衣服，输出出来就好看多了</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Poker</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">poker</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> huase <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"红桃"</span><span class="token punctuation">,</span><span class="token string">"黑桃"</span><span class="token punctuation">,</span><span class="token string">"梅花"</span><span class="token punctuation">,</span><span class="token string">"方块"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> number <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token string">"7"</span><span class="token punctuation">,</span><span class="token string">"8"</span><span class="token punctuation">,</span><span class="token string">"9"</span><span class="token punctuation">,</span><span class="token string">"10"</span><span class="token punctuation">,</span><span class="token string">"J"</span><span class="token punctuation">,</span><span class="token string">"Q"</span><span class="token punctuation">,</span><span class="token string">"K"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  
        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">/</span><span class="token number">4</span> <span class="token operator">></span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">%</span><span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                str <span class="token operator">+=</span> <span class="token string">"小鬼"</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">%</span><span class="token number">4</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                str <span class="token operator">+=</span> <span class="token string">"大鬼"</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
            str <span class="token operator">+=</span> huase<span class="token punctuation">[</span>num<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> number<span class="token punctuation">[</span>num<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">return</span> str<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>public class Client {  

    public static void main(String[] args) {  
        // 定义变量  
        ArrayList list = new ArrayList();  
        Random random = new Random();  
        Poker poker = new Poker();  
        int i = 0;  

        // 向数组中增加数字  
        for(i=0;i&lt;54;i++) {  
            list.add(poker.poker(i));  
        }  

        // 随机输出数组中的每个数字  
        int length = list.size();  
        for(i=0;i&lt;length;i++) {  
            //随机生成数组下标  
            int num = random.nextInt(list.size());  
            //取出数字  
            System.out.println(list.get(num));  
            //将数字从数组中移除  
            list.remove(num);  
        }  
    }  
}
</code></pre><p>看起来舒服多了</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css-margin]]></title>
      <url>/2016/07/16/css-margin/</url>
      <content type="html"><![CDATA[<p>今天在慕课上看了张大神又一力作，整理了一下<br>margin的巧妙使用：<br>1、margin实现自适应的宽高比为2：1的矩形</p>
<pre><code>&lt;div id=&quot;container&quot;&gt;  
    &lt;div class=&quot;box&quot;&gt;  
       &lt;div&gt;&lt;/div&gt;  
    &lt;/div&gt;  
&lt;/div&gt;
</code></pre><pre><code>&lt;style type=&quot;text/css&quot;&gt;  
  #container {  
    width: 400px;  
    height: 250px;  
  }  
  .box {  
    background-color: olive;  
    overflow: hidden;  
  }  
  .box &gt; div {  
    margin: 50%;  
  }  
&lt;/style&gt;
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/7018384-24ac7fb1fccbcec6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><img src="http://upload-images.jianshu.io/upload_images/7018384-70156a9605e570a9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><img src="http://upload-images.jianshu.io/upload_images/7018384-92ecf8c007214a71?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
